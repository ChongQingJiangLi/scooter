	.file	"bootloader.c"
	.arch atmega128
__SREG__ = 0x3f
__SP_H__ = 0x3e
__SP_L__ = 0x3d
__tmp_reg__ = 0
__zero_reg__ = 1
	.global __do_copy_data
	.global __do_clear_bss
	.text
.global	initbootuart
	.type	initbootuart, @function
initbootuart:
/* prologue: frame size=0 */
/* prologue end (size=0) */
	ldi r24,lo8(7)
	out 41-0x20,r24
	ldi r24,lo8(24)
	out 42-0x20,r24
/* epilogue: frame size=0 */
	ret
/* epilogue end (size=1) */
/* function initbootuart size 5 (4) */
	.size	initbootuart, .-initbootuart
.global	sendchar
	.type	sendchar, @function
sendchar:
/* prologue: frame size=0 */
/* prologue end (size=0) */
.L5:
	sbis 43-0x20,5
	rjmp .L5
	out 44-0x20,r24
/* epilogue: frame size=0 */
	ret
/* epilogue end (size=1) */
/* function sendchar size 4 (3) */
	.size	sendchar, .-sendchar
.global	recchar
	.type	recchar, @function
recchar:
/* prologue: frame size=0 */
/* prologue end (size=0) */
.L12:
	sbis 43-0x20,7
	rjmp .L12
	in r24,44-0x20
	clr r25
	sbrc r24,7
	com r25
/* epilogue: frame size=0 */
	ret
/* epilogue end (size=1) */
/* function recchar size 7 (6) */
	.size	recchar, .-recchar
.global	recword
	.type	recword, @function
recword:
/* prologue: frame size=0 */
	push r16
	push r17
/* prologue end (size=2) */
	call recchar
	mov r16,r24
	call recchar
	clr r25
	mov r25,r24
	clr r24
	clr r17
	or r24,r16
	or r25,r17
/* epilogue: frame size=0 */
	pop r17
	pop r16
	ret
/* epilogue end (size=3) */
/* function recword size 16 (11) */
	.size	recword, .-recword
.global	hex
	.type	hex, @function
hex:
/* prologue: frame size=0 */
/* prologue end (size=0) */
	cpi r24,lo8(10)
	brsh .L20
	subi r24,lo8(-(48))
	clr r25
	sbrc r24,7
	com r25
	ret
.L20:
	subi r24,lo8(-(87))
	clr r25
	sbrc r24,7
	com r25
	ret
/* epilogue: frame size=0 */
/* epilogue: noreturn */
/* epilogue end (size=0) */
/* function hex size 12 (12) */
	.size	hex, .-hex
.global	BlockLoad
	.type	BlockLoad, @function
BlockLoad:
/* prologue: frame size=128 */
	push r4
	push r5
	push r6
	push r7
	push r8
	push r9
	push r10
	push r11
	push r12
	push r13
	push r14
	push r15
	push r16
	push r17
	push r28
	push r29
	in r28,__SP_L__
	in r29,__SP_H__
	subi r28,lo8(128)
	sbci r29,hi8(128)
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
/* prologue end (size=25) */
	movw r10,r24
	movw r12,r20
	cpi r22,lo8(69)
	breq .+2
	rjmp .L25
	movw r6,r24
	clr r8
	clr r9
	or r24,r25
	breq .L45
	clr r14
	clr r15
	movw r16,r14
	movw r4,r28
	sec
	adc r4,__zero_reg__
	adc r5,__zero_reg__
.L29:
	call recchar
	movw r30,r4
	add r30,r14
	adc r31,r15
	st Z,r24
	sec
	adc r14,__zero_reg__
	adc r15,__zero_reg__
	adc r16,__zero_reg__
	adc r17,__zero_reg__
	cp r6,r14
	cpc r7,r15
	cpc r8,r16
	cpc r9,r17
	brne .L29
.L45:
	lds r24,104
	sbrc r24,0
	rjmp .L45
	or r10,r11
	brne .+2
	rjmp .L31
	ldi r18,lo8(0)
	ldi r19,hi8(0)
	ldi r20,hlo8(0)
	ldi r21,hhi8(0)
	movw r22,r28
	subi r22,lo8(-(1))
	sbci r23,hi8(-(1))
.L33:
	movw r30,r12
	ld r24,Z
	ldd r25,Z+1
	ldd r26,Z+2
	ldd r27,Z+3
	out 62-0x20,r24
	ld r24,Z
	ldd r25,Z+1
	ldd r26,Z+2
	ldd r27,Z+3
	mov r24,r25
	mov r25,r26
	mov r26,r27
	clr r27
	sbrc r26,7
	dec r27
	out 63-0x20,r24
	movw r30,r22
	add r30,r18
	adc r31,r19
	ld r24,Z
	out 61-0x20,r24
	sbi 60-0x20,2
	sbi 60-0x20,1
.L34:
	sbic 60-0x20,1
	rjmp .L34
	movw r30,r12
	ld r24,Z
	ldd r25,Z+1
	ldd r26,Z+2
	ldd r27,Z+3
	adiw r24,1
	adc r26,__zero_reg__
	adc r27,__zero_reg__
	st Z,r24
	std Z+1,r25
	std Z+2,r26
	std Z+3,r27
	subi r18,lo8(-(1))
	sbci r19,hi8(-(1))
	sbci r20,hlo8(-(1))
	sbci r21,hhi8(-(1))
	cp r6,r18
	cpc r7,r19
	cpc r8,r20
	cpc r9,r21
	brne .+2
	rjmp .L31
	rjmp .L33
.L25:
	cpi r22,lo8(70)
	breq .+2
	rjmp .L36
	movw r30,r20
	ld r24,Z
	ldd r25,Z+1
	ldd r26,Z+2
	ldd r27,Z+3
	cpi r24,lo8(129024)
	ldi r31,hi8(129024)
	cpc r25,r31
	ldi r31,hlo8(129024)
	cpc r26,r31
	ldi r31,hhi8(129024)
	cpc r27,r31
	brlt .+2
	rjmp .L36
	lsl r24
	rol r25
	rol r26
	rol r27
	movw r30,r20
	st Z,r24
	std Z+1,r25
	std Z+2,r26
	std Z+3,r27
	movw r6,r24
	movw r8,r26
	ldi r17,lo8(1)
.L39:
	call recword
	movw r30,r12
	ld r18,Z
	ldd r19,Z+1
	ldd r20,Z+2
	ldd r21,Z+3
/* #APP */
	movw  r0, r24
	movw r30, r18
	sts 91, r20
	sts 104, r17
	spm
	clr  r1
	
/* #NOAPP */
	subi r18,lo8(-(2))
	sbci r19,hi8(-(2))
	sbci r20,hlo8(-(2))
	sbci r21,hhi8(-(2))
	movw r30,r12
	st Z,r18
	std Z+1,r19
	std Z+2,r20
	std Z+3,r21
	ldi r24,lo8(-2)
	ldi r25,hi8(-2)
	add r10,r24
	adc r11,r25
	cp r10,__zero_reg__
	cpc r11,__zero_reg__
	brne .L39
	ldi r24,lo8(5)
/* #APP */
	movw r30, r6
	sts 91, r8
	sts 104, r24
	spm
	
/* #NOAPP */
	ldi r30,lo8(104)
	ldi r31,hi8(104)
.L41:
	ld r24,Z
	sbrc r24,0
	rjmp .L41
	ldi r24,lo8(17)
/* #APP */
	sts 104, r24
	spm
	
/* #NOAPP */
	movw r30,r12
	ld r24,Z
	ldd r25,Z+1
	ldd r26,Z+2
	ldd r27,Z+3
	asr r27
	ror r26
	ror r25
	ror r24
	st Z,r24
	std Z+1,r25
	std Z+2,r26
	std Z+3,r27
	ldi r24,lo8(13)
	ldi r25,hi8(13)
	rjmp .L43
.L31:
	ldi r24,lo8(13)
	ldi r25,hi8(13)
	rjmp .L43
.L36:
	ldi r24,lo8(63)
	ldi r25,hi8(63)
.L43:
/* epilogue: frame size=128 */
	subi r28,lo8(-128)
	sbci r29,hi8(-128)
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r29
	pop r28
	pop r17
	pop r16
	pop r15
	pop r14
	pop r13
	pop r12
	pop r11
	pop r10
	pop r9
	pop r8
	pop r7
	pop r6
	pop r5
	pop r4
	ret
/* epilogue end (size=24) */
/* function BlockLoad size 255 (206) */
	.size	BlockLoad, .-BlockLoad
.global	BlockRead
	.type	BlockRead, @function
BlockRead:
/* prologue: frame size=0 */
	push r16
	push r17
	push r28
	push r29
/* prologue end (size=4) */
	movw r16,r24
	movw r28,r20
	cpi r22,lo8(69)
	brne .L57
.L64:
	ld r24,Y
	ldd r25,Y+1
	ldd r26,Y+2
	ldd r27,Y+3
	out 62-0x20,r24
	ld r24,Y
	ldd r25,Y+1
	ldd r26,Y+2
	ldd r27,Y+3
	mov r24,r25
	mov r25,r26
	mov r26,r27
	clr r27
	sbrc r26,7
	dec r27
	out 63-0x20,r24
	ld r24,Y
	ldd r25,Y+1
	ldd r26,Y+2
	ldd r27,Y+3
	adiw r24,1
	adc r26,__zero_reg__
	adc r27,__zero_reg__
	st Y,r24
	std Y+1,r25
	std Y+2,r26
	std Y+3,r27
	sbi 60-0x20,0
	in r24,61-0x20
	call sendchar
	subi r16,lo8(-(-1))
	sbci r17,hi8(-(-1))
	breq .L63
	rjmp .L64
.L57:
	cpi r22,lo8(70)
	brne .L63
	ld r24,Y
	ldd r25,Y+1
	ldd r26,Y+2
	ldd r27,Y+3
	lsl r24
	rol r25
	rol r26
	rol r27
	st Y,r24
	std Y+1,r25
	std Y+2,r26
	std Y+3,r27
.L61:
	ld r24,Y
	ldd r25,Y+1
	ldd r26,Y+2
	ldd r27,Y+3
	movw r30,r24
/* #APP */
	lpm r24, Z
	
/* #NOAPP */
	call sendchar
	ld r24,Y
	ldd r25,Y+1
	ldd r26,Y+2
	ldd r27,Y+3
	movw r30,r24
	adiw r30,1
/* #APP */
	lpm r24, Z
	
/* #NOAPP */
	call sendchar
	ld r24,Y
	ldd r25,Y+1
	ldd r26,Y+2
	ldd r27,Y+3
	adiw r24,2
	adc r26,__zero_reg__
	adc r27,__zero_reg__
	st Y,r24
	std Y+1,r25
	std Y+2,r26
	std Y+3,r27
	subi r16,lo8(-(-2))
	sbci r17,hi8(-(-2))
	brne .L61
	asr r27
	ror r26
	ror r25
	ror r24
	st Y,r24
	std Y+1,r25
	std Y+2,r26
	std Y+3,r27
.L63:
/* epilogue: frame size=0 */
	pop r29
	pop r28
	pop r17
	pop r16
	ret
/* epilogue end (size=5) */
/* function BlockRead size 111 (102) */
	.size	BlockRead, .-BlockRead
.global	main
	.type	main, @function
main:
/* prologue: frame size=4 */
	push r11
	push r12
	push r13
	push r14
	push r15
	push r16
	push r17
	push r28
	push r29
	in r28,__SP_L__
	in r29,__SP_H__
	sbiw r28,4
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
/* prologue end (size=17) */
/* #APP */
	cli
/* #NOAPP */
	call initbootuart
	clr r12
	clr r13
	movw r14,r12
	ldi r16,lo8(0)
	clr r11
.L128:
	sbis 43-0x20,7
	rjmp .L70
	in r24,44-0x20
	inc r11
	ldi r25,lo8(15)
	cp r25,r11
	brsh .L72
.L122:
	rjmp .L122
.L72:
	cpi r16,lo8(3)
	brsh .L78
	cpi r16,lo8(1)
	brsh .L75
	rjmp .L123
.L78:
	cpi r16,lo8(3)
	breq .L76
	cpi r16,lo8(4)
	brne .L70
	rjmp .L77
.L123:
	cpi r24,lo8(84)
	brne .L70
	ldi r16,lo8(1)
	rjmp .L70
.L75:
	cpi r24,lo8(111)
	brne .L80
	subi r16,lo8(-(1))
	rjmp .L70
.L76:
	cpi r24,lo8(98)
	brne .L80
	ldi r16,lo8(4)
	rjmp .L70
.L77:
	cpi r24,lo8(33)
	brne .+2
	rjmp .L83
.L80:
	ldi r16,lo8(0)
.L70:
	sec
	adc r12,__zero_reg__
	adc r13,__zero_reg__
	adc r14,__zero_reg__
	adc r15,__zero_reg__
	ldi r24,lo8(8192)
	cp r12,r24
	ldi r24,hi8(8192)
	cpc r13,r24
	ldi r24,hlo8(8192)
	cpc r14,r24
	ldi r24,hhi8(8192)
	cpc r15,r24
	brne .L84
	in r17,84-0x20
	ldi r24,lo8(87)
	call sendchar
	ldi r24,lo8(61)
	call sendchar
	mov r24,r17
	swap r24
	andi r24,0x0f
	call hex
	call sendchar
	mov r24,r17
	andi r24,lo8(15)
	call hex
	call sendchar
	ldi r24,lo8(32)
	call sendchar
	out 84-0x20,__zero_reg__
	ldi r24,lo8(66)
	call sendchar
	ldi r24,lo8(111)
	call sendchar
	ldi r24,lo8(111)
	call sendchar
	ldi r24,lo8(116)
	call sendchar
	ldi r24,lo8(63)
	call sendchar
	rjmp .L128
.L84:
	ldi r25,lo8(262144)
	cp r12,r25
	ldi r25,hi8(262144)
	cpc r13,r25
	ldi r25,hlo8(262144)
	cpc r14,r25
	ldi r25,hhi8(262144)
	cpc r15,r25
	breq .+2
	rjmp .L128
	ldi r24,lo8(13)
	call sendchar
	ldi r24,lo8(10)
	call sendchar
	ldi r30,lo8(0)
	ldi r31,hi8(0)
	icall
	rjmp .L128
.L83:
	call recchar
	movw r12,r28
	sec
	adc r12,__zero_reg__
	adc r13,__zero_reg__
	mov __tmp_reg__,r31
	ldi r31,lo8(9)
	mov r15,r31
	mov r31,__tmp_reg__
.L87:
	cpi r24,lo8(65)
	brne .L88
	call recword
	clr r26
	clr r27
	std Y+1,r24
	std Y+2,r25
	std Y+3,r26
	std Y+4,r27
	ldi r24,lo8(13)
	call sendchar
	rjmp .L90
.L88:
	cpi r24,lo8(101)
	brne .L91
	ldi r18,lo8(0)
	ldi r19,hi8(0)
	ldi r20,hlo8(0)
	ldi r21,hhi8(0)
	ldi r26,lo8(104)
	ldi r27,hi8(104)
	ldi r25,lo8(3)
.L129:
	ld r24,X
	sbrc r24,0
	rjmp .L129
/* #APP */
	movw r30, r18
	sts  91, r20
	sts 104, r25
	spm
	
/* #NOAPP */
	subi r18,lo8(-(128))
	sbci r19,hi8(-(128))
	sbci r20,hlo8(-(128))
	sbci r21,hhi8(-(128))
	cpi r18,lo8(129024)
	ldi r24,hi8(129024)
	cpc r19,r24
	ldi r24,hlo8(129024)
	cpc r20,r24
	ldi r24,hhi8(129024)
	cpc r21,r24
	brlt .L129
	std Y+1,r18
	std Y+2,r19
	std Y+3,r20
	std Y+4,r21
	ldi r24,lo8(13)
	call sendchar
	rjmp .L90
.L91:
	cpi r24,lo8(98)
	brne .L96
	ldi r24,lo8(89)
	call sendchar
	ldi r24,lo8(0)
	call sendchar
	ldi r24,lo8(-128)
	call sendchar
	rjmp .L90
.L96:
	cpi r24,lo8(66)
	brne .L98
	call recword
	movw r16,r24
	call recchar
	movw r20,r12
	mov r22,r24
	movw r24,r16
	call BlockLoad
	call sendchar
	rjmp .L90
.L98:
	cpi r24,lo8(103)
	brne .L100
	call recword
	movw r16,r24
	call recchar
	movw r20,r12
	mov r22,r24
	movw r24,r16
	call BlockRead
	rjmp .L90
.L100:
	cpi r24,lo8(83)
	brne .L102
	ldi r24,lo8(65)
	call sendchar
	ldi r24,lo8(86)
	call sendchar
	ldi r24,lo8(82)
	call sendchar
	ldi r24,lo8(66)
	call sendchar
	ldi r24,lo8(79)
	call sendchar
	ldi r24,lo8(79)
	call sendchar
	ldi r24,lo8(84)
	call sendchar
	rjmp .L90
.L102:
	cpi r24,lo8(115)
	brne .L104
	ldi r24,lo8(2)
	call sendchar
	ldi r24,lo8(-107)
	call sendchar
	ldi r24,lo8(30)
	call sendchar
	rjmp .L90
.L104:
	cpi r24,lo8(76)
	brne .L106
/* #APP */
	ldi r30, 0
	ldi r31, 0
	sts 104, r15
	lpm r24, Z
	
/* #NOAPP */
	call sendchar
/* #APP */
	ldi r30, 1
	ldi r31, 0
	sts 104, r15
	lpm r24, Z
	
/* #NOAPP */
	call sendchar
/* #APP */
	ldi r30, 2
	ldi r31, 0
	sts 104, r15
	lpm r24, Z
	
/* #NOAPP */
	call sendchar
/* #APP */
	ldi r30, 3
	ldi r31, 0
	sts 104, r15
	lpm r24, Z
	
/* #NOAPP */
	call sendchar
	rjmp .L90
.L106:
	cpi r24,lo8(113)
	breq .L119
	cpi r24,lo8(27)
	breq .L90
	ldi r24,lo8(63)
	call sendchar
.L90:
	call recchar
	rjmp .L87
.L119:
	lds r24,104
	sbrc r24,0
	rjmp .L119
	ldi r24,lo8(17)
/* #APP */
	sts 104, r24
	spm
	
/* #NOAPP */
	ldi r30,lo8(0)
	ldi r31,hi8(0)
	icall
	ldi r24,lo8(0)
	ldi r25,hi8(0)
/* epilogue: frame size=4 */
	adiw r28,4
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r29
	pop r28
	pop r17
	pop r16
	pop r15
	pop r14
	pop r13
	pop r12
	pop r11
	ret
/* epilogue end (size=16) */
/* function main size 369 (336) */
	.size	main, .-main
/* File "/home/tlb/libatmel/bootloader.c": code  779 = 0x030b ( 680), prologues  48, epilogues  51 */
