
build.SEGWELL2/bal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00003a64  00003af8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000574  00800104  00800104  00003afc  2**0
                  ALLOC
  3 .stab         000063cc  00000000  00000000  00003afc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003092  00000000  00000000  00009ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__ctors_end>
       4:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
       8:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
       c:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      10:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      14:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      18:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      1c:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      20:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      24:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      28:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      2c:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      30:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      34:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      38:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      3c:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      40:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      44:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      48:	0c 94 b6 19 	jmp	0x336c	; 0x336c <__vector_18>
      4c:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <__vector_19>
      50:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      54:	0c 94 1b 16 	jmp	0x2c36	; 0x2c36 <__vector_21>
      58:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      5c:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      60:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      64:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      68:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      6c:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      70:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      74:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      78:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      7c:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      80:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      84:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>
      88:	0c 94 ac 02 	jmp	0x558	; 0x558 <__bad_interrupt>

0000008c <__c.4462>:
      8c:	21 62 61 6c 20 32 2e 30 00                          !bal 2.0.

00000095 <__c.4460>:
      95:	21 62 61 6c 20 32 2e 30 00                          !bal 2.0.

0000009e <__c.4086>:
      9e:	21 62 61 6c 61 6e 63 65 5f 76 61 6c 69 64 61 74     !balance_validat
      ae:	65 20 66 61 69 6c 73 0a 00                          e fails..

000000b7 <__c.3955>:
      b7:	21 72 66 00                                         !rf.

000000bb <__c.3953>:
      bb:	21 72 72 00                                         !rr.

000000bf <__c.3951>:
      bf:	21 6c 66 00                                         !lf.

000000c3 <__c.3949>:
      c3:	21 6c 72 00                                         !lr.

000000c7 <adcpattern>:
      c7:	00 01 02 04 05 00 01 02 04 06 09 00 01 02 04 05     ................
      d7:	0a 00 01 02 04 0b 0d 00 01 02 04 05 0e 00 01 02     ................
      e7:	04 0c 07 00 01 02 04 05 08                          .........

000000f0 <adc_config>:
      f0:	40 00 41 00 42 00 43 00 45 00 44 00 46 00 47 00     @.A.B.C.E.D.F.G.
     100:	47 01 47 03 47 02 47 04 47 05 47 06 47 07           G.G.G.G.G.G.G.

0000010e <crc32_table>:
     10e:	00 00 00 00 b7 1d c1 04 6e 3b 82 09 d9 26 43 0d     ........n;...&C.
     11e:	dc 76 04 13 6b 6b c5 17 b2 4d 86 1a 05 50 47 1e     .v..kk...M...PG.
     12e:	b8 ed 08 26 0f f0 c9 22 d6 d6 8a 2f 61 cb 4b 2b     ...&...".../a.K+
     13e:	64 9b 0c 35 d3 86 cd 31 0a a0 8e 3c bd bd 4f 38     d..5...1...<..O8
     14e:	70 db 11 4c c7 c6 d0 48 1e e0 93 45 a9 fd 52 41     p..L...H...E..RA
     15e:	ac ad 15 5f 1b b0 d4 5b c2 96 97 56 75 8b 56 52     ..._...[...Vu.VR
     16e:	c8 36 19 6a 7f 2b d8 6e a6 0d 9b 63 11 10 5a 67     .6.j.+.n...c..Zg
     17e:	14 40 1d 79 a3 5d dc 7d 7a 7b 9f 70 cd 66 5e 74     .@.y.].}z{.p.f^t
     18e:	e0 b6 23 98 57 ab e2 9c 8e 8d a1 91 39 90 60 95     ..#.W.......9.`.
     19e:	3c c0 27 8b 8b dd e6 8f 52 fb a5 82 e5 e6 64 86     <.'.....R.....d.
     1ae:	58 5b 2b be ef 46 ea ba 36 60 a9 b7 81 7d 68 b3     X[+..F..6`...}h.
     1be:	84 2d 2f ad 33 30 ee a9 ea 16 ad a4 5d 0b 6c a0     .-/.30......].l.
     1ce:	90 6d 32 d4 27 70 f3 d0 fe 56 b0 dd 49 4b 71 d9     .m2.'p...V..IKq.
     1de:	4c 1b 36 c7 fb 06 f7 c3 22 20 b4 ce 95 3d 75 ca     L.6....." ...=u.
     1ee:	28 80 3a f2 9f 9d fb f6 46 bb b8 fb f1 a6 79 ff     (.:.....F.....y.
     1fe:	f4 f6 3e e1 43 eb ff e5 9a cd bc e8 2d d0 7d ec     ..>.C.......-.}.
     20e:	77 70 86 34 c0 6d 47 30 19 4b 04 3d ae 56 c5 39     wp.4.mG0.K.=.V.9
     21e:	ab 06 82 27 1c 1b 43 23 c5 3d 00 2e 72 20 c1 2a     ...'..C#.=..r .*
     22e:	cf 9d 8e 12 78 80 4f 16 a1 a6 0c 1b 16 bb cd 1f     ....x.O.........
     23e:	13 eb 8a 01 a4 f6 4b 05 7d d0 08 08 ca cd c9 0c     ......K.}.......
     24e:	07 ab 97 78 b0 b6 56 7c 69 90 15 71 de 8d d4 75     ...x..V|i..q...u
     25e:	db dd 93 6b 6c c0 52 6f b5 e6 11 62 02 fb d0 66     ...kl.Ro...b...f
     26e:	bf 46 9f 5e 08 5b 5e 5a d1 7d 1d 57 66 60 dc 53     .F.^.[^Z.}.Wf`.S
     27e:	63 30 9b 4d d4 2d 5a 49 0d 0b 19 44 ba 16 d8 40     c0.M.-ZI...D...@
     28e:	97 c6 a5 ac 20 db 64 a8 f9 fd 27 a5 4e e0 e6 a1     .... .d...'.N...
     29e:	4b b0 a1 bf fc ad 60 bb 25 8b 23 b6 92 96 e2 b2     K.....`.%.#.....
     2ae:	2f 2b ad 8a 98 36 6c 8e 41 10 2f 83 f6 0d ee 87     /+...6l.A./.....
     2be:	f3 5d a9 99 44 40 68 9d 9d 66 2b 90 2a 7b ea 94     .]..D@h..f+.*{..
     2ce:	e7 1d b4 e0 50 00 75 e4 89 26 36 e9 3e 3b f7 ed     ....P.u..&6.>;..
     2de:	3b 6b b0 f3 8c 76 71 f7 55 50 32 fa e2 4d f3 fe     ;k...vq.UP2..M..
     2ee:	5f f0 bc c6 e8 ed 7d c2 31 cb 3e cf 86 d6 ff cb     _.....}.1.>.....
     2fe:	83 86 b8 d5 34 9b 79 d1 ed bd 3a dc 5a a0 fb d8     ....4.y...:.Z...
     30e:	ee e0 0c 69 59 fd cd 6d 80 db 8e 60 37 c6 4f 64     ...iY..m...`7.Od
     31e:	32 96 08 7a 85 8b c9 7e 5c ad 8a 73 eb b0 4b 77     2..z...~\..s..Kw
     32e:	56 0d 04 4f e1 10 c5 4b 38 36 86 46 8f 2b 47 42     V..O...K86.F.+GB
     33e:	8a 7b 00 5c 3d 66 c1 58 e4 40 82 55 53 5d 43 51     .{.\=f.X.@.US]CQ
     34e:	9e 3b 1d 25 29 26 dc 21 f0 00 9f 2c 47 1d 5e 28     .;.%)&.!...,G.^(
     35e:	42 4d 19 36 f5 50 d8 32 2c 76 9b 3f 9b 6b 5a 3b     BM.6.P.2,v.?.kZ;
     36e:	26 d6 15 03 91 cb d4 07 48 ed 97 0a ff f0 56 0e     &.......H.....V.
     37e:	fa a0 11 10 4d bd d0 14 94 9b 93 19 23 86 52 1d     ....M.......#.R.
     38e:	0e 56 2f f1 b9 4b ee f5 60 6d ad f8 d7 70 6c fc     .V/..K..`m...pl.
     39e:	d2 20 2b e2 65 3d ea e6 bc 1b a9 eb 0b 06 68 ef     . +.e=........h.
     3ae:	b6 bb 27 d7 01 a6 e6 d3 d8 80 a5 de 6f 9d 64 da     ..'.........o.d.
     3be:	6a cd 23 c4 dd d0 e2 c0 04 f6 a1 cd b3 eb 60 c9     j.#...........`.
     3ce:	7e 8d 3e bd c9 90 ff b9 10 b6 bc b4 a7 ab 7d b0     ~.>...........}.
     3de:	a2 fb 3a ae 15 e6 fb aa cc c0 b8 a7 7b dd 79 a3     ..:.........{.y.
     3ee:	c6 60 36 9b 71 7d f7 9f a8 5b b4 92 1f 46 75 96     .`6.q}...[...Fu.
     3fe:	1a 16 32 88 ad 0b f3 8c 74 2d b0 81 c3 30 71 85     ..2.....t-...0q.
     40e:	99 90 8a 5d 2e 8d 4b 59 f7 ab 08 54 40 b6 c9 50     ...]..KY...T@..P
     41e:	45 e6 8e 4e f2 fb 4f 4a 2b dd 0c 47 9c c0 cd 43     E..N..OJ+..G...C
     42e:	21 7d 82 7b 96 60 43 7f 4f 46 00 72 f8 5b c1 76     !}.{.`C.OF.r.[.v
     43e:	fd 0b 86 68 4a 16 47 6c 93 30 04 61 24 2d c5 65     ...hJ.Gl.0.a$-.e
     44e:	e9 4b 9b 11 5e 56 5a 15 87 70 19 18 30 6d d8 1c     .K..^VZ..p..0m..
     45e:	35 3d 9f 02 82 20 5e 06 5b 06 1d 0b ec 1b dc 0f     5=... ^.[.......
     46e:	51 a6 93 37 e6 bb 52 33 3f 9d 11 3e 88 80 d0 3a     Q..7..R3?..>...:
     47e:	8d d0 97 24 3a cd 56 20 e3 eb 15 2d 54 f6 d4 29     ...$:.V ...-T..)
     48e:	79 26 a9 c5 ce 3b 68 c1 17 1d 2b cc a0 00 ea c8     y&...;h...+.....
     49e:	a5 50 ad d6 12 4d 6c d2 cb 6b 2f df 7c 76 ee db     .P...Ml..k/.|v..
     4ae:	c1 cb a1 e3 76 d6 60 e7 af f0 23 ea 18 ed e2 ee     ....v.`...#.....
     4be:	1d bd a5 f0 aa a0 64 f4 73 86 27 f9 c4 9b e6 fd     ......d.s.'.....
     4ce:	09 fd b8 89 be e0 79 8d 67 c6 3a 80 d0 db fb 84     ......y.g.:.....
     4de:	d5 8b bc 9a 62 96 7d 9e bb b0 3e 93 0c ad ff 97     ....b.}...>.....
     4ee:	b1 10 b0 af 06 0d 71 ab df 2b 32 a6 68 36 f3 a2     ......q..+2.h6..
     4fe:	6d 66 b4 bc da 7b 75 b8 03 5d 36 b5 b4 40 f7 b1     mf...{u..]6..@..

0000050e <hextable>:
     50e:	30 31 32 33 34 35 36 37 38 39 61 62 63 64 65 66     0123456789abcdef

0000051e <__ctors_end>:
     51e:	11 24       	eor	r1, r1
     520:	1f be       	out	0x3f, r1	; 63
     522:	cf ef       	ldi	r28, 0xFF	; 255
     524:	d0 e1       	ldi	r29, 0x10	; 16
     526:	de bf       	out	0x3e, r29	; 62
     528:	cd bf       	out	0x3d, r28	; 61

0000052a <__do_copy_data>:
     52a:	11 e0       	ldi	r17, 0x01	; 1
     52c:	a0 e0       	ldi	r26, 0x00	; 0
     52e:	b1 e0       	ldi	r27, 0x01	; 1
     530:	e4 e6       	ldi	r30, 0x64	; 100
     532:	fa e3       	ldi	r31, 0x3A	; 58
     534:	00 e0       	ldi	r16, 0x00	; 0
     536:	0b bf       	out	0x3b, r16	; 59
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x14>
     53a:	07 90       	elpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	a4 30       	cpi	r26, 0x04	; 4
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0x10>

00000544 <__do_clear_bss>:
     544:	16 e0       	ldi	r17, 0x06	; 6
     546:	a4 e0       	ldi	r26, 0x04	; 4
     548:	b1 e0       	ldi	r27, 0x01	; 1
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	a8 37       	cpi	r26, 0x78	; 120
     550:	b1 07       	cpc	r27, r17
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>
     554:	0c 94 30 15 	jmp	0x2a60	; 0x2a60 <main>

00000558 <__bad_interrupt>:
     558:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

0000055c <io_init>:
DEFBITGROUP(extramux, E, 5, 3);
DEFBIT(beeper, E, 2);        // The beeper on the console

DEFBIT(l_pwm_oc, B, 6);      // Output compare signals, which we use in PWM mode.
DEFBIT(r_pwm_oc, B, 5);
     55c:	c5 98       	cbi	0x18, 5	; 24
     55e:	ae 9a       	sbi	0x15, 6	; 21
     560:	ab 98       	cbi	0x15, 3	; 21
     562:	aa 98       	cbi	0x15, 2	; 21
     564:	bd 9a       	sbi	0x17, 5	; 23
     566:	a6 9a       	sbi	0x14, 6	; 20
     568:	a3 9a       	sbi	0x14, 3	; 20
     56a:	a2 9a       	sbi	0x14, 2	; 20
     56c:	c6 98       	cbi	0x18, 6	; 24
     56e:	ad 9a       	sbi	0x15, 5	; 21
     570:	a9 98       	cbi	0x15, 1	; 21
     572:	a8 98       	cbi	0x15, 0	; 21
     574:	be 9a       	sbi	0x17, 6	; 23
     576:	a5 9a       	sbi	0x14, 5	; 20
     578:	a1 9a       	sbi	0x14, 1	; 20
     57a:	a0 9a       	sbi	0x14, 0	; 20
     57c:	ac 98       	cbi	0x15, 4	; 21
     57e:	a4 9a       	sbi	0x14, 4	; 20
     580:	97 98       	cbi	0x12, 7	; 18
     582:	96 98       	cbi	0x12, 6	; 18
     584:	8f 9a       	sbi	0x11, 7	; 17
     586:	8e 9a       	sbi	0x11, 6	; 17
     588:	1a 9a       	sbi	0x03, 2	; 3
     58a:	12 9a       	sbi	0x02, 2	; 2
     58c:	83 b1       	in	r24, 0x03	; 3
     58e:	8f 71       	andi	r24, 0x1F	; 31
     590:	83 b9       	out	0x03, r24	; 3
     592:	82 b1       	in	r24, 0x02	; 2
     594:	80 6e       	ori	r24, 0xE0	; 224
     596:	82 b9       	out	0x02, r24	; 2
     598:	08 95       	ret

0000059a <lpf_update>:
     59a:	6f 92       	push	r6
     59c:	7f 92       	push	r7
     59e:	8f 92       	push	r8
     5a0:	9f 92       	push	r9
     5a2:	af 92       	push	r10
     5a4:	bf 92       	push	r11
     5a6:	cf 92       	push	r12
     5a8:	df 92       	push	r13
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	ec 01       	movw	r28, r24
     5b8:	d9 01       	movw	r26, r18
     5ba:	c8 01       	movw	r24, r16
     5bc:	56 01       	movw	r10, r12
     5be:	67 01       	movw	r12, r14
     5c0:	9a 01       	movw	r18, r20
     5c2:	ab 01       	movw	r20, r22
     5c4:	bc 01       	movw	r22, r24
     5c6:	cd 01       	movw	r24, r26
     5c8:	0e 94 ef 1b 	call	0x37de	; 0x37de <__divsf3>
     5cc:	7b 01       	movw	r14, r22
     5ce:	8c 01       	movw	r16, r24
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	40 e8       	ldi	r20, 0x80	; 128
     5d6:	5f e3       	ldi	r21, 0x3F	; 63
     5d8:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
     5dc:	18 16       	cp	r1, r24
     5de:	ac f4       	brge	.+42     	; 0x60a <lpf_update+0x70>
     5e0:	0f 2e       	mov	r0, r31
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	ef 2e       	mov	r14, r31
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	ff 2e       	mov	r15, r31
     5ea:	f0 e8       	ldi	r31, 0x80	; 128
     5ec:	0f 2f       	mov	r16, r31
     5ee:	ff e3       	ldi	r31, 0x3F	; 63
     5f0:	1f 2f       	mov	r17, r31
     5f2:	f0 2d       	mov	r31, r0
     5f4:	0f 2e       	mov	r0, r31
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	6f 2e       	mov	r6, r31
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	7f 2e       	mov	r7, r31
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	8f 2e       	mov	r8, r31
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	9f 2e       	mov	r9, r31
     606:	f0 2d       	mov	r31, r0
     608:	0a c0       	rjmp	.+20     	; 0x61e <lpf_update+0x84>
     60a:	a8 01       	movw	r20, r16
     60c:	97 01       	movw	r18, r14
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	80 e8       	ldi	r24, 0x80	; 128
     614:	9f e3       	ldi	r25, 0x3F	; 63
     616:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
     61a:	3b 01       	movw	r6, r22
     61c:	4c 01       	movw	r8, r24
     61e:	a6 01       	movw	r20, r12
     620:	95 01       	movw	r18, r10
     622:	c8 01       	movw	r24, r16
     624:	b7 01       	movw	r22, r14
     626:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
     62a:	7b 01       	movw	r14, r22
     62c:	8c 01       	movw	r16, r24
     62e:	28 81       	ld	r18, Y
     630:	39 81       	ldd	r19, Y+1	; 0x01
     632:	4a 81       	ldd	r20, Y+2	; 0x02
     634:	5b 81       	ldd	r21, Y+3	; 0x03
     636:	c4 01       	movw	r24, r8
     638:	b3 01       	movw	r22, r6
     63a:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
     63e:	9b 01       	movw	r18, r22
     640:	ac 01       	movw	r20, r24
     642:	c8 01       	movw	r24, r16
     644:	b7 01       	movw	r22, r14
     646:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
     64a:	68 83       	st	Y, r22
     64c:	79 83       	std	Y+1, r23	; 0x01
     64e:	8a 83       	std	Y+2, r24	; 0x02
     650:	9b 83       	std	Y+3, r25	; 0x03
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	ff 90       	pop	r15
     65c:	ef 90       	pop	r14
     65e:	df 90       	pop	r13
     660:	cf 90       	pop	r12
     662:	bf 90       	pop	r11
     664:	af 90       	pop	r10
     666:	9f 90       	pop	r9
     668:	8f 90       	pop	r8
     66a:	7f 90       	pop	r7
     66c:	6f 90       	pop	r6
     66e:	08 95       	ret

00000670 <my_fabs>:
     670:	ef 92       	push	r14
     672:	ff 92       	push	r15
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	7b 01       	movw	r14, r22
     67a:	8c 01       	movw	r16, r24
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e0       	ldi	r20, 0x00	; 0
     682:	50 e0       	ldi	r21, 0x00	; 0
     684:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
     688:	87 ff       	sbrs	r24, 7
     68a:	04 c0       	rjmp	.+8      	; 0x694 <my_fabs+0x24>
     68c:	17 fb       	bst	r17, 7
     68e:	10 95       	com	r17
     690:	17 f9       	bld	r17, 7
     692:	10 95       	com	r17
     694:	c8 01       	movw	r24, r16
     696:	b7 01       	movw	r22, r14
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	ff 90       	pop	r15
     69e:	ef 90       	pop	r14
     6a0:	08 95       	ret

000006a2 <fmax>:
     6a2:	af 92       	push	r10
     6a4:	bf 92       	push	r11
     6a6:	cf 92       	push	r12
     6a8:	df 92       	push	r13
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	7b 01       	movw	r14, r22
     6b4:	8c 01       	movw	r16, r24
     6b6:	59 01       	movw	r10, r18
     6b8:	6a 01       	movw	r12, r20
     6ba:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
     6be:	87 ff       	sbrs	r24, 7
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <fmax+0x24>
     6c2:	86 01       	movw	r16, r12
     6c4:	75 01       	movw	r14, r10

#if defined(__BAL3__)
  // NOTE: this was wrong in the board submitted as scooter3
  // I had separate SEL lines but a single /OE line
     6c6:	c8 01       	movw	r24, r16
     6c8:	b7 01       	movw	r22, r14
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	ff 90       	pop	r15
     6d0:	ef 90       	pop	r14
     6d2:	df 90       	pop	r13
     6d4:	cf 90       	pop	r12
     6d6:	bf 90       	pop	r11
     6d8:	af 90       	pop	r10
     6da:	08 95       	ret

000006dc <fmin>:
  DEFBITGROUP(enc_data, A, 0, 8);
  DEFBIT(enc_oe1_not, B, 7);
  DEFBIT(enc_oe2_not, B, 0);
     6dc:	af 92       	push	r10
     6de:	bf 92       	push	r11
     6e0:	cf 92       	push	r12
     6e2:	df 92       	push	r13
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	7b 01       	movw	r14, r22
     6ee:	8c 01       	movw	r16, r24
     6f0:	59 01       	movw	r10, r18
     6f2:	6a 01       	movw	r12, r20
  DEFBIT(enc_rst_not, B, 2);
     6f4:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
     6f8:	18 16       	cp	r1, r24
     6fa:	14 f4       	brge	.+4      	; 0x700 <fmin+0x24>
     6fc:	86 01       	movw	r16, r12
     6fe:	75 01       	movw	r14, r10
  DEFBIT(enc_sel1, B, 3);
  DEFBIT(enc_sel2, B, 4);
#endif

#if defined(__BAL2__)
     700:	c8 01       	movw	r24, r16
     702:	b7 01       	movw	r22, r14
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	df 90       	pop	r13
     70e:	cf 90       	pop	r12
     710:	bf 90       	pop	r11
     712:	af 90       	pop	r10
     714:	08 95       	ret

00000716 <flim>:
#define R_MOTOR_POLARITY -
#define L_MOTOR_POLARITY +
#else
     716:	6f 92       	push	r6
     718:	7f 92       	push	r7
     71a:	8f 92       	push	r8
     71c:	9f 92       	push	r9
     71e:	af 92       	push	r10
     720:	bf 92       	push	r11
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	5b 01       	movw	r10, r22
     730:	6c 01       	movw	r12, r24
     732:	39 01       	movw	r6, r18
     734:	4a 01       	movw	r8, r20
#define R_MOTOR_POLARITY +
     736:	a8 01       	movw	r20, r16
     738:	97 01       	movw	r18, r14
     73a:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
     73e:	18 16       	cp	r1, r24
     740:	6c f0       	brlt	.+26     	; 0x75c <flim+0x46>
#define L_MOTOR_POLARITY +
     742:	a4 01       	movw	r20, r8
     744:	93 01       	movw	r18, r6
     746:	c6 01       	movw	r24, r12
     748:	b5 01       	movw	r22, r10
     74a:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
     74e:	88 23       	and	r24, r24
     750:	1c f4       	brge	.+6      	; 0x758 <flim+0x42>
     752:	84 01       	movw	r16, r8
     754:	73 01       	movw	r14, r6
     756:	02 c0       	rjmp	.+4      	; 0x75c <flim+0x46>
     758:	86 01       	movw	r16, r12
     75a:	75 01       	movw	r14, r10
#endif

     75c:	c8 01       	movw	r24, r16
     75e:	b7 01       	movw	r22, r14
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	cf 90       	pop	r12
     76c:	bf 90       	pop	r11
     76e:	af 90       	pop	r10
     770:	9f 90       	pop	r9
     772:	8f 90       	pop	r8
     774:	7f 90       	pop	r7
     776:	6f 90       	pop	r6
     778:	08 95       	ret

0000077a <gyro_sample_rate>:
// Set the PWM values between 0 and OCR1_MAX
static inline void set_l_pwm(uint16_t x) { OCR1B = x; }
static inline void set_r_pwm(uint16_t x) { OCR1A = x; }

#endif
     77a:	8f 92       	push	r8
     77c:	9f 92       	push	r9
     77e:	af 92       	push	r10
     780:	bf 92       	push	r11
     782:	cf 92       	push	r12
     784:	df 92       	push	r13
     786:	ef 92       	push	r14
     788:	ff 92       	push	r15
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	ec 01       	movw	r28, r24
     794:	6a 01       	movw	r12, r20
     796:	7b 01       	movw	r14, r22
     798:	48 01       	movw	r8, r16
     79a:	59 01       	movw	r10, r18
     79c:	88 89       	ldd	r24, Y+16	; 0x10
     79e:	88 23       	and	r24, r24
     7a0:	31 f4       	brne	.+12     	; 0x7ae <gyro_sample_rate+0x34>
     7a2:	4c 83       	std	Y+4, r20	; 0x04
     7a4:	5d 83       	std	Y+5, r21	; 0x05
     7a6:	6e 83       	std	Y+6, r22	; 0x06
     7a8:	7f 83       	std	Y+7, r23	; 0x07
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	88 8b       	std	Y+16, r24	; 0x10
     7ae:	2c 81       	ldd	r18, Y+4	; 0x04
     7b0:	3d 81       	ldd	r19, Y+5	; 0x05
     7b2:	4e 81       	ldd	r20, Y+6	; 0x06
     7b4:	5f 81       	ldd	r21, Y+7	; 0x07
     7b6:	c7 01       	movw	r24, r14
     7b8:	b6 01       	movw	r22, r12
     7ba:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
     7be:	7b 01       	movw	r14, r22
     7c0:	8c 01       	movw	r16, r24
     7c2:	68 87       	std	Y+8, r22	; 0x08
     7c4:	79 87       	std	Y+9, r23	; 0x09
     7c6:	8a 87       	std	Y+10, r24	; 0x0a
     7c8:	9b 87       	std	Y+11, r25	; 0x0b
     7ca:	a5 01       	movw	r20, r10
     7cc:	94 01       	movw	r18, r8
     7ce:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
     7d2:	9b 01       	movw	r18, r22
     7d4:	ac 01       	movw	r20, r24
     7d6:	68 81       	ld	r22, Y
     7d8:	79 81       	ldd	r23, Y+1	; 0x01
     7da:	8a 81       	ldd	r24, Y+2	; 0x02
     7dc:	9b 81       	ldd	r25, Y+3	; 0x03
     7de:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
     7e2:	68 83       	st	Y, r22
     7e4:	79 83       	std	Y+1, r23	; 0x01
     7e6:	8a 83       	std	Y+2, r24	; 0x02
     7e8:	9b 83       	std	Y+3, r25	; 0x03
     7ea:	2a e9       	ldi	r18, 0x9A	; 154
     7ec:	39 e9       	ldi	r19, 0x99	; 153
     7ee:	49 e9       	ldi	r20, 0x99	; 153
     7f0:	5e e3       	ldi	r21, 0x3E	; 62
     7f2:	c8 01       	movw	r24, r16
     7f4:	b7 01       	movw	r22, r14
     7f6:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
     7fa:	9b 01       	movw	r18, r22
     7fc:	ac 01       	movw	r20, r24
     7fe:	c5 01       	movw	r24, r10
     800:	b4 01       	movw	r22, r8
     802:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
     806:	9b 01       	movw	r18, r22
     808:	ac 01       	movw	r20, r24
     80a:	6c 81       	ldd	r22, Y+4	; 0x04
     80c:	7d 81       	ldd	r23, Y+5	; 0x05
     80e:	8e 81       	ldd	r24, Y+6	; 0x06
     810:	9f 81       	ldd	r25, Y+7	; 0x07
     812:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
     816:	6c 83       	std	Y+4, r22	; 0x04
     818:	7d 83       	std	Y+5, r23	; 0x05
     81a:	8e 83       	std	Y+6, r24	; 0x06
     81c:	9f 83       	std	Y+7, r25	; 0x07
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	df 90       	pop	r13
     82c:	cf 90       	pop	r12
     82e:	bf 90       	pop	r11
     830:	af 90       	pop	r10
     832:	9f 90       	pop	r9
     834:	8f 90       	pop	r8
     836:	08 95       	ret

00000838 <gyro_sample_angle>:
     838:	6f 92       	push	r6
     83a:	7f 92       	push	r7
     83c:	8f 92       	push	r8
     83e:	9f 92       	push	r9
     840:	af 92       	push	r10
     842:	bf 92       	push	r11
     844:	cf 92       	push	r12
     846:	df 92       	push	r13
     848:	ef 92       	push	r14
     84a:	ff 92       	push	r15
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	ec 01       	movw	r28, r24
     856:	3a 01       	movw	r6, r20
     858:	4b 01       	movw	r8, r22
     85a:	78 01       	movw	r14, r16
     85c:	89 01       	movw	r16, r18
     85e:	89 89       	ldd	r24, Y+17	; 0x11
     860:	88 23       	and	r24, r24
     862:	31 f4       	brne	.+12     	; 0x870 <gyro_sample_angle+0x38>
     864:	48 83       	st	Y, r20
     866:	59 83       	std	Y+1, r21	; 0x01
     868:	6a 83       	std	Y+2, r22	; 0x02
     86a:	7b 83       	std	Y+3, r23	; 0x03
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	89 8b       	std	Y+17, r24	; 0x11
     870:	a8 80       	ld	r10, Y
     872:	b9 80       	ldd	r11, Y+1	; 0x01
     874:	ca 80       	ldd	r12, Y+2	; 0x02
     876:	db 80       	ldd	r13, Y+3	; 0x03
     878:	a6 01       	movw	r20, r12
     87a:	95 01       	movw	r18, r10
     87c:	c4 01       	movw	r24, r8
     87e:	b3 01       	movw	r22, r6
     880:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
     884:	a8 01       	movw	r20, r16
     886:	97 01       	movw	r18, r14
     888:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
     88c:	7b 01       	movw	r14, r22
     88e:	8c 01       	movw	r16, r24
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	40 e0       	ldi	r20, 0x00	; 0
     896:	50 e4       	ldi	r21, 0x40	; 64
     898:	6c 85       	ldd	r22, Y+12	; 0x0c
     89a:	7d 85       	ldd	r23, Y+13	; 0x0d
     89c:	8e 85       	ldd	r24, Y+14	; 0x0e
     89e:	9f 85       	ldd	r25, Y+15	; 0x0f
     8a0:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
     8a4:	9b 01       	movw	r18, r22
     8a6:	ac 01       	movw	r20, r24
     8a8:	c8 01       	movw	r24, r16
     8aa:	b7 01       	movw	r22, r14
     8ac:	0e 94 ef 1b 	call	0x37de	; 0x37de <__divsf3>
     8b0:	9b 01       	movw	r18, r22
     8b2:	ac 01       	movw	r20, r24
     8b4:	c6 01       	movw	r24, r12
     8b6:	b5 01       	movw	r22, r10
     8b8:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
     8bc:	68 83       	st	Y, r22
     8be:	79 83       	std	Y+1, r23	; 0x01
     8c0:	8a 83       	std	Y+2, r24	; 0x02
     8c2:	9b 83       	std	Y+3, r25	; 0x03
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	ff 90       	pop	r15
     8ce:	ef 90       	pop	r14
     8d0:	df 90       	pop	r13
     8d2:	cf 90       	pop	r12
     8d4:	bf 90       	pop	r11
     8d6:	af 90       	pop	r10
     8d8:	9f 90       	pop	r9
     8da:	8f 90       	pop	r8
     8dc:	7f 90       	pop	r7
     8de:	6f 90       	pop	r6
     8e0:	08 95       	ret

000008e2 <set_motor_idle>:
     8e2:	1b bc       	out	0x2b, r1	; 43
     8e4:	1a bc       	out	0x2a, r1	; 42
     8e6:	ae 9a       	sbi	0x15, 6	; 21
     8e8:	ab 98       	cbi	0x15, 3	; 21
     8ea:	aa 98       	cbi	0x15, 2	; 21
     8ec:	19 bc       	out	0x29, r1	; 41
     8ee:	18 bc       	out	0x28, r1	; 40
     8f0:	ad 9a       	sbi	0x15, 5	; 21
     8f2:	a9 98       	cbi	0x15, 1	; 21
     8f4:	a8 98       	cbi	0x15, 0	; 21
     8f6:	08 95       	ret

000008f8 <accum_88_32>:
     8f8:	fa 01       	movw	r30, r20
     8fa:	80 83       	st	Z, r24
     8fc:	91 81       	ldd	r25, Z+1	; 0x01
     8fe:	61 83       	std	Z+1, r22	; 0x01
     900:	86 2f       	mov	r24, r22
     902:	89 1b       	sub	r24, r25
     904:	87 fd       	sbrc	r24, 7
     906:	0d c0       	rjmp	.+26     	; 0x922 <accum_88_32+0x2a>
     908:	97 ff       	sbrs	r25, 7
     90a:	08 95       	ret
     90c:	67 fd       	sbrc	r22, 7
     90e:	fd cf       	rjmp	.-6      	; 0x90a <accum_88_32+0x12>
     910:	83 81       	ldd	r24, Z+3	; 0x03
     912:	8f 5f       	subi	r24, 0xFF	; 255
     914:	83 83       	std	Z+3, r24	; 0x03
     916:	88 23       	and	r24, r24
     918:	c1 f7       	brne	.-16     	; 0x90a <accum_88_32+0x12>
     91a:	84 81       	ldd	r24, Z+4	; 0x04
     91c:	8f 5f       	subi	r24, 0xFF	; 255
     91e:	84 83       	std	Z+4, r24	; 0x04
     920:	08 95       	ret
     922:	97 fd       	sbrc	r25, 7
     924:	f2 cf       	rjmp	.-28     	; 0x90a <accum_88_32+0x12>
     926:	67 ff       	sbrs	r22, 7
     928:	f0 cf       	rjmp	.-32     	; 0x90a <accum_88_32+0x12>
     92a:	83 81       	ldd	r24, Z+3	; 0x03
     92c:	81 50       	subi	r24, 0x01	; 1
     92e:	83 83       	std	Z+3, r24	; 0x03
     930:	8f 3f       	cpi	r24, 0xFF	; 255
     932:	59 f7       	brne	.-42     	; 0x90a <accum_88_32+0x12>
     934:	84 81       	ldd	r24, Z+4	; 0x04
     936:	81 50       	subi	r24, 0x01	; 1
     938:	84 83       	std	Z+4, r24	; 0x04
     93a:	08 95       	ret

0000093c <update_hwadj>:
     93c:	ef 92       	push	r14
     93e:	ff 92       	push	r15
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	7b 01       	movw	r14, r22
     946:	8c 01       	movw	r16, r24
     948:	20 91 bb 05 	lds	r18, 0x05BB
     94c:	30 91 bc 05 	lds	r19, 0x05BC
     950:	40 91 bd 05 	lds	r20, 0x05BD
     954:	50 91 be 05 	lds	r21, 0x05BE
     958:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
     95c:	9b 01       	movw	r18, r22
     95e:	ac 01       	movw	r20, r24
     960:	60 91 21 05 	lds	r22, 0x0521
     964:	70 91 22 05 	lds	r23, 0x0522
     968:	80 91 23 05 	lds	r24, 0x0523
     96c:	90 91 24 05 	lds	r25, 0x0524
     970:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
     974:	60 93 21 05 	sts	0x0521, r22
     978:	70 93 22 05 	sts	0x0522, r23
     97c:	80 93 23 05 	sts	0x0523, r24
     980:	90 93 24 05 	sts	0x0524, r25
     984:	20 91 bf 05 	lds	r18, 0x05BF
     988:	30 91 c0 05 	lds	r19, 0x05C0
     98c:	40 91 c1 05 	lds	r20, 0x05C1
     990:	50 91 c2 05 	lds	r21, 0x05C2
     994:	c8 01       	movw	r24, r16
     996:	b7 01       	movw	r22, r14
     998:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
     99c:	9b 01       	movw	r18, r22
     99e:	ac 01       	movw	r20, r24
     9a0:	60 91 25 05 	lds	r22, 0x0525
     9a4:	70 91 26 05 	lds	r23, 0x0526
     9a8:	80 91 27 05 	lds	r24, 0x0527
     9ac:	90 91 28 05 	lds	r25, 0x0528
     9b0:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
     9b4:	60 93 25 05 	sts	0x0525, r22
     9b8:	70 93 26 05 	sts	0x0526, r23
     9bc:	80 93 27 05 	sts	0x0527, r24
     9c0:	90 93 28 05 	sts	0x0528, r25
     9c4:	20 91 b3 05 	lds	r18, 0x05B3
     9c8:	30 91 b4 05 	lds	r19, 0x05B4
     9cc:	40 91 b5 05 	lds	r20, 0x05B5
     9d0:	50 91 b6 05 	lds	r21, 0x05B6
     9d4:	c8 01       	movw	r24, r16
     9d6:	b7 01       	movw	r22, r14
     9d8:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
     9dc:	9b 01       	movw	r18, r22
     9de:	ac 01       	movw	r20, r24
     9e0:	60 91 29 05 	lds	r22, 0x0529
     9e4:	70 91 2a 05 	lds	r23, 0x052A
     9e8:	80 91 2b 05 	lds	r24, 0x052B
     9ec:	90 91 2c 05 	lds	r25, 0x052C
     9f0:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
     9f4:	60 93 29 05 	sts	0x0529, r22
     9f8:	70 93 2a 05 	sts	0x052A, r23
     9fc:	80 93 2b 05 	sts	0x052B, r24
     a00:	90 93 2c 05 	sts	0x052C, r25
     a04:	20 91 ab 05 	lds	r18, 0x05AB
     a08:	30 91 ac 05 	lds	r19, 0x05AC
     a0c:	40 91 ad 05 	lds	r20, 0x05AD
     a10:	50 91 ae 05 	lds	r21, 0x05AE
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	80 e8       	ldi	r24, 0x80	; 128
     a1a:	9f e3       	ldi	r25, 0x3F	; 63
     a1c:	0e 94 ef 1b 	call	0x37de	; 0x37de <__divsf3>
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	40 e8       	ldi	r20, 0x80	; 128
     a26:	5f e3       	ldi	r21, 0x3F	; 63
     a28:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
     a2c:	a8 01       	movw	r20, r16
     a2e:	97 01       	movw	r18, r14
     a30:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
     a34:	9b 01       	movw	r18, r22
     a36:	ac 01       	movw	r20, r24
     a38:	60 91 31 05 	lds	r22, 0x0531
     a3c:	70 91 32 05 	lds	r23, 0x0532
     a40:	80 91 33 05 	lds	r24, 0x0533
     a44:	90 91 34 05 	lds	r25, 0x0534
     a48:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
     a4c:	60 93 31 05 	sts	0x0531, r22
     a50:	70 93 32 05 	sts	0x0532, r23
     a54:	80 93 33 05 	sts	0x0533, r24
     a58:	90 93 34 05 	sts	0x0534, r25
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	ff 90       	pop	r15
     a62:	ef 90       	pop	r14
     a64:	08 95       	ret

00000a66 <bal_hwadj_validate>:
     a66:	df 92       	push	r13
     a68:	ef 92       	push	r14
     a6a:	ff 92       	push	r15
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	ec 01       	movw	r28, r24
     a76:	e8 80       	ld	r14, Y
     a78:	f9 80       	ldd	r15, Y+1	; 0x01
     a7a:	0a 81       	ldd	r16, Y+2	; 0x02
     a7c:	1b 81       	ldd	r17, Y+3	; 0x03
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	50 ec       	ldi	r21, 0xC0	; 192
     a86:	c8 01       	movw	r24, r16
     a88:	b7 01       	movw	r22, r14
     a8a:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
     a8e:	87 fd       	sbrc	r24, 7
     a90:	74 c0       	rjmp	.+232    	; 0xb7a <bal_hwadj_validate+0x114>
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	40 e0       	ldi	r20, 0x00	; 0
     a98:	50 e4       	ldi	r21, 0x40	; 64
     a9a:	c8 01       	movw	r24, r16
     a9c:	b7 01       	movw	r22, r14
     a9e:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
     aa2:	18 16       	cp	r1, r24
     aa4:	0c f4       	brge	.+2      	; 0xaa8 <bal_hwadj_validate+0x42>
     aa6:	69 c0       	rjmp	.+210    	; 0xb7a <bal_hwadj_validate+0x114>
     aa8:	ec 80       	ldd	r14, Y+4	; 0x04
     aaa:	fd 80       	ldd	r15, Y+5	; 0x05
     aac:	0e 81       	ldd	r16, Y+6	; 0x06
     aae:	1f 81       	ldd	r17, Y+7	; 0x07
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	40 e0       	ldi	r20, 0x00	; 0
     ab6:	50 ec       	ldi	r21, 0xC0	; 192
     ab8:	c8 01       	movw	r24, r16
     aba:	b7 01       	movw	r22, r14
     abc:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
     ac0:	87 fd       	sbrc	r24, 7
     ac2:	5b c0       	rjmp	.+182    	; 0xb7a <bal_hwadj_validate+0x114>
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	40 e0       	ldi	r20, 0x00	; 0
     aca:	50 e4       	ldi	r21, 0x40	; 64
     acc:	c8 01       	movw	r24, r16
     ace:	b7 01       	movw	r22, r14
     ad0:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
     ad4:	18 16       	cp	r1, r24
     ad6:	0c f4       	brge	.+2      	; 0xada <bal_hwadj_validate+0x74>
     ad8:	50 c0       	rjmp	.+160    	; 0xb7a <bal_hwadj_validate+0x114>
     ada:	e8 84       	ldd	r14, Y+8	; 0x08
     adc:	f9 84       	ldd	r15, Y+9	; 0x09
     ade:	0a 85       	ldd	r16, Y+10	; 0x0a
     ae0:	1b 85       	ldd	r17, Y+11	; 0x0b
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	40 ea       	ldi	r20, 0xA0	; 160
     ae8:	50 ec       	ldi	r21, 0xC0	; 192
     aea:	c8 01       	movw	r24, r16
     aec:	b7 01       	movw	r22, r14
     aee:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
     af2:	87 fd       	sbrc	r24, 7
     af4:	42 c0       	rjmp	.+132    	; 0xb7a <bal_hwadj_validate+0x114>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	50 e4       	ldi	r21, 0x40	; 64
     afe:	c8 01       	movw	r24, r16
     b00:	b7 01       	movw	r22, r14
     b02:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
     b06:	18 16       	cp	r1, r24
     b08:	c4 f1       	brlt	.+112    	; 0xb7a <bal_hwadj_validate+0x114>
     b0a:	ec 84       	ldd	r14, Y+12	; 0x0c
     b0c:	fd 84       	ldd	r15, Y+13	; 0x0d
     b0e:	0e 85       	ldd	r16, Y+14	; 0x0e
     b10:	1f 85       	ldd	r17, Y+15	; 0x0f
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 ea       	ldi	r20, 0xA0	; 160
     b18:	50 ec       	ldi	r21, 0xC0	; 192
     b1a:	c8 01       	movw	r24, r16
     b1c:	b7 01       	movw	r22, r14
     b1e:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
     b22:	87 fd       	sbrc	r24, 7
     b24:	2a c0       	rjmp	.+84     	; 0xb7a <bal_hwadj_validate+0x114>
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	40 ea       	ldi	r20, 0xA0	; 160
     b2c:	50 e4       	ldi	r21, 0x40	; 64
     b2e:	c8 01       	movw	r24, r16
     b30:	b7 01       	movw	r22, r14
     b32:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
     b36:	18 16       	cp	r1, r24
     b38:	04 f1       	brlt	.+64     	; 0xb7a <bal_hwadj_validate+0x114>
     b3a:	e8 88       	ldd	r14, Y+16	; 0x10
     b3c:	f9 88       	ldd	r15, Y+17	; 0x11
     b3e:	0a 89       	ldd	r16, Y+18	; 0x12
     b40:	1b 89       	ldd	r17, Y+19	; 0x13
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	40 e8       	ldi	r20, 0x80	; 128
     b48:	5f e3       	ldi	r21, 0x3F	; 63
     b4a:	c8 01       	movw	r24, r16
     b4c:	b7 01       	movw	r22, r14
     b4e:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
     b52:	87 fd       	sbrc	r24, 7
     b54:	12 c0       	rjmp	.+36     	; 0xb7a <bal_hwadj_validate+0x114>
     b56:	dd 24       	eor	r13, r13
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	40 ea       	ldi	r20, 0xA0	; 160
     b5e:	50 e4       	ldi	r21, 0x40	; 64
     b60:	c8 01       	movw	r24, r16
     b62:	b7 01       	movw	r22, r14
     b64:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
     b68:	18 16       	cp	r1, r24
     b6a:	14 f4       	brge	.+4      	; 0xb70 <bal_hwadj_validate+0x10a>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	d8 2e       	mov	r13, r24
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	d8 26       	eor	r13, r24
     b74:	8d 2d       	mov	r24, r13
     b76:	99 27       	eor	r25, r25
     b78:	02 c0       	rjmp	.+4      	; 0xb7e <bal_hwadj_validate+0x118>
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	1f 91       	pop	r17
     b84:	0f 91       	pop	r16
     b86:	ff 90       	pop	r15
     b88:	ef 90       	pop	r14
     b8a:	df 90       	pop	r13
     b8c:	08 95       	ret

00000b8e <bal_config_validate>:
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	ec 01       	movw	r28, r24
     b9e:	e8 80       	ld	r14, Y
     ba0:	f9 80       	ldd	r15, Y+1	; 0x01
     ba2:	0a 81       	ldd	r16, Y+2	; 0x02
     ba4:	1b 81       	ldd	r17, Y+3	; 0x03
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	40 e0       	ldi	r20, 0x00	; 0
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	c8 01       	movw	r24, r16
     bb0:	b7 01       	movw	r22, r14
     bb2:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
     bb6:	87 fd       	sbrc	r24, 7
     bb8:	8d c0       	rjmp	.+282    	; 0xcd4 <bal_config_validate+0x146>
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	48 ec       	ldi	r20, 0xC8	; 200
     bc0:	52 e4       	ldi	r21, 0x42	; 66
     bc2:	c8 01       	movw	r24, r16
     bc4:	b7 01       	movw	r22, r14
     bc6:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
     bca:	18 16       	cp	r1, r24
     bcc:	0c f4       	brge	.+2      	; 0xbd0 <bal_config_validate+0x42>
     bce:	82 c0       	rjmp	.+260    	; 0xcd4 <bal_config_validate+0x146>
     bd0:	ec 80       	ldd	r14, Y+4	; 0x04
     bd2:	fd 80       	ldd	r15, Y+5	; 0x05
     bd4:	0e 81       	ldd	r16, Y+6	; 0x06
     bd6:	1f 81       	ldd	r17, Y+7	; 0x07
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	c8 01       	movw	r24, r16
     be2:	b7 01       	movw	r22, r14
     be4:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
     be8:	87 fd       	sbrc	r24, 7
     bea:	74 c0       	rjmp	.+232    	; 0xcd4 <bal_config_validate+0x146>
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 ef       	ldi	r20, 0xF0	; 240
     bf2:	51 e4       	ldi	r21, 0x41	; 65
     bf4:	c8 01       	movw	r24, r16
     bf6:	b7 01       	movw	r22, r14
     bf8:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
     bfc:	18 16       	cp	r1, r24
     bfe:	0c f4       	brge	.+2      	; 0xc02 <bal_config_validate+0x74>
     c00:	69 c0       	rjmp	.+210    	; 0xcd4 <bal_config_validate+0x146>
     c02:	e8 84       	ldd	r14, Y+8	; 0x08
     c04:	f9 84       	ldd	r15, Y+9	; 0x09
     c06:	0a 85       	ldd	r16, Y+10	; 0x0a
     c08:	1b 85       	ldd	r17, Y+11	; 0x0b
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	c8 01       	movw	r24, r16
     c14:	b7 01       	movw	r22, r14
     c16:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
     c1a:	87 fd       	sbrc	r24, 7
     c1c:	5b c0       	rjmp	.+182    	; 0xcd4 <bal_config_validate+0x146>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	48 ec       	ldi	r20, 0xC8	; 200
     c24:	52 e4       	ldi	r21, 0x42	; 66
     c26:	c8 01       	movw	r24, r16
     c28:	b7 01       	movw	r22, r14
     c2a:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
     c2e:	18 16       	cp	r1, r24
     c30:	0c f4       	brge	.+2      	; 0xc34 <bal_config_validate+0xa6>
     c32:	50 c0       	rjmp	.+160    	; 0xcd4 <bal_config_validate+0x146>
     c34:	ec 88       	ldd	r14, Y+20	; 0x14
     c36:	fd 88       	ldd	r15, Y+21	; 0x15
     c38:	0e 89       	ldd	r16, Y+22	; 0x16
     c3a:	1f 89       	ldd	r17, Y+23	; 0x17
     c3c:	2a e0       	ldi	r18, 0x0A	; 10
     c3e:	37 ed       	ldi	r19, 0xD7	; 215
     c40:	43 e2       	ldi	r20, 0x23	; 35
     c42:	5c e3       	ldi	r21, 0x3C	; 60
     c44:	c8 01       	movw	r24, r16
     c46:	b7 01       	movw	r22, r14
     c48:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
     c4c:	87 fd       	sbrc	r24, 7
     c4e:	42 c0       	rjmp	.+132    	; 0xcd4 <bal_config_validate+0x146>
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	40 ea       	ldi	r20, 0xA0	; 160
     c56:	50 e4       	ldi	r21, 0x40	; 64
     c58:	c8 01       	movw	r24, r16
     c5a:	b7 01       	movw	r22, r14
     c5c:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
     c60:	18 16       	cp	r1, r24
     c62:	c4 f1       	brlt	.+112    	; 0xcd4 <bal_config_validate+0x146>
     c64:	e8 8c       	ldd	r14, Y+24	; 0x18
     c66:	f9 8c       	ldd	r15, Y+25	; 0x19
     c68:	0a 8d       	ldd	r16, Y+26	; 0x1a
     c6a:	1b 8d       	ldd	r17, Y+27	; 0x1b
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	50 e0       	ldi	r21, 0x00	; 0
     c74:	c8 01       	movw	r24, r16
     c76:	b7 01       	movw	r22, r14
     c78:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
     c7c:	87 fd       	sbrc	r24, 7
     c7e:	2a c0       	rjmp	.+84     	; 0xcd4 <bal_config_validate+0x146>
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	40 e0       	ldi	r20, 0x00	; 0
     c86:	50 e4       	ldi	r21, 0x40	; 64
     c88:	c8 01       	movw	r24, r16
     c8a:	b7 01       	movw	r22, r14
     c8c:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
     c90:	18 16       	cp	r1, r24
     c92:	04 f1       	brlt	.+64     	; 0xcd4 <bal_config_validate+0x146>
     c94:	ec 8c       	ldd	r14, Y+28	; 0x1c
     c96:	fd 8c       	ldd	r15, Y+29	; 0x1d
     c98:	0e 8d       	ldd	r16, Y+30	; 0x1e
     c9a:	1f 8d       	ldd	r17, Y+31	; 0x1f
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	c8 01       	movw	r24, r16
     ca6:	b7 01       	movw	r22, r14
     ca8:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
     cac:	87 fd       	sbrc	r24, 7
     cae:	12 c0       	rjmp	.+36     	; 0xcd4 <bal_config_validate+0x146>
     cb0:	dd 24       	eor	r13, r13
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	40 e0       	ldi	r20, 0x00	; 0
     cb8:	50 e4       	ldi	r21, 0x40	; 64
     cba:	c8 01       	movw	r24, r16
     cbc:	b7 01       	movw	r22, r14
     cbe:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
     cc2:	18 16       	cp	r1, r24
     cc4:	14 f4       	brge	.+4      	; 0xcca <bal_config_validate+0x13c>
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	d9 2e       	mov	r13, r25
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	d8 26       	eor	r13, r24
     cce:	8d 2d       	mov	r24, r13
     cd0:	99 27       	eor	r25, r25
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <bal_config_validate+0x14a>
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	df 90       	pop	r13
     ce6:	08 95       	ret

00000ce8 <bal_drive_validate>:
     ce8:	df 92       	push	r13
     cea:	ef 92       	push	r14
     cec:	ff 92       	push	r15
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	ec 01       	movw	r28, r24
     cf8:	e8 80       	ld	r14, Y
     cfa:	f9 80       	ldd	r15, Y+1	; 0x01
     cfc:	0a 81       	ldd	r16, Y+2	; 0x02
     cfe:	1b 81       	ldd	r17, Y+3	; 0x03
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	5f eb       	ldi	r21, 0xBF	; 191
     d08:	c8 01       	movw	r24, r16
     d0a:	b7 01       	movw	r22, r14
     d0c:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
     d10:	87 fd       	sbrc	r24, 7
     d12:	2a c0       	rjmp	.+84     	; 0xd68 <bal_drive_validate+0x80>
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	5f e3       	ldi	r21, 0x3F	; 63
     d1c:	c8 01       	movw	r24, r16
     d1e:	b7 01       	movw	r22, r14
     d20:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
     d24:	18 16       	cp	r1, r24
     d26:	04 f1       	brlt	.+64     	; 0xd68 <bal_drive_validate+0x80>
     d28:	ec 80       	ldd	r14, Y+4	; 0x04
     d2a:	fd 80       	ldd	r15, Y+5	; 0x05
     d2c:	0e 81       	ldd	r16, Y+6	; 0x06
     d2e:	1f 81       	ldd	r17, Y+7	; 0x07
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e8       	ldi	r20, 0x80	; 128
     d36:	5f eb       	ldi	r21, 0xBF	; 191
     d38:	c8 01       	movw	r24, r16
     d3a:	b7 01       	movw	r22, r14
     d3c:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
     d40:	87 fd       	sbrc	r24, 7
     d42:	12 c0       	rjmp	.+36     	; 0xd68 <bal_drive_validate+0x80>
     d44:	dd 24       	eor	r13, r13
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e8       	ldi	r20, 0x80	; 128
     d4c:	5f e3       	ldi	r21, 0x3F	; 63
     d4e:	c8 01       	movw	r24, r16
     d50:	b7 01       	movw	r22, r14
     d52:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
     d56:	18 16       	cp	r1, r24
     d58:	14 f4       	brge	.+4      	; 0xd5e <bal_drive_validate+0x76>
     d5a:	21 e0       	ldi	r18, 0x01	; 1
     d5c:	d2 2e       	mov	r13, r18
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	d8 26       	eor	r13, r24
     d62:	8d 2d       	mov	r24, r13
     d64:	99 27       	eor	r25, r25
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <bal_drive_validate+0x84>
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	df 90       	pop	r13
     d7a:	08 95       	ret

00000d7c <do_crossover>:
     d7c:	6f 92       	push	r6
     d7e:	7f 92       	push	r7
     d80:	8f 92       	push	r8
     d82:	9f 92       	push	r9
     d84:	af 92       	push	r10
     d86:	bf 92       	push	r11
     d88:	cf 92       	push	r12
     d8a:	df 92       	push	r13
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	ec 01       	movw	r28, r24
     d9a:	3a 01       	movw	r6, r20
     d9c:	4b 01       	movw	r8, r22
     d9e:	58 01       	movw	r10, r16
     da0:	69 01       	movw	r12, r18
     da2:	e8 80       	ld	r14, Y
     da4:	f9 80       	ldd	r15, Y+1	; 0x01
     da6:	0a 81       	ldd	r16, Y+2	; 0x02
     da8:	1b 81       	ldd	r17, Y+3	; 0x03
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	40 e0       	ldi	r20, 0x00	; 0
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	c8 01       	movw	r24, r16
     db4:	b7 01       	movw	r22, r14
     db6:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
     dba:	88 23       	and	r24, r24
     dbc:	bc f0       	brlt	.+46     	; 0xdec <do_crossover+0x70>
     dbe:	a6 01       	movw	r20, r12
     dc0:	95 01       	movw	r18, r10
     dc2:	c8 01       	movw	r24, r16
     dc4:	b7 01       	movw	r22, r14
     dc6:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
     dca:	9b 01       	movw	r18, r22
     dcc:	ac 01       	movw	r20, r24
     dce:	c4 01       	movw	r24, r8
     dd0:	b3 01       	movw	r22, r6
     dd2:	0e 94 6e 03 	call	0x6dc	; 0x6dc <fmin>
     dd6:	9b 01       	movw	r18, r22
     dd8:	ac 01       	movw	r20, r24
     dda:	c8 01       	movw	r24, r16
     ddc:	b7 01       	movw	r22, r14
     dde:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
     de2:	68 83       	st	Y, r22
     de4:	79 83       	std	Y+1, r23	; 0x01
     de6:	8a 83       	std	Y+2, r24	; 0x02
     de8:	9b 83       	std	Y+3, r25	; 0x03
     dea:	17 c0       	rjmp	.+46     	; 0xe1a <do_crossover+0x9e>
     dec:	c8 01       	movw	r24, r16
     dee:	b7 01       	movw	r22, r14
     df0:	90 58       	subi	r25, 0x80	; 128
     df2:	a6 01       	movw	r20, r12
     df4:	95 01       	movw	r18, r10
     df6:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
     dfa:	9b 01       	movw	r18, r22
     dfc:	ac 01       	movw	r20, r24
     dfe:	c4 01       	movw	r24, r8
     e00:	b3 01       	movw	r22, r6
     e02:	0e 94 6e 03 	call	0x6dc	; 0x6dc <fmin>
     e06:	9b 01       	movw	r18, r22
     e08:	ac 01       	movw	r20, r24
     e0a:	c8 01       	movw	r24, r16
     e0c:	b7 01       	movw	r22, r14
     e0e:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
     e12:	68 83       	st	Y, r22
     e14:	79 83       	std	Y+1, r23	; 0x01
     e16:	8a 83       	std	Y+2, r24	; 0x02
     e18:	9b 83       	std	Y+3, r25	; 0x03
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	ff 90       	pop	r15
     e24:	ef 90       	pop	r14
     e26:	df 90       	pop	r13
     e28:	cf 90       	pop	r12
     e2a:	bf 90       	pop	r11
     e2c:	af 90       	pop	r10
     e2e:	9f 90       	pop	r9
     e30:	8f 90       	pop	r8
     e32:	7f 90       	pop	r7
     e34:	6f 90       	pop	r6
     e36:	08 95       	ret

00000e38 <timer_init>:
     e38:	82 ee       	ldi	r24, 0xE2	; 226
     e3a:	8f bd       	out	0x2f, r24	; 47
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	8e bd       	out	0x2e, r24	; 46
     e40:	10 92 8b 00 	sts	0x008B, r1
     e44:	85 e0       	ldi	r24, 0x05	; 5
     e46:	80 93 8a 00 	sts	0x008A, r24
     e4a:	84 eb       	ldi	r24, 0xB4	; 180
     e4c:	92 ea       	ldi	r25, 0xA2	; 162
     e4e:	a1 e9       	ldi	r26, 0x91	; 145
     e50:	b8 e3       	ldi	r27, 0x38	; 56
     e52:	80 93 09 05 	sts	0x0509, r24
     e56:	90 93 0a 05 	sts	0x050A, r25
     e5a:	a0 93 0b 05 	sts	0x050B, r26
     e5e:	b0 93 0c 05 	sts	0x050C, r27
     e62:	08 95       	ret

00000e64 <update_leds>:
     e64:	08 95       	ret

00000e66 <barf>:
     e66:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <adc_disable>
     e6a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <set_motor_idle>
     e6e:	0e 94 01 19 	call	0x3202	; 0x3202 <uart_tx_empty>
     e72:	88 23       	and	r24, r24
     e74:	e1 f3       	breq	.-8      	; 0xe6e <barf+0x8>
     e76:	0e 94 91 16 	call	0x2d22	; 0x2d22 <dump_adc_log>
     e7a:	0e 94 01 19 	call	0x3202	; 0x3202 <uart_tx_empty>
     e7e:	88 23       	and	r24, r24
     e80:	b1 f3       	breq	.-20     	; 0xe6e <barf+0x8>
     e82:	f9 cf       	rjmp	.-14     	; 0xe76 <barf+0x10>

00000e84 <handle_rx>:
     e84:	ef 92       	push	r14
     e86:	ff 92       	push	r15
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	22 97       	sbiw	r28, 0x02	; 2
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	ce 01       	movw	r24, r28
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	0e 94 41 1a 	call	0x3482	; 0x3482 <pkt_rx>
     ea8:	28 2f       	mov	r18, r24
     eaa:	88 23       	and	r24, r24
     eac:	09 f4       	brne	.+2      	; 0xeb0 <handle_rx+0x2c>
     eae:	a7 c0       	rjmp	.+334    	; 0xffe <handle_rx+0x17a>
     eb0:	e9 81       	ldd	r30, Y+1	; 0x01
     eb2:	fa 81       	ldd	r31, Y+2	; 0x02
     eb4:	80 81       	ld	r24, Z
     eb6:	83 34       	cpi	r24, 0x43	; 67
     eb8:	91 f0       	breq	.+36     	; 0xede <handle_rx+0x5a>
     eba:	82 35       	cpi	r24, 0x52	; 82
     ebc:	09 f4       	brne	.+2      	; 0xec0 <handle_rx+0x3c>
     ebe:	42 c0       	rjmp	.+132    	; 0xf44 <handle_rx+0xc0>
     ec0:	88 34       	cpi	r24, 0x48	; 72
     ec2:	09 f4       	brne	.+2      	; 0xec6 <handle_rx+0x42>
     ec4:	56 c0       	rjmp	.+172    	; 0xf72 <handle_rx+0xee>
     ec6:	81 34       	cpi	r24, 0x41	; 65
     ec8:	01 f1       	breq	.+64     	; 0xf0a <handle_rx+0x86>
     eca:	87 35       	cpi	r24, 0x57	; 87
     ecc:	09 f4       	brne	.+2      	; 0xed0 <handle_rx+0x4c>
     ece:	7b c0       	rjmp	.+246    	; 0xfc6 <handle_rx+0x142>
     ed0:	81 35       	cpi	r24, 0x51	; 81
     ed2:	09 f0       	breq	.+2      	; 0xed6 <handle_rx+0x52>
     ed4:	94 c0       	rjmp	.+296    	; 0xffe <handle_rx+0x17a>
     ed6:	26 30       	cpi	r18, 0x06	; 6
     ed8:	09 f0       	breq	.+2      	; 0xedc <handle_rx+0x58>
     eda:	91 c0       	rjmp	.+290    	; 0xffe <handle_rx+0x17a>
     edc:	5e c0       	rjmp	.+188    	; 0xf9a <handle_rx+0x116>
     ede:	21 30       	cpi	r18, 0x01	; 1
     ee0:	09 f0       	breq	.+2      	; 0xee4 <handle_rx+0x60>
     ee2:	8d c0       	rjmp	.+282    	; 0xffe <handle_rx+0x17a>
     ee4:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <pkt_tx_start>
     ee8:	83 e6       	ldi	r24, 0x63	; 99
     eea:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
     eee:	03 ea       	ldi	r16, 0xA3	; 163
     ef0:	15 e0       	ldi	r17, 0x05	; 5
     ef2:	f8 01       	movw	r30, r16
     ef4:	81 91       	ld	r24, Z+
     ef6:	8f 01       	movw	r16, r30
     ef8:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
     efc:	f6 e0       	ldi	r31, 0x06	; 6
     efe:	0d 35       	cpi	r16, 0x5D	; 93
     f00:	1f 07       	cpc	r17, r31
     f02:	b9 f7       	brne	.-18     	; 0xef2 <handle_rx+0x6e>
     f04:	0e 94 51 18 	call	0x30a2	; 0x30a2 <pkt_tx_end>
     f08:	7a c0       	rjmp	.+244    	; 0xffe <handle_rx+0x17a>
     f0a:	25 31       	cpi	r18, 0x15	; 21
     f0c:	09 f0       	breq	.+2      	; 0xf10 <handle_rx+0x8c>
     f0e:	77 c0       	rjmp	.+238    	; 0xffe <handle_rx+0x17a>
     f10:	8f 01       	movw	r16, r30
     f12:	0f 5f       	subi	r16, 0xFF	; 255
     f14:	1f 4f       	sbci	r17, 0xFF	; 255
     f16:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <pkt_tx_start>
     f1a:	81 e6       	ldi	r24, 0x61	; 97
     f1c:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
     f20:	c8 01       	movw	r24, r16
     f22:	0e 94 33 05 	call	0xa66	; 0xa66 <bal_hwadj_validate>
     f26:	89 2b       	or	r24, r25
     f28:	09 f4       	brne	.+2      	; 0xf2c <handle_rx+0xa8>
     f2a:	65 c0       	rjmp	.+202    	; 0xff6 <handle_rx+0x172>
     f2c:	a1 e2       	ldi	r26, 0x21	; 33
     f2e:	b5 e0       	ldi	r27, 0x05	; 5
     f30:	f8 01       	movw	r30, r16
     f32:	84 e1       	ldi	r24, 0x14	; 20
     f34:	01 90       	ld	r0, Z+
     f36:	0d 92       	st	X+, r0
     f38:	81 50       	subi	r24, 0x01	; 1
     f3a:	e1 f7       	brne	.-8      	; 0xf34 <handle_rx+0xb0>
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
     f42:	e0 cf       	rjmp	.-64     	; 0xf04 <handle_rx+0x80>
     f44:	21 30       	cpi	r18, 0x01	; 1
     f46:	09 f0       	breq	.+2      	; 0xf4a <handle_rx+0xc6>
     f48:	5a c0       	rjmp	.+180    	; 0xffe <handle_rx+0x17a>
     f4a:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <pkt_tx_start>
     f4e:	82 e7       	ldi	r24, 0x72	; 114
     f50:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
     f54:	03 e5       	ldi	r16, 0x53	; 83
     f56:	15 e0       	ldi	r17, 0x05	; 5
     f58:	33 ea       	ldi	r19, 0xA3	; 163
     f5a:	e3 2e       	mov	r14, r19
     f5c:	35 e0       	ldi	r19, 0x05	; 5
     f5e:	f3 2e       	mov	r15, r19
     f60:	f8 01       	movw	r30, r16
     f62:	81 91       	ld	r24, Z+
     f64:	8f 01       	movw	r16, r30
     f66:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
     f6a:	e0 16       	cp	r14, r16
     f6c:	f1 06       	cpc	r15, r17
     f6e:	c1 f7       	brne	.-16     	; 0xf60 <handle_rx+0xdc>
     f70:	c9 cf       	rjmp	.-110    	; 0xf04 <handle_rx+0x80>
     f72:	21 30       	cpi	r18, 0x01	; 1
     f74:	09 f0       	breq	.+2      	; 0xf78 <handle_rx+0xf4>
     f76:	43 c0       	rjmp	.+134    	; 0xffe <handle_rx+0x17a>
     f78:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <pkt_tx_start>
     f7c:	88 e6       	ldi	r24, 0x68	; 104
     f7e:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
     f82:	01 e2       	ldi	r16, 0x21	; 33
     f84:	15 e0       	ldi	r17, 0x05	; 5
     f86:	f8 01       	movw	r30, r16
     f88:	81 91       	ld	r24, Z+
     f8a:	8f 01       	movw	r16, r30
     f8c:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
     f90:	f5 e0       	ldi	r31, 0x05	; 5
     f92:	05 33       	cpi	r16, 0x35	; 53
     f94:	1f 07       	cpc	r17, r31
     f96:	b9 f7       	brne	.-18     	; 0xf86 <handle_rx+0x102>
     f98:	b5 cf       	rjmp	.-150    	; 0xf04 <handle_rx+0x80>
     f9a:	81 81       	ldd	r24, Z+1	; 0x01
     f9c:	83 33       	cpi	r24, 0x33	; 51
     f9e:	79 f5       	brne	.+94     	; 0xffe <handle_rx+0x17a>
     fa0:	82 81       	ldd	r24, Z+2	; 0x02
     fa2:	82 36       	cpi	r24, 0x62	; 98
     fa4:	61 f5       	brne	.+88     	; 0xffe <handle_rx+0x17a>
     fa6:	83 81       	ldd	r24, Z+3	; 0x03
     fa8:	80 33       	cpi	r24, 0x30	; 48
     faa:	49 f5       	brne	.+82     	; 0xffe <handle_rx+0x17a>
     fac:	84 81       	ldd	r24, Z+4	; 0x04
     fae:	80 33       	cpi	r24, 0x30	; 48
     fb0:	31 f5       	brne	.+76     	; 0xffe <handle_rx+0x17a>
     fb2:	85 81       	ldd	r24, Z+5	; 0x05
     fb4:	84 37       	cpi	r24, 0x74	; 116
     fb6:	19 f5       	brne	.+70     	; 0xffe <handle_rx+0x17a>
     fb8:	0e 94 71 04 	call	0x8e2	; 0x8e2 <set_motor_idle>
     fbc:	f8 94       	cli
     fbe:	e0 e0       	ldi	r30, 0x00	; 0
     fc0:	f8 ef       	ldi	r31, 0xF8	; 248
     fc2:	09 95       	icall
     fc4:	1c c0       	rjmp	.+56     	; 0xffe <handle_rx+0x17a>
     fc6:	21 35       	cpi	r18, 0x51	; 81
     fc8:	d1 f4       	brne	.+52     	; 0xffe <handle_rx+0x17a>
     fca:	8f 01       	movw	r16, r30
     fcc:	0f 5f       	subi	r16, 0xFF	; 255
     fce:	1f 4f       	sbci	r17, 0xFF	; 255
     fd0:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <pkt_tx_start>
     fd4:	87 e7       	ldi	r24, 0x77	; 119
     fd6:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
     fda:	c8 01       	movw	r24, r16
     fdc:	0e 94 c7 05 	call	0xb8e	; 0xb8e <bal_config_validate>
     fe0:	89 2b       	or	r24, r25
     fe2:	49 f0       	breq	.+18     	; 0xff6 <handle_rx+0x172>
     fe4:	a3 e5       	ldi	r26, 0x53	; 83
     fe6:	b5 e0       	ldi	r27, 0x05	; 5
     fe8:	f8 01       	movw	r30, r16
     fea:	80 e5       	ldi	r24, 0x50	; 80
     fec:	01 90       	ld	r0, Z+
     fee:	0d 92       	st	X+, r0
     ff0:	81 50       	subi	r24, 0x01	; 1
     ff2:	e1 f7       	brne	.-8      	; 0xfec <handle_rx+0x168>
     ff4:	a3 cf       	rjmp	.-186    	; 0xf3c <handle_rx+0xb8>
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
     ffc:	83 cf       	rjmp	.-250    	; 0xf04 <handle_rx+0x80>
     ffe:	22 96       	adiw	r28, 0x02	; 2
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	ff 90       	pop	r15
    1014:	ef 90       	pop	r14
    1016:	08 95       	ret

00001018 <balance_configure>:
    1018:	ef 92       	push	r14
    101a:	ff 92       	push	r15
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	a0 ec       	ldi	r26, 0xC0	; 192
    1026:	b0 e4       	ldi	r27, 0x40	; 64
    1028:	80 93 53 05 	sts	0x0553, r24
    102c:	90 93 54 05 	sts	0x0554, r25
    1030:	a0 93 55 05 	sts	0x0555, r26
    1034:	b0 93 56 05 	sts	0x0556, r27
    1038:	0f 2e       	mov	r0, r31
    103a:	fa e9       	ldi	r31, 0x9A	; 154
    103c:	ef 2e       	mov	r14, r31
    103e:	f9 e9       	ldi	r31, 0x99	; 153
    1040:	ff 2e       	mov	r15, r31
    1042:	f9 e1       	ldi	r31, 0x19	; 25
    1044:	0f 2f       	mov	r16, r31
    1046:	ff e3       	ldi	r31, 0x3F	; 63
    1048:	1f 2f       	mov	r17, r31
    104a:	f0 2d       	mov	r31, r0
    104c:	e0 92 57 05 	sts	0x0557, r14
    1050:	f0 92 58 05 	sts	0x0558, r15
    1054:	00 93 59 05 	sts	0x0559, r16
    1058:	10 93 5a 05 	sts	0x055A, r17
    105c:	8a e9       	ldi	r24, 0x9A	; 154
    105e:	99 e9       	ldi	r25, 0x99	; 153
    1060:	a9 e1       	ldi	r26, 0x19	; 25
    1062:	b0 e4       	ldi	r27, 0x40	; 64
    1064:	80 93 5b 05 	sts	0x055B, r24
    1068:	90 93 5c 05 	sts	0x055C, r25
    106c:	a0 93 5d 05 	sts	0x055D, r26
    1070:	b0 93 5e 05 	sts	0x055E, r27
    1074:	8a e0       	ldi	r24, 0x0A	; 10
    1076:	97 ed       	ldi	r25, 0xD7	; 215
    1078:	a3 ea       	ldi	r26, 0xA3	; 163
    107a:	be e3       	ldi	r27, 0x3E	; 62
    107c:	80 93 8f 05 	sts	0x058F, r24
    1080:	90 93 90 05 	sts	0x0590, r25
    1084:	a0 93 91 05 	sts	0x0591, r26
    1088:	b0 93 92 05 	sts	0x0592, r27
    108c:	8d ec       	ldi	r24, 0xCD	; 205
    108e:	9c ec       	ldi	r25, 0xCC	; 204
    1090:	ac e4       	ldi	r26, 0x4C	; 76
    1092:	bd e3       	ldi	r27, 0x3D	; 61
    1094:	80 93 5f 05 	sts	0x055F, r24
    1098:	90 93 60 05 	sts	0x0560, r25
    109c:	a0 93 61 05 	sts	0x0561, r26
    10a0:	b0 93 62 05 	sts	0x0562, r27
    10a4:	2d ec       	ldi	r18, 0xCD	; 205
    10a6:	3c ec       	ldi	r19, 0xCC	; 204
    10a8:	4c ec       	ldi	r20, 0xCC	; 204
    10aa:	5d e3       	ldi	r21, 0x3D	; 61
    10ac:	20 93 63 05 	sts	0x0563, r18
    10b0:	30 93 64 05 	sts	0x0564, r19
    10b4:	40 93 65 05 	sts	0x0565, r20
    10b8:	50 93 66 05 	sts	0x0566, r21
    10bc:	84 ea       	ldi	r24, 0xA4	; 164
    10be:	90 e7       	ldi	r25, 0x70	; 112
    10c0:	ad e7       	ldi	r26, 0x7D	; 125
    10c2:	bf e3       	ldi	r27, 0x3F	; 63
    10c4:	80 93 67 05 	sts	0x0567, r24
    10c8:	90 93 68 05 	sts	0x0568, r25
    10cc:	a0 93 69 05 	sts	0x0569, r26
    10d0:	b0 93 6a 05 	sts	0x056A, r27
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	a0 e4       	ldi	r26, 0x40	; 64
    10da:	bf e3       	ldi	r27, 0x3F	; 63
    10dc:	80 93 6b 05 	sts	0x056B, r24
    10e0:	90 93 6c 05 	sts	0x056C, r25
    10e4:	a0 93 6d 05 	sts	0x056D, r26
    10e8:	b0 93 6e 05 	sts	0x056E, r27
    10ec:	e0 92 6f 05 	sts	0x056F, r14
    10f0:	f0 92 70 05 	sts	0x0570, r15
    10f4:	00 93 71 05 	sts	0x0571, r16
    10f8:	10 93 72 05 	sts	0x0572, r17
    10fc:	8e ea       	ldi	r24, 0xAE	; 174
    10fe:	97 e4       	ldi	r25, 0x47	; 71
    1100:	a1 e6       	ldi	r26, 0x61	; 97
    1102:	bf e3       	ldi	r27, 0x3F	; 63
    1104:	80 93 73 05 	sts	0x0573, r24
    1108:	90 93 74 05 	sts	0x0574, r25
    110c:	a0 93 75 05 	sts	0x0575, r26
    1110:	b0 93 76 05 	sts	0x0576, r27
    1114:	8a e9       	ldi	r24, 0x9A	; 154
    1116:	99 e9       	ldi	r25, 0x99	; 153
    1118:	a9 e9       	ldi	r26, 0x99	; 153
    111a:	be e3       	ldi	r27, 0x3E	; 62
    111c:	80 93 97 05 	sts	0x0597, r24
    1120:	90 93 98 05 	sts	0x0598, r25
    1124:	a0 93 99 05 	sts	0x0599, r26
    1128:	b0 93 9a 05 	sts	0x059A, r27
    112c:	8d ec       	ldi	r24, 0xCD	; 205
    112e:	9c ec       	ldi	r25, 0xCC	; 204
    1130:	ac ec       	ldi	r26, 0xCC	; 204
    1132:	be e3       	ldi	r27, 0x3E	; 62
    1134:	80 93 77 05 	sts	0x0577, r24
    1138:	90 93 78 05 	sts	0x0578, r25
    113c:	a0 93 79 05 	sts	0x0579, r26
    1140:	b0 93 7a 05 	sts	0x057A, r27
    1144:	20 93 7b 05 	sts	0x057B, r18
    1148:	30 93 7c 05 	sts	0x057C, r19
    114c:	40 93 7d 05 	sts	0x057D, r20
    1150:	50 93 7e 05 	sts	0x057E, r21
    1154:	8d ec       	ldi	r24, 0xCD	; 205
    1156:	9c ec       	ldi	r25, 0xCC	; 204
    1158:	ac e4       	ldi	r26, 0x4C	; 76
    115a:	be e3       	ldi	r27, 0x3E	; 62
    115c:	80 93 7f 05 	sts	0x057F, r24
    1160:	90 93 80 05 	sts	0x0580, r25
    1164:	a0 93 81 05 	sts	0x0581, r26
    1168:	b0 93 82 05 	sts	0x0582, r27
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	a0 ee       	ldi	r26, 0xE0	; 224
    1172:	b0 e4       	ldi	r27, 0x40	; 64
    1174:	80 93 87 05 	sts	0x0587, r24
    1178:	90 93 88 05 	sts	0x0588, r25
    117c:	a0 93 89 05 	sts	0x0589, r26
    1180:	b0 93 8a 05 	sts	0x058A, r27
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a0 e8       	ldi	r26, 0x80	; 128
    118a:	bf e3       	ldi	r27, 0x3F	; 63
    118c:	80 93 8b 05 	sts	0x058B, r24
    1190:	90 93 8c 05 	sts	0x058C, r25
    1194:	a0 93 8d 05 	sts	0x058D, r26
    1198:	b0 93 8e 05 	sts	0x058E, r27
    119c:	83 e3       	ldi	r24, 0x33	; 51
    119e:	93 e3       	ldi	r25, 0x33	; 51
    11a0:	a3 eb       	ldi	r26, 0xB3	; 179
    11a2:	be e3       	ldi	r27, 0x3E	; 62
    11a4:	80 93 93 05 	sts	0x0593, r24
    11a8:	90 93 94 05 	sts	0x0594, r25
    11ac:	a0 93 95 05 	sts	0x0595, r26
    11b0:	b0 93 96 05 	sts	0x0596, r27
    11b4:	8f e8       	ldi	r24, 0x8F	; 143
    11b6:	92 ec       	ldi	r25, 0xC2	; 194
    11b8:	a5 e7       	ldi	r26, 0x75	; 117
    11ba:	bc e3       	ldi	r27, 0x3C	; 60
    11bc:	80 93 9b 05 	sts	0x059B, r24
    11c0:	90 93 9c 05 	sts	0x059C, r25
    11c4:	a0 93 9d 05 	sts	0x059D, r26
    11c8:	b0 93 9e 05 	sts	0x059E, r27
              /* Needed in order to truncate to 8 bit.  */
              uint8_t len;
              len = (uint8_t) n; 

              __asm__ __volatile__ (
    11cc:	84 e1       	ldi	r24, 0x14	; 20
    11ce:	41 e2       	ldi	r20, 0x21	; 33
    11d0:	55 e0       	ldi	r21, 0x05	; 5
    11d2:	a0 e0       	ldi	r26, 0x00	; 0
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	fa 01       	movw	r30, r20
    11d8:	18 2e       	mov	r1, r24
    11da:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <__eeprom_read_block_1C1D1E>
   In a nutshell...
   
   We have two inputs, a measured angular rotation rate (degrees per second) and a
   forward-backward acceleration. We integrate the angular rate to get the angle. Except
   that the angular rate has a bias on it, simulating an apparent rotation all the time at
   a small rate that varies with temperature. So we have to correct it with the
   accelerometer. The accelerometer is a tiny mass on a spring that moves forward-backward
   in the frame of reference of the scooter. At rest, it will read positive if the scooter
   is tipped forward and negative if tipped backwards, since gravity pulls it forwards or
   backwards. However, it also moves a lot due to the scooter itself acclerating. So we
   use the accelerometer as a long-term correction and the rate gyro for short-term
   changes.

   This isn't really a Kalman filter, since that particular brand of filter dynamically
   estimates the noise on each signal. I initially did that but it didn't work well, since
   the noise is not independent, additive white Gaussian noise. Instead, how much we trust
   the acclerometer depends on how much we're accelerating.

   This isn't perfect; the scooter can wobble slowly by a couple degrees over several
   seconds, and especially after a sharp maneuver. But it's barely noticeable riding it;
   you get used to adjusting for it. 
*/
void gyro_sample_rate(struct gyro_filter *it, float in_rate, float interval)
{
  if (!it->rate_inited) {
    it->rate_bias = in_rate;
    it->rate_inited=1;
  }
  
  it->rate = in_rate - it->rate_bias;
  it->angle += it->rate * interval;

#ifdef __UNICYCLE2__
  it->rate_bias += it->rate * 0.1 * interval;
#else
  it->rate_bias += it->rate * 0.3 * interval;
#endif
}

void gyro_sample_angle(struct gyro_filter *it, float in_angle, float interval)
{
  float angle_err;

  if (!it->angle_inited) {
    it->angle = in_angle;
    it->angle_inited=1;
  }
  
  angle_err = in_angle - it->angle;

#ifdef __UNICYCLE2__
  it->angle += angle_err * 3.0 * interval / (2.0 + it->angle_noise);
#else
  it->angle += angle_err * interval / (2.0 + it->angle_noise);
#endif
}

/* 
   Set the PWM values for the motors. +1.0 is full forward, -1.0 is full reverse.
*/

void set_motors(float left
#ifdef DO_STEERING
                , float right
#endif
                )
{
  uint8_t debuglog=0;
  {
    static uint8_t dlc;
    dlc++;
    if (dlc==0) debuglog=1;
  }
  left=flim(L_MOTOR_POLARITY left, -1.0, 1.0);
  int16_t lefti = (int16_t)(left*(OCR1_MAX+0.9));
  if (lefti<-(OCR1_MAX-3)) lefti=-(OCR1_MAX-3);
  if (lefti>OCR1_MAX-3) lefti=OCR1_MAX-3;

#ifdef DO_STEERING
  right=flim(R_MOTOR_POLARITY right, -1.0, 1.0);
  int16_t righti = (int16_t)(right*(OCR1_MAX+0.9));
  if (righti<-(OCR1_MAX-3)) righti=-(OCR1_MAX-3);
  if (righti>OCR1_MAX-3) righti=OCR1_MAX-3;
#endif

  /* 
    It's OK to update these asynchronously with the PWM clock, because OCRn[AB] is double buffered 
    and only changes when the counter reaches TOP 
  */

  cli();
  // The OSMC1 port on the BAL2 board
  if (lefti<0) {
    ASMCOMMENT("left reverse");
    /* For reverse, set PWM_FWD=0, PWM_DISABLE=0, PWM_REV=1.
       The order here is carefully chosen to avoid glitches.
       Note also that we have interrupts disabled so there's no chance of dead time.
    */
    set0_l_pwm_fwd();
    set0_l_pwm_disable();
    set1_l_pwm_rev();
    set_l_pwm(-lefti);
    if (debuglog) {
      pkt_tx_start();
      pkt_tx_str_P(PSTR("!lr"));
      pkt_tx_uint16_hex(-lefti);
      pkt_tx_end();
    }
  } else {
    ASMCOMMENT("left forward");
    // For forward, set PWM_FWD=1, PWM_DISABLE=0, PWM_REV=0
    set0_l_pwm_rev();
    set0_l_pwm_disable();
    set1_l_pwm_fwd();
    set_l_pwm(lefti);
    if (debuglog) {
      pkt_tx_start();
      pkt_tx_str_P(PSTR("!lf"));
      pkt_tx_uint16_hex(lefti);
      pkt_tx_end();
    }
  }

#ifdef DO_STEERING
  // The OSMC2 port on the BAL2 board
  if (righti<0) {
    ASMCOMMENT("right reverse");
    set0_r_pwm_fwd();
    set0_r_pwm_disable();
    set1_r_pwm_rev();
    set_r_pwm(OCR1_MAX+righti);
    if (debuglog) {
      pkt_tx_start();
      pkt_tx_str_P(PSTR("!rr"));
      pkt_tx_uint16_hex(OCR1_MAX+righti);
      pkt_tx_end();
    }
  } else {
    set0_r_pwm_rev();
    set0_r_pwm_disable();
    set1_r_pwm_fwd();
    set_r_pwm(OCR1_MAX-righti);
    if (debuglog) {
      pkt_tx_start();
      pkt_tx_str_P(PSTR("!rf"));
      pkt_tx_uint16_hex(OCR1_MAX-righti);
      pkt_tx_end();
    }
  }
#endif

  sei();
}

/*
  Different from setting the motors to zero speed, this disables both legs of the H bridge
  so the motor can freewheel. This is a better thing to do in an emergency than locking
  the wheel by calling set_motors(0.0, 0.0). 
*/

void set_motor_idle()
{

#ifdef DO_STEERING
  set_r_pwm(0);
  set1_r_pwm_disable();
  set0_r_pwm_rev();
  set0_r_pwm_fwd();
#endif

  set_l_pwm(0);
  set1_l_pwm_disable();
  set0_l_pwm_rev();
  set0_l_pwm_fwd();
}

void
accum_88_32(uint8_t l, uint8_t h, uint32_t *out)
{
  uint8_t *outb = (uint8_t *)out;
  
  outb[0] = l;
  uint8_t oldh = outb[1];
  outb[1] = h;

  uint8_t dir=h-oldh;

  if ((dir&0x80) && !(oldh&0x80) && (h&0x80)) {
    outb[3]--;
    if (outb[3]==0xff) outb[4]--;
  }
  else if (!(dir&0x80) && (oldh&0x80) && !(h&0x80)) {
    outb[3]++;
    if (outb[3]==0) outb[4]++;
  }

}

#if defined(DO_ENCODERS)
void
read_encoders(uint32_t *enc1_r, uint32_t *enc2_r)
{
  set0_enc_sel1();
  set0_enc_oe1_not();
  _delay_loop_1(10);
  uint8_t enc1h = getpin_enc_data();
  set1_enc_oe1_not();
  set1_enc_sel1();
  set0_enc_oe1_not();
  _delay_loop_1(10);
  uint8_t enc1l = getpin_enc_data();
  set1_enc_oe1_not();

  accum_88_32(enc1l, enc1h, enc1_r);

  set0_enc_sel2();
  set0_enc_oe2_not();
  _delay_loop_1(10);
  uint8_t enc2h = getpin_enc_data();
  set1_enc_oe2_not();
  set1_enc_sel2();
  set0_enc_oe2_not();
  _delay_loop_1(10);
  uint8_t enc2l = getpin_enc_data();
  set1_enc_oe2_not();

  accum_88_32(enc2l, enc2h, enc2_r);
}
#endif

/* 
   All the state and config variables are defined in balconf.h, so I can get at them externally.
*/
struct bal_config bc;
struct bal_state bs;
struct bal_hwadj bh;

/*
  Constants to convert integer ADC samples to numbers between 0 and 1, or -1 and 1.
  What the ADC system actually gives us is the sum of ADC_HIST (8) consecutive samples.
*/
static float sample_conv_bipolar = 1.0/512.0/(float)ADC_HIST;
static float sample_conv_unipolar = 1.0/1024.0/(float)ADC_HIST;

void
update_hwadj(float lpf)
{
#ifdef DO_STEERING
  bh.steering_bias -= lpf*bs.steering;
  bh.yaw_bias -= lpf*bs.yaw_rate;
#endif
  bh.fwd_accel_bias -= lpf*bs.fwd_accel;
#ifdef __BAL3__
  bh.right_accel_bias -= lpf*bs.right_accel;
#endif

  bh.bat_voltage_mult += lpf*(1.0/bs.bat_voltage - 1.0);
}

int bal_hwadj_validate(struct bal_hwadj *h)
{
#define R(X,L,H) if (h->X < L || h->X > H) return 0;
#ifdef DO_STEERING
  R(steering_bias, -2.0, 2.0);
  R(yaw_bias, -2.0, 2.0);
#endif
  R(fwd_accel_bias, -5.0, 5.0);
  R(right_accel_bias, -5.0, 5.0);
  R(bat_voltage_mult, 1.0, 5.0);
#undef R
  return 1;
}

int bal_config_validate(struct bal_config *c)
{
#define R(X,L,H) if (c->X < L || c->X > H) return 0;

  R(p_gain, 0.0, 100.0);
  R(d_gain, 0.0, 30.0);
  R(i_gain, 0.0, 100.0);
  R(hard_speed_lim, 0.01, 5.0);
  R(fwd_speed_lim, 0.0, 2.0);
  R(rev_speed_lim, 0.0, 2.0);
#undef R
  return 1;
}

int bal_drive_validate(struct bal_drive *c)
{
#define R(X,L,H) if (c->X < L || c->X > H) return 0;

  R(speed_targ, -0.5, 0.5);
  R(steering_targ, -1.0, 1.0);

#undef R
  return 1;
}


/*
  Reasonable parameter values. Tuners, this is what you're looking for.
  
  Actually, you should use the serial port interface and GUI application to adjust these
  on-line, then copy the values back here.

  Read the comments in balconf.h for intent, then look at the code to see what they
  actually do.
*/
void balance_configure(void)
{
#if defined(__SEGWELL2__)
  bc.p_gain = 6.0;
  bc.d_gain = 0.60;
  bc.i_gain = 2.40;
  bc.motor_torque_factor = 0.32;
#elif defined(__JORDANWAY__)
  bc.p_gain = 6.0;
  bc.d_gain = 0.45;
  bc.i_gain = 3.90;
  bc.motor_torque_factor = 0.55;
#elif defined(__ZOOMBOARD__)
  bc.p_gain = 2.5;
  bc.d_gain = 0.13;
  bc.i_gain = 3.0;
  bc.motor_torque_factor = 1.0;
#elif defined(__UNICYCLE2__)
  bc.p_gain = 3.2;
  bc.d_gain = 0.10;
  bc.i_gain = 0.0;
  bc.motor_torque_factor = 0.70;
  bc.fwd_accel_coupling = 0.6;
#else
#error "No HW"
#endif

#ifdef DO_STEERING
  bc.yaw_steer_gain = 0.05;
  bc.yaw_steer_speed_thresh = 0.1;
#endif

#if defined(__SEGWELL2__)
  bc.hard_speed_lim = 0.99;
  bc.fwd_speed_lim = 0.75;
  bc.rev_speed_lim = 0.60;
  bc.beep_speed_lim = 0.88;
  bc.fwd_accel_coupling = 0.3;
  bc.rev_stick_shake_speed_lim = 0.40;
#elif defined(__JORDANWAY__)
  bc.hard_speed_lim = 0.99;
  bc.fwd_speed_lim = 0.75;
  bc.rev_speed_lim = 0.60;
  bc.beep_speed_lim = 0.88;
  bc.rev_stick_shake_speed_lim = 0.40;
#elif defined(__ZOOMBOARD__)
  bc.hard_speed_lim = 0.99;
  bc.fwd_speed_lim = 0.70;
  bc.rev_speed_lim = 0.60;
  bc.beep_speed_lim = 0.80;
  bc.rev_stick_shake_speed_lim = 0.40;
#elif defined(__UNICYCLE2__)
  bc.hard_speed_lim = 0.99;
  bc.fwd_speed_lim = 0.75;
  bc.rev_speed_lim = 0.75;
  bc.beep_speed_lim = 0.88;
  bc.rev_stick_shake_speed_lim = 10.00;
#else
#error "No HW"
#endif

#ifdef DO_STEERING
  bc.steer_rate_num = 0.100;
  bc.steer_rate_den = 0.200;
  bc.yaw_target_mult = 7.0;
#endif

  bc.balance_torque_lim = 1.0;

  bc.fuse_alarm_thresh = 0.35; // 35 amps. We have 40 amp fuses

#if defined(__BAL3__) || defined(__BAL4__)
  bc.crossover_boost = 0.01;
#else
  bc.crossover_boost = 0.015;
#endif

  eeprom_read_block(&bh, 0, sizeof(bh));
  if (1 || (((uint8_t *)&bh)[0]==0xff && ((uint8_t *)&bh)[1]==0xff && ((uint8_t *)&bh)[2]==0xff  && ((uint8_t *)&bh)[3]==0xff) ||
      !bal_hwadj_validate(&bh)) {

    memset(&bh, 0, sizeof(bh));
    11de:	fa 01       	movw	r30, r20
    11e0:	11 92       	st	Z+, r1
    11e2:	8a 95       	dec	r24
    11e4:	e9 f7       	brne	.-6      	; 0x11e0 <__stack+0xe1>

#if defined(__SEGWELL2__)
    bh.steering_bias = +0.250;
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a0 e8       	ldi	r26, 0x80	; 128
    11ec:	be e3       	ldi	r27, 0x3E	; 62
    11ee:	80 93 21 05 	sts	0x0521, r24
    11f2:	90 93 22 05 	sts	0x0522, r25
    11f6:	a0 93 23 05 	sts	0x0523, r26
    11fa:	b0 93 24 05 	sts	0x0524, r27
    bh.yaw_bias = -0.035;
    11fe:	89 e2       	ldi	r24, 0x29	; 41
    1200:	9c e5       	ldi	r25, 0x5C	; 92
    1202:	af e0       	ldi	r26, 0x0F	; 15
    1204:	bd eb       	ldi	r27, 0xBD	; 189
    1206:	80 93 25 05 	sts	0x0525, r24
    120a:	90 93 26 05 	sts	0x0526, r25
    120e:	a0 93 27 05 	sts	0x0527, r26
    1212:	b0 93 28 05 	sts	0x0528, r27
    bh.fwd_accel_bias = 1.65;
    1216:	83 e3       	ldi	r24, 0x33	; 51
    1218:	93 e3       	ldi	r25, 0x33	; 51
    121a:	a3 ed       	ldi	r26, 0xD3	; 211
    121c:	bf e3       	ldi	r27, 0x3F	; 63
    121e:	80 93 29 05 	sts	0x0529, r24
    1222:	90 93 2a 05 	sts	0x052A, r25
    1226:	a0 93 2b 05 	sts	0x052B, r26
    122a:	b0 93 2c 05 	sts	0x052C, r27
    bh.right_accel_bias = 0.0;
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	a0 e0       	ldi	r26, 0x00	; 0
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	80 93 2d 05 	sts	0x052D, r24
    123a:	90 93 2e 05 	sts	0x052E, r25
    123e:	a0 93 2f 05 	sts	0x052F, r26
    1242:	b0 93 30 05 	sts	0x0530, r27
    bh.bat_voltage_mult = 1.5625;
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	a8 ec       	ldi	r26, 0xC8	; 200
    124c:	bf e3       	ldi	r27, 0x3F	; 63
    124e:	80 93 31 05 	sts	0x0531, r24
    1252:	90 93 32 05 	sts	0x0532, r25
    1256:	a0 93 33 05 	sts	0x0533, r26
    125a:	b0 93 34 05 	sts	0x0534, r27
    125e:	1f 91       	pop	r17
    1260:	0f 91       	pop	r16
    1262:	ff 90       	pop	r15
    1264:	ef 90       	pop	r14
    1266:	08 95       	ret

00001268 <balance_init>:
#elif defined(__JORDANWAY__)
    bh.steering_bias = -0.078;
    bh.yaw_bias = +0.0;
    bh.fwd_accel_bias = -1.07;    // more positive means more backwards
    bh.right_accel_bias = 0.0;
    bh.bat_voltage_mult = 2.22;
#elif defined(__ZOOMBOARD__)
    bh.fwd_accel_bias = -0.3;
    bh.right_accel_bias = 0.0;
    bh.bat_voltage_mult = 2.0;
#elif defined(__UNICYCLE2__)
    bh.fwd_accel_bias = 0.05;
    bh.right_accel_bias = 0.0;
    bh.bat_voltage_mult = 3.2;  // correct for 33v nominal battery voltage
#else
#error "No HW"
#endif
  }
}

static uint16_t last_balance_tcnt3;
static uint8_t last_balance_s0;

void balance_init(void)
{
  balance_configure();
    1268:	0e 94 0c 08 	call	0x1018	; 0x1018 <balance_configure>
  if (!bal_config_validate(&bc)) {
    126c:	83 e5       	ldi	r24, 0x53	; 83
    126e:	95 e0       	ldi	r25, 0x05	; 5
    1270:	0e 94 c7 05 	call	0xb8e	; 0xb8e <bal_config_validate>
    1274:	89 2b       	or	r24, r25
    1276:	41 f4       	brne	.+16     	; 0x1288 <balance_init+0x20>
    pkt_tx_start();
    1278:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <pkt_tx_start>
    pkt_tx_str_P(PSTR("!balance_validate fails\n"));
    127c:	8e e9       	ldi	r24, 0x9E	; 158
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 93 17 	call	0x2f26	; 0x2f26 <pkt_tx_str_P>
    pkt_tx_end();
    1284:	0e 94 51 18 	call	0x30a2	; 0x30a2 <pkt_tx_end>
  }

  last_balance_tcnt3=TCNT3;
    1288:	80 91 88 00 	lds	r24, 0x0088
    128c:	90 91 89 00 	lds	r25, 0x0089
    1290:	90 93 06 01 	sts	0x0106, r25
    1294:	80 93 05 01 	sts	0x0105, r24

  bs.mode = MODE_INITIAL;
    1298:	10 92 5b 06 	sts	0x065B, r1
  bs.balance_torque=0.0;
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	a0 e0       	ldi	r26, 0x00	; 0
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	80 93 1b 06 	sts	0x061B, r24
    12a8:	90 93 1c 06 	sts	0x061C, r25
    12ac:	a0 93 1d 06 	sts	0x061D, r26
    12b0:	b0 93 1e 06 	sts	0x061E, r27
#ifdef DO_DRIVE
  bs.drive_age = 1000.0;
#endif
#ifdef DO_BAT
  bs.bat_speed_lim = 0.5;
  bs.bat.fullloadvoltage = 0.7;
#endif

  set_motor_idle();
    12b4:	0e 94 71 04 	call	0x8e2	; 0x8e2 <set_motor_idle>
    12b8:	ac 98       	cbi	0x15, 4	; 21
    12ba:	08 95       	ret

000012bc <set_motors>:
    12bc:	5f 92       	push	r5
    12be:	6f 92       	push	r6
    12c0:	7f 92       	push	r7
    12c2:	8f 92       	push	r8
    12c4:	9f 92       	push	r9
    12c6:	af 92       	push	r10
    12c8:	bf 92       	push	r11
    12ca:	cf 92       	push	r12
    12cc:	df 92       	push	r13
    12ce:	ef 92       	push	r14
    12d0:	ff 92       	push	r15
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	5b 01       	movw	r10, r22
    12dc:	6c 01       	movw	r12, r24
    12de:	39 01       	movw	r6, r18
    12e0:	4a 01       	movw	r8, r20
    12e2:	80 91 04 01 	lds	r24, 0x0104
    12e6:	8f 5f       	subi	r24, 0xFF	; 255
    12e8:	80 93 04 01 	sts	0x0104, r24
    12ec:	55 24       	eor	r5, r5
    12ee:	88 23       	and	r24, r24
    12f0:	11 f4       	brne	.+4      	; 0x12f6 <set_motors+0x3a>
    12f2:	61 e0       	ldi	r22, 0x01	; 1
    12f4:	56 2e       	mov	r5, r22
    12f6:	0f 2e       	mov	r0, r31
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	ef 2e       	mov	r14, r31
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	ff 2e       	mov	r15, r31
    1300:	f0 e8       	ldi	r31, 0x80	; 128
    1302:	0f 2f       	mov	r16, r31
    1304:	ff e3       	ldi	r31, 0x3F	; 63
    1306:	1f 2f       	mov	r17, r31
    1308:	f0 2d       	mov	r31, r0
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e8       	ldi	r20, 0x80	; 128
    1310:	5f eb       	ldi	r21, 0xBF	; 191
    1312:	c6 01       	movw	r24, r12
    1314:	b5 01       	movw	r22, r10
    1316:	0e 94 8b 03 	call	0x716	; 0x716 <flim>
    131a:	23 e3       	ldi	r18, 0x33	; 51
    131c:	33 ef       	ldi	r19, 0xF3	; 243
    131e:	4f ef       	ldi	r20, 0xFF	; 255
    1320:	53 e4       	ldi	r21, 0x43	; 67
    1322:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1326:	0e 94 35 1c 	call	0x386a	; 0x386a <__fixsfsi>
    132a:	eb 01       	movw	r28, r22
    132c:	8e ef       	ldi	r24, 0xFE	; 254
    132e:	c4 30       	cpi	r28, 0x04	; 4
    1330:	d8 07       	cpc	r29, r24
    1332:	0c f0       	brlt	.+2      	; 0x1336 <set_motors+0x7a>
    1334:	63 c0       	rjmp	.+198    	; 0x13fc <set_motors+0x140>
    1336:	c4 e0       	ldi	r28, 0x04	; 4
    1338:	de ef       	ldi	r29, 0xFE	; 254
    133a:	c4 01       	movw	r24, r8
    133c:	b3 01       	movw	r22, r6
    133e:	90 58       	subi	r25, 0x80	; 128
    1340:	0f 2e       	mov	r0, r31
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	ef 2e       	mov	r14, r31
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	ff 2e       	mov	r15, r31
    134a:	f0 e8       	ldi	r31, 0x80	; 128
    134c:	0f 2f       	mov	r16, r31
    134e:	ff e3       	ldi	r31, 0x3F	; 63
    1350:	1f 2f       	mov	r17, r31
    1352:	f0 2d       	mov	r31, r0
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e8       	ldi	r20, 0x80	; 128
    135a:	5f eb       	ldi	r21, 0xBF	; 191
    135c:	0e 94 8b 03 	call	0x716	; 0x716 <flim>
    1360:	23 e3       	ldi	r18, 0x33	; 51
    1362:	33 ef       	ldi	r19, 0xF3	; 243
    1364:	4f ef       	ldi	r20, 0xFF	; 255
    1366:	53 e4       	ldi	r21, 0x43	; 67
    1368:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    136c:	0e 94 35 1c 	call	0x386a	; 0x386a <__fixsfsi>
    1370:	7b 01       	movw	r14, r22
    1372:	84 e0       	ldi	r24, 0x04	; 4
    1374:	e8 16       	cp	r14, r24
    1376:	8e ef       	ldi	r24, 0xFE	; 254
    1378:	f8 06       	cpc	r15, r24
    137a:	f4 f4       	brge	.+60     	; 0x13b8 <set_motors+0xfc>
    137c:	54 e0       	ldi	r21, 0x04	; 4
    137e:	e5 2e       	mov	r14, r21
    1380:	5e ef       	ldi	r21, 0xFE	; 254
    1382:	f5 2e       	mov	r15, r21
    1384:	f8 94       	cli
    1386:	d7 fd       	sbrc	r29, 7
    1388:	23 c0       	rjmp	.+70     	; 0x13d0 <set_motors+0x114>
    138a:	a9 98       	cbi	0x15, 1	; 21
    138c:	ad 98       	cbi	0x15, 5	; 21
    138e:	a8 9a       	sbi	0x15, 0	; 21
    1390:	d9 bd       	out	0x29, r29	; 41
    1392:	c8 bd       	out	0x28, r28	; 40
    1394:	55 20       	and	r5, r5
    1396:	09 f0       	breq	.+2      	; 0x139a <set_motors+0xde>
    1398:	45 c0       	rjmp	.+138    	; 0x1424 <set_motors+0x168>
    139a:	f7 fc       	sbrc	r15, 7
    139c:	50 c0       	rjmp	.+160    	; 0x143e <set_motors+0x182>
    139e:	ab 98       	cbi	0x15, 3	; 21
    13a0:	ae 98       	cbi	0x15, 6	; 21
    13a2:	aa 9a       	sbi	0x15, 2	; 21
    13a4:	0f ef       	ldi	r16, 0xFF	; 255
    13a6:	11 e0       	ldi	r17, 0x01	; 1
    13a8:	0e 19       	sub	r16, r14
    13aa:	1f 09       	sbc	r17, r15
    13ac:	1b bd       	out	0x2b, r17	; 43
    13ae:	0a bd       	out	0x2a, r16	; 42
    13b0:	55 20       	and	r5, r5
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <set_motors+0xfa>
    13b4:	59 c0       	rjmp	.+178    	; 0x1468 <set_motors+0x1ac>
    13b6:	2a c0       	rjmp	.+84     	; 0x140c <set_motors+0x150>
    13b8:	8d ef       	ldi	r24, 0xFD	; 253
    13ba:	e8 16       	cp	r14, r24
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	f8 06       	cpc	r15, r24
    13c0:	0c f3       	brlt	.-62     	; 0x1384 <set_motors+0xc8>
    13c2:	4c ef       	ldi	r20, 0xFC	; 252
    13c4:	e4 2e       	mov	r14, r20
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	f4 2e       	mov	r15, r20
    13ca:	f8 94       	cli
    13cc:	d7 ff       	sbrs	r29, 7
    13ce:	dd cf       	rjmp	.-70     	; 0x138a <set_motors+0xce>
    13d0:	a8 98       	cbi	0x15, 0	; 21
    13d2:	ad 98       	cbi	0x15, 5	; 21
    13d4:	a9 9a       	sbi	0x15, 1	; 21
    13d6:	d0 95       	com	r29
    13d8:	c1 95       	neg	r28
    13da:	df 4f       	sbci	r29, 0xFF	; 255
    13dc:	d9 bd       	out	0x29, r29	; 41
    13de:	c8 bd       	out	0x28, r28	; 40
    13e0:	55 20       	and	r5, r5
    13e2:	d9 f2       	breq	.-74     	; 0x139a <set_motors+0xde>
    13e4:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <pkt_tx_start>
    13e8:	83 ec       	ldi	r24, 0xC3	; 195
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 93 17 	call	0x2f26	; 0x2f26 <pkt_tx_str_P>
    13f0:	ce 01       	movw	r24, r28
    13f2:	0e 94 17 18 	call	0x302e	; 0x302e <pkt_tx_uint16_hex>
    13f6:	0e 94 51 18 	call	0x30a2	; 0x30a2 <pkt_tx_end>
    13fa:	cf cf       	rjmp	.-98     	; 0x139a <set_motors+0xde>
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	cd 3f       	cpi	r28, 0xFD	; 253
    1400:	d8 07       	cpc	r29, r24
    1402:	0c f4       	brge	.+2      	; 0x1406 <set_motors+0x14a>
    1404:	9a cf       	rjmp	.-204    	; 0x133a <set_motors+0x7e>
    1406:	cc ef       	ldi	r28, 0xFC	; 252
    1408:	d1 e0       	ldi	r29, 0x01	; 1
    140a:	97 cf       	rjmp	.-210    	; 0x133a <set_motors+0x7e>
    140c:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <pkt_tx_start>
    1410:	87 eb       	ldi	r24, 0xB7	; 183
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	0e 94 93 17 	call	0x2f26	; 0x2f26 <pkt_tx_str_P>
    1418:	c8 01       	movw	r24, r16
    141a:	0e 94 17 18 	call	0x302e	; 0x302e <pkt_tx_uint16_hex>
    141e:	0e 94 51 18 	call	0x30a2	; 0x30a2 <pkt_tx_end>
    1422:	22 c0       	rjmp	.+68     	; 0x1468 <set_motors+0x1ac>
    1424:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <pkt_tx_start>
    1428:	8f eb       	ldi	r24, 0xBF	; 191
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	0e 94 93 17 	call	0x2f26	; 0x2f26 <pkt_tx_str_P>
    1430:	ce 01       	movw	r24, r28
    1432:	0e 94 17 18 	call	0x302e	; 0x302e <pkt_tx_uint16_hex>
    1436:	0e 94 51 18 	call	0x30a2	; 0x30a2 <pkt_tx_end>
    143a:	f7 fe       	sbrs	r15, 7
    143c:	b0 cf       	rjmp	.-160    	; 0x139e <set_motors+0xe2>
    143e:	aa 98       	cbi	0x15, 2	; 21
    1440:	ae 98       	cbi	0x15, 6	; 21
    1442:	ab 9a       	sbi	0x15, 3	; 21
    1444:	e7 01       	movw	r28, r14
    1446:	c1 50       	subi	r28, 0x01	; 1
    1448:	de 4f       	sbci	r29, 0xFE	; 254
    144a:	db bd       	out	0x2b, r29	; 43
    144c:	ca bd       	out	0x2a, r28	; 42
    144e:	55 20       	and	r5, r5
    1450:	59 f0       	breq	.+22     	; 0x1468 <set_motors+0x1ac>
    1452:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <pkt_tx_start>
    1456:	8b eb       	ldi	r24, 0xBB	; 187
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0e 94 93 17 	call	0x2f26	; 0x2f26 <pkt_tx_str_P>
    145e:	ce 01       	movw	r24, r28
    1460:	0e 94 17 18 	call	0x302e	; 0x302e <pkt_tx_uint16_hex>
    1464:	0e 94 51 18 	call	0x30a2	; 0x30a2 <pkt_tx_end>
    1468:	78 94       	sei
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	1f 91       	pop	r17
    1470:	0f 91       	pop	r16
    1472:	ff 90       	pop	r15
    1474:	ef 90       	pop	r14
    1476:	df 90       	pop	r13
    1478:	cf 90       	pop	r12
    147a:	bf 90       	pop	r11
    147c:	af 90       	pop	r10
    147e:	9f 90       	pop	r9
    1480:	8f 90       	pop	r8
    1482:	7f 90       	pop	r7
    1484:	6f 90       	pop	r6
    1486:	5f 90       	pop	r5
    1488:	08 95       	ret

0000148a <balance>:
  set0_accel_st();
}

void do_crossover(float *x, float boost, float factor)
{
  if (*x>=0.0) {
    *x += fmin(boost, *x * factor);
  } else {
    *x -= fmin(boost, - *x * factor);
  }
}


/*
  Speed : 

  Motors: 24 volts is 240 RPM. With a 20" diameter wheel, that's 14.3 mph

  bat_voltage is volts/50

  MotorVoltage = bat_voltage*50 * PWM

  MotorVoltage = 50/1.5625 * cur_speed_est
  MotorVoltage = 32.0 * cur_speed_est

  This is the speed at which it starts tilting, but it can go 0.08
  beyond before integral limiting kicks in.

  speed_lim=0.75 => 24.0 volts => 14.3 mph
  speed_lim=0.7 => 13.3 mph (14.9 at integral limit)
  speed_lim=0.6 => 11.5 mph (13.0 at integral limit)
  speed_lim=0.4 => 7.6 mph


  Assume CG is 3 feet above axle. So a angrate of 1 (radians/sec) corresponds to a speed difference of
  2.04 mph, which corresponds to a cmd change of 0.107

*/

#ifdef DO_MISSION_LOG
bal_mission_log_ent mission_accum;
float time_since_mission_save;
#endif

uint16_t samples[ADCNO_END];
uint8_t last_samplecount[ADCNO_END];
float time_since_bat_update;

uint8_t bal_tickno;            // Counter used to time stick shake oscillator and other things

void balance(void)
{
    148a:	2f 92       	push	r2
    148c:	3f 92       	push	r3
    148e:	4f 92       	push	r4
    1490:	5f 92       	push	r5
    1492:	6f 92       	push	r6
    1494:	7f 92       	push	r7
    1496:	8f 92       	push	r8
    1498:	9f 92       	push	r9
    149a:	af 92       	push	r10
    149c:	bf 92       	push	r11
    149e:	cf 92       	push	r12
    14a0:	df 92       	push	r13
    14a2:	ef 92       	push	r14
    14a4:	ff 92       	push	r15
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	65 97       	sbiw	r28, 0x15	; 21
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61

  bal_tickno++;
    14be:	80 91 0d 05 	lds	r24, 0x050D
    14c2:	8f 5f       	subi	r24, 0xFF	; 255
    14c4:	80 93 0d 05 	sts	0x050D, r24
  {
#if defined(DO_ENCODERS)
    uint32_t lastenc1=bs.enc1_pos;
    uint32_t lastenc2=bs.enc2_pos;
#endif

    // interval = time in seconds since we last updated things.
    uint16_t cur_tcnt3 = TCNT3;
    14c8:	20 91 88 00 	lds	r18, 0x0088
    14cc:	30 91 89 00 	lds	r19, 0x0089
    
#if defined(DO_ENCODERS)
    // Since we're taking derivatives, do this as close as possible to the time sample
    read_encoders(&bs.enc1_pos, &bs.enc2_pos);
#endif

    uint16_t ticks = cur_tcnt3 - last_balance_tcnt3;
    14d0:	80 91 05 01 	lds	r24, 0x0105
    14d4:	90 91 06 01 	lds	r25, 0x0106
    14d8:	89 01       	movw	r16, r18
    14da:	08 1b       	sub	r16, r24
    14dc:	19 0b       	sbc	r17, r25
    last_balance_tcnt3 = cur_tcnt3;
    14de:	30 93 06 01 	sts	0x0106, r19
    14e2:	20 93 05 01 	sts	0x0105, r18

    // It's normally 3 mS. In case of a hiccup, we don't want to make too big a correction
    bs.interval = fmax(0.001, fmin(0.010, timer3_seconds_conv * (float)ticks));
    14e6:	b8 01       	movw	r22, r16
    14e8:	88 27       	eor	r24, r24
    14ea:	77 fd       	sbrc	r23, 7
    14ec:	80 95       	com	r24
    14ee:	98 2f       	mov	r25, r24
    14f0:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__floatsisf>
    14f4:	17 fd       	sbrc	r17, 7
    14f6:	68 c4       	rjmp	.+2256   	; 0x1dc8 <balance+0x93e>
    14f8:	20 91 09 05 	lds	r18, 0x0509
    14fc:	30 91 0a 05 	lds	r19, 0x050A
    1500:	40 91 0b 05 	lds	r20, 0x050B
    1504:	50 91 0c 05 	lds	r21, 0x050C
    1508:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    150c:	9b 01       	movw	r18, r22
    150e:	ac 01       	movw	r20, r24
    1510:	6a e0       	ldi	r22, 0x0A	; 10
    1512:	77 ed       	ldi	r23, 0xD7	; 215
    1514:	83 e2       	ldi	r24, 0x23	; 35
    1516:	9c e3       	ldi	r25, 0x3C	; 60
    1518:	0e 94 6e 03 	call	0x6dc	; 0x6dc <fmin>
    151c:	9b 01       	movw	r18, r22
    151e:	ac 01       	movw	r20, r24
    1520:	6f e6       	ldi	r22, 0x6F	; 111
    1522:	72 e1       	ldi	r23, 0x12	; 18
    1524:	83 e8       	ldi	r24, 0x83	; 131
    1526:	9a e3       	ldi	r25, 0x3A	; 58
    1528:	0e 94 51 03 	call	0x6a2	; 0x6a2 <fmax>
    152c:	4b 01       	movw	r8, r22
    152e:	5c 01       	movw	r10, r24
    1530:	60 93 a7 05 	sts	0x05A7, r22
    1534:	70 93 a8 05 	sts	0x05A8, r23
    1538:	80 93 a9 05 	sts	0x05A9, r24
    153c:	90 93 aa 05 	sts	0x05AA, r25


#if defined(DO_ENCODERS)
    bs.enc1_vel = (bs.enc1_pos - lastenc1) / bs.interval;
    bs.enc2_vel = (bs.enc2_pos - lastenc2) / bs.interval;
#endif
  }

  /* 
     Accumulate real time. This will lose precision after about 4 hours of operation. It's
     currently only used for timestamping log packets, but if we want to log for a long
     time maybe we should use an integer counter or take it modulo 1000 or something.
  */
  bs.realtime += bs.interval; 
    1540:	20 91 a3 05 	lds	r18, 0x05A3
    1544:	30 91 a4 05 	lds	r19, 0x05A4
    1548:	40 91 a5 05 	lds	r20, 0x05A5
    154c:	50 91 a6 05 	lds	r21, 0x05A6
    1550:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    1554:	6a 8b       	std	Y+18, r22	; 0x12
    1556:	7b 8b       	std	Y+19, r23	; 0x13
    1558:	8c 8b       	std	Y+20, r24	; 0x14
    155a:	9d 8b       	std	Y+21, r25	; 0x15
    155c:	60 93 a3 05 	sts	0x05A3, r22
    1560:	70 93 a4 05 	sts	0x05A4, r23
    1564:	80 93 a5 05 	sts	0x05A5, r24
    1568:	90 93 a6 05 	sts	0x05A6, r25

  /*
    Convert the ADC inputs to relevant variables. If you wire up your
    controller differently, these will have to change.
  */

#if defined(__BAL2__)
  bs.bat_voltage = samples[ADCNO_BAT_VOLTAGE]*sample_conv_unipolar * bh.bat_voltage_mult;
    156c:	00 91 35 05 	lds	r16, 0x0535
    1570:	10 91 36 05 	lds	r17, 0x0536
    1574:	b8 01       	movw	r22, r16
    1576:	88 27       	eor	r24, r24
    1578:	77 fd       	sbrc	r23, 7
    157a:	80 95       	com	r24
    157c:	98 2f       	mov	r25, r24
    157e:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__floatsisf>
    1582:	17 fd       	sbrc	r17, 7
    1584:	2f c4       	rjmp	.+2142   	; 0x1de4 <balance+0x95a>
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 e0       	ldi	r20, 0x00	; 0
    158c:	59 e3       	ldi	r21, 0x39	; 57
    158e:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1592:	20 91 31 05 	lds	r18, 0x0531
    1596:	30 91 32 05 	lds	r19, 0x0532
    159a:	40 91 33 05 	lds	r20, 0x0533
    159e:	50 91 34 05 	lds	r21, 0x0534
    15a2:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    15a6:	60 93 ab 05 	sts	0x05AB, r22
    15aa:	70 93 ac 05 	sts	0x05AC, r23
    15ae:	80 93 ad 05 	sts	0x05AD, r24
    15b2:	90 93 ae 05 	sts	0x05AE, r25
  bs.pitch_rate = (samples[ADCNO_PITCH_RATE]*sample_conv_bipolar - 1.0) * -2.1817; // convert to 20 mv/deg/sec to radians/sec
    15b6:	00 91 37 05 	lds	r16, 0x0537
    15ba:	10 91 38 05 	lds	r17, 0x0538
    15be:	b8 01       	movw	r22, r16
    15c0:	88 27       	eor	r24, r24
    15c2:	77 fd       	sbrc	r23, 7
    15c4:	80 95       	com	r24
    15c6:	98 2f       	mov	r25, r24
    15c8:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__floatsisf>
    15cc:	17 fd       	sbrc	r17, 7
    15ce:	03 c4       	rjmp	.+2054   	; 0x1dd6 <balance+0x94c>
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e8       	ldi	r20, 0x80	; 128
    15d6:	59 e3       	ldi	r21, 0x39	; 57
    15d8:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e8       	ldi	r20, 0x80	; 128
    15e2:	5f e3       	ldi	r21, 0x3F	; 63
    15e4:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
    15e8:	29 ef       	ldi	r18, 0xF9	; 249
    15ea:	30 ea       	ldi	r19, 0xA0	; 160
    15ec:	4b e0       	ldi	r20, 0x0B	; 11
    15ee:	50 ec       	ldi	r21, 0xC0	; 192
    15f0:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    15f4:	2b 01       	movw	r4, r22
    15f6:	3c 01       	movw	r6, r24
    15f8:	60 93 af 05 	sts	0x05AF, r22
    15fc:	70 93 b0 05 	sts	0x05B0, r23
    1600:	80 93 b1 05 	sts	0x05B1, r24
    1604:	90 93 b2 05 	sts	0x05B2, r25
  bs.steering = (samples[ADCNO_STEERING]*sample_conv_bipolar - 1.0) * -3.75 + bh.steering_bias;
    1608:	00 91 3f 05 	lds	r16, 0x053F
    160c:	10 91 40 05 	lds	r17, 0x0540
    1610:	b8 01       	movw	r22, r16
    1612:	88 27       	eor	r24, r24
    1614:	77 fd       	sbrc	r23, 7
    1616:	80 95       	com	r24
    1618:	98 2f       	mov	r25, r24
    161a:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__floatsisf>
    161e:	17 fd       	sbrc	r17, 7
    1620:	19 c4       	rjmp	.+2098   	; 0x1e54 <balance+0x9ca>
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e8       	ldi	r20, 0x80	; 128
    1628:	59 e3       	ldi	r21, 0x39	; 57
    162a:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e8       	ldi	r20, 0x80	; 128
    1634:	5f e3       	ldi	r21, 0x3F	; 63
    1636:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e7       	ldi	r20, 0x70	; 112
    1640:	50 ec       	ldi	r21, 0xC0	; 192
    1642:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1646:	20 91 21 05 	lds	r18, 0x0521
    164a:	30 91 22 05 	lds	r19, 0x0522
    164e:	40 91 23 05 	lds	r20, 0x0523
    1652:	50 91 24 05 	lds	r21, 0x0524
    1656:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    165a:	60 93 bb 05 	sts	0x05BB, r22
    165e:	70 93 bc 05 	sts	0x05BC, r23
    1662:	80 93 bd 05 	sts	0x05BD, r24
    1666:	90 93 be 05 	sts	0x05BE, r25
  bs.yaw_rate = (samples[ADCNO_YAW_RATE]*sample_conv_bipolar - 1.0) * 2.1817 + bh.yaw_bias;  // convert to radians/sec
    166a:	00 91 3d 05 	lds	r16, 0x053D
    166e:	10 91 3e 05 	lds	r17, 0x053E
    1672:	b8 01       	movw	r22, r16
    1674:	88 27       	eor	r24, r24
    1676:	77 fd       	sbrc	r23, 7
    1678:	80 95       	com	r24
    167a:	98 2f       	mov	r25, r24
    167c:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__floatsisf>
    1680:	17 fd       	sbrc	r17, 7
    1682:	e1 c3       	rjmp	.+1986   	; 0x1e46 <balance+0x9bc>
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e8       	ldi	r20, 0x80	; 128
    168a:	59 e3       	ldi	r21, 0x39	; 57
    168c:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e8       	ldi	r20, 0x80	; 128
    1696:	5f e3       	ldi	r21, 0x3F	; 63
    1698:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
    169c:	29 ef       	ldi	r18, 0xF9	; 249
    169e:	30 ea       	ldi	r19, 0xA0	; 160
    16a0:	4b e0       	ldi	r20, 0x0B	; 11
    16a2:	50 e4       	ldi	r21, 0x40	; 64
    16a4:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    16a8:	20 91 25 05 	lds	r18, 0x0525
    16ac:	30 91 26 05 	lds	r19, 0x0526
    16b0:	40 91 27 05 	lds	r20, 0x0527
    16b4:	50 91 28 05 	lds	r21, 0x0528
    16b8:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    16bc:	60 93 bf 05 	sts	0x05BF, r22
    16c0:	70 93 c0 05 	sts	0x05C0, r23
    16c4:	80 93 c1 05 	sts	0x05C1, r24
    16c8:	90 93 c2 05 	sts	0x05C2, r25
  bs.knob1 = samples[ADCNO_KNOB1]*sample_conv_unipolar;
    16cc:	00 91 41 05 	lds	r16, 0x0541
    16d0:	10 91 42 05 	lds	r17, 0x0542
    16d4:	b8 01       	movw	r22, r16
    16d6:	88 27       	eor	r24, r24
    16d8:	77 fd       	sbrc	r23, 7
    16da:	80 95       	com	r24
    16dc:	98 2f       	mov	r25, r24
    16de:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__floatsisf>
    16e2:	17 fd       	sbrc	r17, 7
    16e4:	a9 c3       	rjmp	.+1874   	; 0x1e38 <balance+0x9ae>
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	40 e0       	ldi	r20, 0x00	; 0
    16ec:	59 e3       	ldi	r21, 0x39	; 57
    16ee:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    16f2:	60 93 c3 05 	sts	0x05C3, r22
    16f6:	70 93 c4 05 	sts	0x05C4, r23
    16fa:	80 93 c5 05 	sts	0x05C5, r24
    16fe:	90 93 c6 05 	sts	0x05C6, r25
  bs.lmis = (samples[ADCNO_LMIS]*sample_conv_bipolar - 1.0) * L_MOTOR_POLARITY(-1.875); // Units are 100A
    1702:	00 91 47 05 	lds	r16, 0x0547
    1706:	10 91 48 05 	lds	r17, 0x0548
    170a:	b8 01       	movw	r22, r16
    170c:	88 27       	eor	r24, r24
    170e:	77 fd       	sbrc	r23, 7
    1710:	80 95       	com	r24
    1712:	98 2f       	mov	r25, r24
    1714:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__floatsisf>
    1718:	17 fd       	sbrc	r17, 7
    171a:	87 c3       	rjmp	.+1806   	; 0x1e2a <balance+0x9a0>
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e8       	ldi	r20, 0x80	; 128
    1722:	59 e3       	ldi	r21, 0x39	; 57
    1724:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e8       	ldi	r20, 0x80	; 128
    172e:	5f e3       	ldi	r21, 0x3F	; 63
    1730:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	40 ef       	ldi	r20, 0xF0	; 240
    173a:	5f eb       	ldi	r21, 0xBF	; 191
    173c:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1740:	60 93 cf 05 	sts	0x05CF, r22
    1744:	70 93 d0 05 	sts	0x05D0, r23
    1748:	80 93 d1 05 	sts	0x05D1, r24
    174c:	90 93 d2 05 	sts	0x05D2, r25
  bs.rmis = (samples[ADCNO_RMIS]*sample_conv_bipolar - 1.0) * R_MOTOR_POLARITY(-1.875);
    1750:	00 91 49 05 	lds	r16, 0x0549
    1754:	10 91 4a 05 	lds	r17, 0x054A
    1758:	b8 01       	movw	r22, r16
    175a:	88 27       	eor	r24, r24
    175c:	77 fd       	sbrc	r23, 7
    175e:	80 95       	com	r24
    1760:	98 2f       	mov	r25, r24
    1762:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__floatsisf>
    1766:	17 fd       	sbrc	r17, 7
    1768:	59 c3       	rjmp	.+1714   	; 0x1e1c <balance+0x992>
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e8       	ldi	r20, 0x80	; 128
    1770:	59 e3       	ldi	r21, 0x39	; 57
    1772:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	40 e8       	ldi	r20, 0x80	; 128
    177c:	5f e3       	ldi	r21, 0x3F	; 63
    177e:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	40 ef       	ldi	r20, 0xF0	; 240
    1788:	5f e3       	ldi	r21, 0x3F	; 63
    178a:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    178e:	60 93 d3 05 	sts	0x05D3, r22
    1792:	70 93 d4 05 	sts	0x05D4, r23
    1796:	80 93 d5 05 	sts	0x05D5, r24
    179a:	90 93 d6 05 	sts	0x05D6, r25
  bs.b1is = (samples[ADCNO_B1IS]*sample_conv_bipolar - 1.0) * 1.875;
    179e:	00 91 4f 05 	lds	r16, 0x054F
    17a2:	10 91 50 05 	lds	r17, 0x0550
    17a6:	b8 01       	movw	r22, r16
    17a8:	88 27       	eor	r24, r24
    17aa:	77 fd       	sbrc	r23, 7
    17ac:	80 95       	com	r24
    17ae:	98 2f       	mov	r25, r24
    17b0:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__floatsisf>
    17b4:	17 fd       	sbrc	r17, 7
    17b6:	2b c3       	rjmp	.+1622   	; 0x1e0e <balance+0x984>
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e8       	ldi	r20, 0x80	; 128
    17be:	59 e3       	ldi	r21, 0x39	; 57
    17c0:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e8       	ldi	r20, 0x80	; 128
    17ca:	5f e3       	ldi	r21, 0x3F	; 63
    17cc:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 ef       	ldi	r20, 0xF0	; 240
    17d6:	5f e3       	ldi	r21, 0x3F	; 63
    17d8:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    17dc:	6b 01       	movw	r12, r22
    17de:	7c 01       	movw	r14, r24
    17e0:	60 93 db 05 	sts	0x05DB, r22
    17e4:	70 93 dc 05 	sts	0x05DC, r23
    17e8:	80 93 dd 05 	sts	0x05DD, r24
    17ec:	90 93 de 05 	sts	0x05DE, r25
  bs.b2is = (samples[ADCNO_B2IS]*sample_conv_bipolar - 1.0) * 1.875;
    17f0:	00 91 51 05 	lds	r16, 0x0551
    17f4:	10 91 52 05 	lds	r17, 0x0552
    17f8:	b8 01       	movw	r22, r16
    17fa:	88 27       	eor	r24, r24
    17fc:	77 fd       	sbrc	r23, 7
    17fe:	80 95       	com	r24
    1800:	98 2f       	mov	r25, r24
    1802:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__floatsisf>
    1806:	17 fd       	sbrc	r17, 7
    1808:	fb c2       	rjmp	.+1526   	; 0x1e00 <balance+0x976>
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e8       	ldi	r20, 0x80	; 128
    1810:	59 e3       	ldi	r21, 0x39	; 57
    1812:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e8       	ldi	r20, 0x80	; 128
    181c:	5f e3       	ldi	r21, 0x3F	; 63
    181e:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 ef       	ldi	r20, 0xF0	; 240
    1828:	5f e3       	ldi	r21, 0x3F	; 63
    182a:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    182e:	9b 01       	movw	r18, r22
    1830:	ac 01       	movw	r20, r24
    1832:	60 93 df 05 	sts	0x05DF, r22
    1836:	70 93 e0 05 	sts	0x05E0, r23
    183a:	80 93 e1 05 	sts	0x05E1, r24
    183e:	90 93 e2 05 	sts	0x05E2, r25
  bs.batis = bs.b1is + bs.b2is;
    1842:	c7 01       	movw	r24, r14
    1844:	b6 01       	movw	r22, r12
    1846:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    184a:	60 93 d7 05 	sts	0x05D7, r22
    184e:	70 93 d8 05 	sts	0x05D8, r23
    1852:	80 93 d9 05 	sts	0x05D9, r24
    1856:	90 93 da 05 	sts	0x05DA, r25
  bs.fwd_accel = ((samples[ADCNO_FWD_ACCEL]*sample_conv_bipolar - 1.0) * -10.0 + bh.fwd_accel_bias);  // convert from 250 mv/G
    185a:	00 91 39 05 	lds	r16, 0x0539
    185e:	10 91 3a 05 	lds	r17, 0x053A
    1862:	b8 01       	movw	r22, r16
    1864:	88 27       	eor	r24, r24
    1866:	77 fd       	sbrc	r23, 7
    1868:	80 95       	com	r24
    186a:	98 2f       	mov	r25, r24
    186c:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__floatsisf>
    1870:	17 fd       	sbrc	r17, 7
    1872:	bf c2       	rjmp	.+1406   	; 0x1df2 <balance+0x968>
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e8       	ldi	r20, 0x80	; 128
    187a:	59 e3       	ldi	r21, 0x39	; 57
    187c:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e8       	ldi	r20, 0x80	; 128
    1886:	5f e3       	ldi	r21, 0x3F	; 63
    1888:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e2       	ldi	r20, 0x20	; 32
    1892:	51 ec       	ldi	r21, 0xC1	; 193
    1894:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1898:	20 91 29 05 	lds	r18, 0x0529
    189c:	30 91 2a 05 	lds	r19, 0x052A
    18a0:	40 91 2b 05 	lds	r20, 0x052B
    18a4:	50 91 2c 05 	lds	r21, 0x052C
    18a8:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    18ac:	7b 01       	movw	r14, r22
    18ae:	8c 01       	movw	r16, r24
    18b0:	60 93 b3 05 	sts	0x05B3, r22
    18b4:	70 93 b4 05 	sts	0x05B4, r23
    18b8:	80 93 b5 05 	sts	0x05B5, r24
    18bc:	90 93 b6 05 	sts	0x05B6, r25

#elif defined(__BAL3__)
  bs.bat_voltage = samples[ADCNO_BAT_VOLTAGE]*sample_conv_unipolar * bh.bat_voltage_mult;
  bs.pitch_rate = (samples[ADCNO_PITCH_RATE]*sample_conv_bipolar - 1.0) * -2.1817; // convert to 20 mv/deg/sec to radians/sec
#ifdef DO_STEERING
#ifdef __JORDANWAY__
  bs.steering = (samples[ADCNO_STEERING]*sample_conv_bipolar - 1.0) * +1.5 + bh.steering_bias;
#else
  bs.steering = (samples[ADCNO_STEERING]*sample_conv_bipolar - 1.0) * -1.5 + bh.steering_bias;
#endif
#ifdef __JORDANWAY__
  bs.yaw_rate = (samples[ADCNO_YAW_RATE]*sample_conv_bipolar - 1.0) * -2.1817 + bh.yaw_bias;  // convert to radians/sec
#else
  bs.yaw_rate = (samples[ADCNO_YAW_RATE]*sample_conv_bipolar - 1.0) * 2.1817 + bh.yaw_bias;  // convert to radians/sec
#endif
#endif
  bs.knob1 = samples[ADCNO_KNOB1]*sample_conv_unipolar;
  bs.knob2 = samples[ADCNO_KNOB2]*sample_conv_unipolar;
  bs.knob3 = samples[ADCNO_KNOB3]*sample_conv_unipolar;
  bs.lmis = (samples[ADCNO_LMIS]*sample_conv_bipolar - 1.0) * 0.625; // Units are 100A
  bs.rmis = (samples[ADCNO_RMIS]*sample_conv_bipolar - 1.0) * 0.625;
  bs.batis = (samples[ADCNO_BATIS]*sample_conv_bipolar - 1.0) * 0.625;
  bs.roll_rate = (samples[ADCNO_RIGHT_ACCEL]*sample_conv_bipolar - 1.0) * 2.1817;

  // ADXL0311 accelerometer, with a gain of 3.
  // Convert from 312*3 mv/G into Gs
  bs.fwd_accel = (samples[ADCNO_FWD_ACCEL]*sample_conv_bipolar - 1.0) * 2.67 + bh.fwd_accel_bias;  
  bs.right_accel = (samples[ADCNO_RIGHT_ACCEL]*sample_conv_bipolar - 1.0) * 2.67 + bh.right_accel_bias;

  // LM61 temp sensors report 600 mv + 10 mv/C
  // Convert so 0=0C, 1=1C
  if ((bal_tickno & 0x0f)==0) {
    bs.pwmtempa = (samples[ADCNO_PWMTEMPA]*sample_conv_unipolar - 0.120) * 5.0;
    bs.pwmtempb = (samples[ADCNO_PWMTEMPB]*sample_conv_unipolar - 0.120) * 5.0;
    bs.pwmtempc = (samples[ADCNO_PWMTEMPC]*sample_conv_unipolar - 0.120) * 5.0;
    bs.pwmtempd = (samples[ADCNO_PWMTEMPD]*sample_conv_unipolar - 0.120) * 5.0;
  }

#elif defined(__BAL4__)
  bs.bat_voltage = samples[ADCNO_BAT_VOLTAGE]*sample_conv_unipolar * bh.bat_voltage_mult;
  bs.pitch_rate = (samples[ADCNO_PITCH_RATE]*sample_conv_bipolar - 1.0) * 3.491; // convert to 12.5 mv/deg/sec to radians/sec
  bs.knob1 = samples[ADCNO_KNOB1]*sample_conv_unipolar;
  bs.knob2 = samples[ADCNO_KNOB2]*sample_conv_unipolar;
  bs.knob3 = samples[ADCNO_KNOB3]*sample_conv_unipolar;
  bs.lmis = (samples[ADCNO_LMIS]*sample_conv_bipolar - 1.0) * 0.625; // Units are 100A
  bs.batis = (samples[ADCNO_BATIS]*sample_conv_bipolar - 1.0) * 0.625;

  // ADXL0311 accelerometer, with a gain of 3.
  // Convert from 312*3 mv/G into Gs
  bs.fwd_accel = (samples[ADCNO_FWD_ACCEL]*sample_conv_bipolar - 1.0) * 2.67 + bh.fwd_accel_bias;  

#else
#error "No hw defined"
#endif

  if (bs.mode==MODE_INITIAL) {
    18c0:	80 91 5b 06 	lds	r24, 0x065B
    18c4:	88 23       	and	r24, r24
    18c6:	09 f0       	breq	.+2      	; 0x18ca <balance+0x440>
    18c8:	68 c2       	rjmp	.+1232   	; 0x1d9a <balance+0x910>
    if (0) {
    }
    else if (0 && bs.knob2 > 0.9) {
      bs.mode=MODE_HWADJ;
      update_hwadj(1.0);
    }
    else if (0 && bs.knob2 < 0.1) {
      bs.mode=MODE_TEST_MOTORS;
    }
    else {
      if (bs.fwd_accel < 0.2 && bs.fwd_accel > -0.2) {
    18ca:	2d ec       	ldi	r18, 0xCD	; 205
    18cc:	3c ec       	ldi	r19, 0xCC	; 204
    18ce:	4c e4       	ldi	r20, 0x4C	; 76
    18d0:	5e e3       	ldi	r21, 0x3E	; 62
    18d2:	c8 01       	movw	r24, r16
    18d4:	b7 01       	movw	r22, r14
    18d6:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
    18da:	88 23       	and	r24, r24
    18dc:	0c f4       	brge	.+2      	; 0x18e0 <balance+0x456>
    18de:	65 c2       	rjmp	.+1226   	; 0x1daa <balance+0x920>
        bs.mode=MODE_RUNNING;
      } else {
        bs.mode=MODE_TIPPED;
    18e0:	82 e0       	ldi	r24, 0x02	; 2
    18e2:	80 93 5b 06 	sts	0x065B, r24
        bs.mode_reason=1;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	80 93 5c 06 	sts	0x065C, r24
      }
    }
  }

  if (bs.mode==MODE_TEST_MOTORS) {

    bs.left_pwm = fmin(0.3, bs.realtime / 20.0);
#ifdef DO_STEERING
    bs.right_pwm = bs.left_pwm*0.5;
    set_motors(bs.left_pwm, bs.right_pwm);
#else
    set_motors(bs.left_pwm);
#endif

    return;
  }
  else if (bs.mode==MODE_HWADJ_DONE) {
    set1_beeper();
    return;
  }
  else if (bs.mode==MODE_HWADJ) {
    update_hwadj(0.01);
    if (bs.realtime > 2.0) {
      set0_beeper();
      cli();
      eeprom_write_block(&bh, 0, sizeof(bh));
      sei(); // Ugh. eeprom_write does cli but no corresponding sei.
      bs.mode=MODE_HWADJ_DONE;
    }
    return;
  }
  
  bs.fwd_accel_net = bs.fwd_accel + bs.balance_torque*bc.fwd_accel_coupling;
    18ec:	20 91 97 05 	lds	r18, 0x0597
    18f0:	30 91 98 05 	lds	r19, 0x0598
    18f4:	40 91 99 05 	lds	r20, 0x0599
    18f8:	50 91 9a 05 	lds	r21, 0x059A
    18fc:	60 91 1b 06 	lds	r22, 0x061B
    1900:	70 91 1c 06 	lds	r23, 0x061C
    1904:	80 91 1d 06 	lds	r24, 0x061D
    1908:	90 91 1e 06 	lds	r25, 0x061E
    190c:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1910:	9b 01       	movw	r18, r22
    1912:	ac 01       	movw	r20, r24
    1914:	c8 01       	movw	r24, r16
    1916:	b7 01       	movw	r22, r14
    1918:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    191c:	60 93 b7 05 	sts	0x05B7, r22
    1920:	70 93 b8 05 	sts	0x05B8, r23
    1924:	80 93 b9 05 	sts	0x05B9, r24
    1928:	90 93 ba 05 	sts	0x05BA, r25

  gyro_sample_rate(&bs.pitch_filter, bs.pitch_rate, bs.interval);
    192c:	95 01       	movw	r18, r10
    192e:	84 01       	movw	r16, r8
    1930:	b3 01       	movw	r22, r6
    1932:	a2 01       	movw	r20, r4
    1934:	83 e4       	ldi	r24, 0x43	; 67
    1936:	96 e0       	ldi	r25, 0x06	; 6
    1938:	0e 94 bd 03 	call	0x77a	; 0x77a <gyro_sample_rate>
  gyro_sample_angle(&bs.pitch_filter, bs.fwd_accel_net, bs.interval);
    193c:	00 91 a7 05 	lds	r16, 0x05A7
    1940:	10 91 a8 05 	lds	r17, 0x05A8
    1944:	20 91 a9 05 	lds	r18, 0x05A9
    1948:	30 91 aa 05 	lds	r19, 0x05AA
    194c:	40 91 b7 05 	lds	r20, 0x05B7
    1950:	50 91 b8 05 	lds	r21, 0x05B8
    1954:	60 91 b9 05 	lds	r22, 0x05B9
    1958:	70 91 ba 05 	lds	r23, 0x05BA
    195c:	83 e4       	ldi	r24, 0x43	; 67
    195e:	96 e0       	ldi	r25, 0x06	; 6
    1960:	0e 94 1c 04 	call	0x838	; 0x838 <gyro_sample_angle>

  bs.gain_reduction=1.0;
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	a0 e8       	ldi	r26, 0x80	; 128
    196a:	bf e3       	ldi	r27, 0x3F	; 63
    196c:	80 93 2b 06 	sts	0x062B, r24
    1970:	90 93 2c 06 	sts	0x062C, r25
    1974:	a0 93 2d 06 	sts	0x062D, r26
    1978:	b0 93 2e 06 	sts	0x062E, r27

#ifdef DO_DRIVE
  if (bs.drive_age < 1.0) {
    bs.drive_age += bs.interval;

    lpf_update(&bs.drive_tilt, 0.3, bs.interval, 2.0 * (bs.drive.speed_targ - bs.cur_speed_est) + 0.1);
    lpf_update(&bs.drive_steer, 0.3, bs.interval, bs.drive.steering_targ); // wrong
    bs.gain_reduction = 0.2;
  }
  else if (bs.drive_age < 2.0) {
    bs.drive_age += bs.interval;

    lpf_update(&bs.drive_steer, 0.3, bs.interval, 0.0);
    lpf_update(&bs.drive_tilt, 0.3, bs.interval, 0.0);

    bs.gain_reduction = 0.4;
  } 
  else {
    bs.drive_tilt=0.0;
    bs.drive_steer=0.0;
  }
#endif


  lpf_update(&bs.lpf_angle, 0.04, bs.interval, bs.pitch_filter.angle
    197c:	c0 90 43 06 	lds	r12, 0x0643
    1980:	d0 90 44 06 	lds	r13, 0x0644
    1984:	e0 90 45 06 	lds	r14, 0x0645
    1988:	f0 90 46 06 	lds	r15, 0x0646
    198c:	00 91 a7 05 	lds	r16, 0x05A7
    1990:	10 91 a8 05 	lds	r17, 0x05A8
    1994:	20 91 a9 05 	lds	r18, 0x05A9
    1998:	30 91 aa 05 	lds	r19, 0x05AA
    199c:	4a e0       	ldi	r20, 0x0A	; 10
    199e:	57 ed       	ldi	r21, 0xD7	; 215
    19a0:	63 e2       	ldi	r22, 0x23	; 35
    19a2:	7d e3       	ldi	r23, 0x3D	; 61
    19a4:	8b ee       	ldi	r24, 0xEB	; 235
    19a6:	95 e0       	ldi	r25, 0x05	; 5
    19a8:	0e 94 cd 02 	call	0x59a	; 0x59a <lpf_update>
#ifdef DO_DRIVE
             + bs.drive_tilt
#endif
             );
#ifdef __BAL4__
  lpf_update(&bs.lpf_angrate, 0.050, bs.interval, bs.pitch_filter.rate);
#else
  lpf_update(&bs.lpf_angrate, 0.015, bs.interval, bs.pitch_filter.rate);
    19ac:	c0 90 4b 06 	lds	r12, 0x064B
    19b0:	d0 90 4c 06 	lds	r13, 0x064C
    19b4:	e0 90 4d 06 	lds	r14, 0x064D
    19b8:	f0 90 4e 06 	lds	r15, 0x064E
    19bc:	00 91 a7 05 	lds	r16, 0x05A7
    19c0:	10 91 a8 05 	lds	r17, 0x05A8
    19c4:	20 91 a9 05 	lds	r18, 0x05A9
    19c8:	30 91 aa 05 	lds	r19, 0x05AA
    19cc:	4f e8       	ldi	r20, 0x8F	; 143
    19ce:	52 ec       	ldi	r21, 0xC2	; 194
    19d0:	65 e7       	ldi	r22, 0x75	; 117
    19d2:	7c e3       	ldi	r23, 0x3C	; 60
    19d4:	83 ef       	ldi	r24, 0xF3	; 243
    19d6:	95 e0       	ldi	r25, 0x05	; 5
    19d8:	0e 94 cd 02 	call	0x59a	; 0x59a <lpf_update>
#endif
#ifdef DO_STEERING
  lpf_update(&bs.lpf_steering, 0.1, bs.interval, bs.steering 
    19dc:	c0 90 bb 05 	lds	r12, 0x05BB
    19e0:	d0 90 bc 05 	lds	r13, 0x05BC
    19e4:	e0 90 bd 05 	lds	r14, 0x05BD
    19e8:	f0 90 be 05 	lds	r15, 0x05BE
    19ec:	00 91 a7 05 	lds	r16, 0x05A7
    19f0:	10 91 a8 05 	lds	r17, 0x05A8
    19f4:	20 91 a9 05 	lds	r18, 0x05A9
    19f8:	30 91 aa 05 	lds	r19, 0x05AA
    19fc:	4d ec       	ldi	r20, 0xCD	; 205
    19fe:	5c ec       	ldi	r21, 0xCC	; 204
    1a00:	6c ec       	ldi	r22, 0xCC	; 204
    1a02:	7d e3       	ldi	r23, 0x3D	; 61
    1a04:	8b ef       	ldi	r24, 0xFB	; 251
    1a06:	95 e0       	ldi	r25, 0x05	; 5
    1a08:	0e 94 cd 02 	call	0x59a	; 0x59a <lpf_update>
#ifdef DO_DRIVE
             + bs.drive_steer
#endif
             );

  lpf_update(&bs.lpf_yaw_rate, 0.05, bs.interval, bs.yaw_rate);
    1a0c:	c0 90 bf 05 	lds	r12, 0x05BF
    1a10:	d0 90 c0 05 	lds	r13, 0x05C0
    1a14:	e0 90 c1 05 	lds	r14, 0x05C1
    1a18:	f0 90 c2 05 	lds	r15, 0x05C2
    1a1c:	00 91 a7 05 	lds	r16, 0x05A7
    1a20:	10 91 a8 05 	lds	r17, 0x05A8
    1a24:	20 91 a9 05 	lds	r18, 0x05A9
    1a28:	30 91 aa 05 	lds	r19, 0x05AA
    1a2c:	4d ec       	ldi	r20, 0xCD	; 205
    1a2e:	5c ec       	ldi	r21, 0xCC	; 204
    1a30:	6c e4       	ldi	r22, 0x4C	; 76
    1a32:	7d e3       	ldi	r23, 0x3D	; 61
    1a34:	8f ef       	ldi	r24, 0xFF	; 255
    1a36:	95 e0       	ldi	r25, 0x05	; 5
    1a38:	0e 94 cd 02 	call	0x59a	; 0x59a <lpf_update>

  /* Since we can dial down the speed limit, we don't want this changing too fast */
  lpf_update(&bs.lpf_knob1, 0.5, bs.interval, bs.knob1);
    1a3c:	c0 90 c3 05 	lds	r12, 0x05C3
    1a40:	d0 90 c4 05 	lds	r13, 0x05C4
    1a44:	e0 90 c5 05 	lds	r14, 0x05C5
    1a48:	f0 90 c6 05 	lds	r15, 0x05C6
    1a4c:	00 91 a7 05 	lds	r16, 0x05A7
    1a50:	10 91 a8 05 	lds	r17, 0x05A8
    1a54:	20 91 a9 05 	lds	r18, 0x05A9
    1a58:	30 91 aa 05 	lds	r19, 0x05AA
    1a5c:	40 e0       	ldi	r20, 0x00	; 0
    1a5e:	50 e0       	ldi	r21, 0x00	; 0
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	7f e3       	ldi	r23, 0x3F	; 63
    1a64:	87 e0       	ldi	r24, 0x07	; 7
    1a66:	96 e0       	ldi	r25, 0x06	; 6
    1a68:	0e 94 cd 02 	call	0x59a	; 0x59a <lpf_update>

#endif

  bs.cur_cg_speed_est = bs.cur_speed_est;
    1a6c:	80 91 1f 06 	lds	r24, 0x061F
    1a70:	90 91 20 06 	lds	r25, 0x0620
    1a74:	a0 91 21 06 	lds	r26, 0x0621
    1a78:	b0 91 22 06 	lds	r27, 0x0622
    1a7c:	8e 87       	std	Y+14, r24	; 0x0e
    1a7e:	9f 87       	std	Y+15, r25	; 0x0f
    1a80:	a8 8b       	std	Y+16, r26	; 0x10
    1a82:	b9 8b       	std	Y+17, r27	; 0x11
    1a84:	80 93 23 06 	sts	0x0623, r24
    1a88:	90 93 24 06 	sts	0x0624, r25
    1a8c:	a0 93 25 06 	sts	0x0625, r26
    1a90:	b0 93 26 06 	sts	0x0626, r27

  bs.overspeed=0.0;
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a0 e0       	ldi	r26, 0x00	; 0
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	80 93 13 06 	sts	0x0613, r24
    1aa0:	90 93 14 06 	sts	0x0614, r25
    1aa4:	a0 93 15 06 	sts	0x0615, r26
    1aa8:	b0 93 16 06 	sts	0x0616, r27

#ifdef DO_BAT
  float fsl = fmin(bc.fwd_speed_lim, bs.bat_speed_lim);
  float rsl = fmin(bc.rev_speed_lim, bs.bat_speed_lim);
#else
  float fsl = bc.fwd_speed_lim;
    1aac:	e0 90 6b 05 	lds	r14, 0x056B
    1ab0:	f0 90 6c 05 	lds	r15, 0x056C
    1ab4:	00 91 6d 05 	lds	r16, 0x056D
    1ab8:	10 91 6e 05 	lds	r17, 0x056E
  float rsl = bc.rev_speed_lim;
    1abc:	a0 90 6f 05 	lds	r10, 0x056F
    1ac0:	b0 90 70 05 	lds	r11, 0x0570
    1ac4:	c0 90 71 05 	lds	r12, 0x0571
    1ac8:	d0 90 72 05 	lds	r13, 0x0572
#endif

#if !defined(__UNICYCLE2__)
  // Adjust speed limits down to 25% of maximum with knob
  fsl *= (0.5 + 0.5*bs.lpf_knob1);
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	5f e3       	ldi	r21, 0x3F	; 63
    1ad4:	60 91 07 06 	lds	r22, 0x0607
    1ad8:	70 91 08 06 	lds	r23, 0x0608
    1adc:	80 91 09 06 	lds	r24, 0x0609
    1ae0:	90 91 0a 06 	lds	r25, 0x060A
    1ae4:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	5f e3       	ldi	r21, 0x3F	; 63
    1af0:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    1af4:	6a 87       	std	Y+10, r22	; 0x0a
    1af6:	7b 87       	std	Y+11, r23	; 0x0b
    1af8:	8c 87       	std	Y+12, r24	; 0x0c
    1afa:	9d 87       	std	Y+13, r25	; 0x0d
    1afc:	9b 01       	movw	r18, r22
    1afe:	ac 01       	movw	r20, r24
    1b00:	c8 01       	movw	r24, r16
    1b02:	b7 01       	movw	r22, r14
    1b04:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1b08:	3b 01       	movw	r6, r22
    1b0a:	4c 01       	movw	r8, r24
  rsl *= (0.5 + 0.5*bs.lpf_knob1);
#endif

  /* Check if we're over speed and arrange to tilt back. This is a bit convoluted. */
  if (bs.cur_cg_speed_est > fsl) {
    1b0c:	9b 01       	movw	r18, r22
    1b0e:	ac 01       	movw	r20, r24
    1b10:	6e 85       	ldd	r22, Y+14	; 0x0e
    1b12:	7f 85       	ldd	r23, Y+15	; 0x0f
    1b14:	88 89       	ldd	r24, Y+16	; 0x10
    1b16:	99 89       	ldd	r25, Y+17	; 0x11
    1b18:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
    1b1c:	18 16       	cp	r1, r24
    1b1e:	0c f4       	brge	.+2      	; 0x1b22 <balance+0x698>
    1b20:	0c c6       	rjmp	.+3096   	; 0x273a <balance+0x12b0>
    1b22:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b24:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b26:	4c 85       	ldd	r20, Y+12	; 0x0c
    1b28:	5d 85       	ldd	r21, Y+13	; 0x0d
    1b2a:	c6 01       	movw	r24, r12
    1b2c:	b5 01       	movw	r22, r10
    1b2e:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1b32:	1b 01       	movw	r2, r22
    1b34:	2c 01       	movw	r4, r24
    bs.overspeed = (bs.cur_cg_speed_est - fsl); // positive
    bs.overspeed_integral += 2.0 * bs.interval * fmax(0.0, bs.overspeed-0.08);
  }
  else if (bs.cur_cg_speed_est < -rsl) {
    1b36:	9b 01       	movw	r18, r22
    1b38:	ac 01       	movw	r20, r24
    1b3a:	50 58       	subi	r21, 0x80	; 128
    1b3c:	6e 85       	ldd	r22, Y+14	; 0x0e
    1b3e:	7f 85       	ldd	r23, Y+15	; 0x0f
    1b40:	88 89       	ldd	r24, Y+16	; 0x10
    1b42:	99 89       	ldd	r25, Y+17	; 0x11
    1b44:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
    1b48:	88 23       	and	r24, r24
    1b4a:	0c f4       	brge	.+2      	; 0x1b4e <balance+0x6c4>
    1b4c:	43 c6       	rjmp	.+3206   	; 0x27d4 <balance+0x134a>
    bs.overspeed = (bs.cur_cg_speed_est + rsl); // negative
    bs.overspeed_integral += 2.0 * bs.interval * fmin(0.0, bs.overspeed+0.08);
  }
  else if (bs.overspeed_integral>0.0) {
    1b4e:	a0 90 17 06 	lds	r10, 0x0617
    1b52:	b0 90 18 06 	lds	r11, 0x0618
    1b56:	c0 90 19 06 	lds	r12, 0x0619
    1b5a:	d0 90 1a 06 	lds	r13, 0x061A
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	50 e0       	ldi	r21, 0x00	; 0
    1b66:	c6 01       	movw	r24, r12
    1b68:	b5 01       	movw	r22, r10
    1b6a:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	0c f0       	brlt	.+2      	; 0x1b74 <balance+0x6ea>
    1b72:	d1 c1       	rjmp	.+930    	; 0x1f16 <balance+0xa8c>
    float not_overspeed = fmin(0.0, (bs.cur_cg_speed_est - fsl)); // should be negative
    bs.overspeed_integral += 4.0 * bs.interval * fmin(-0.02, not_overspeed);
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e8       	ldi	r20, 0x80	; 128
    1b7a:	50 e4       	ldi	r21, 0x40	; 64
    1b7c:	60 91 a7 05 	lds	r22, 0x05A7
    1b80:	70 91 a8 05 	lds	r23, 0x05A8
    1b84:	80 91 a9 05 	lds	r24, 0x05A9
    1b88:	90 91 aa 05 	lds	r25, 0x05AA
    1b8c:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1b90:	7b 01       	movw	r14, r22
    1b92:	8c 01       	movw	r16, r24
    1b94:	a4 01       	movw	r20, r8
    1b96:	93 01       	movw	r18, r6
    1b98:	6e 85       	ldd	r22, Y+14	; 0x0e
    1b9a:	7f 85       	ldd	r23, Y+15	; 0x0f
    1b9c:	88 89       	ldd	r24, Y+16	; 0x10
    1b9e:	99 89       	ldd	r25, Y+17	; 0x11
    1ba0:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
    1ba4:	9b 01       	movw	r18, r22
    1ba6:	ac 01       	movw	r20, r24
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	70 e0       	ldi	r23, 0x00	; 0
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	0e 94 6e 03 	call	0x6dc	; 0x6dc <fmin>
    1bb4:	9b 01       	movw	r18, r22
    1bb6:	ac 01       	movw	r20, r24
    1bb8:	6a e0       	ldi	r22, 0x0A	; 10
    1bba:	77 ed       	ldi	r23, 0xD7	; 215
    1bbc:	83 ea       	ldi	r24, 0xA3	; 163
    1bbe:	9c eb       	ldi	r25, 0xBC	; 188
    1bc0:	0e 94 6e 03 	call	0x6dc	; 0x6dc <fmin>
    1bc4:	9b 01       	movw	r18, r22
    1bc6:	ac 01       	movw	r20, r24
    1bc8:	c8 01       	movw	r24, r16
    1bca:	b7 01       	movw	r22, r14
    1bcc:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1bd0:	9b 01       	movw	r18, r22
    1bd2:	ac 01       	movw	r20, r24
    1bd4:	c6 01       	movw	r24, r12
    1bd6:	b5 01       	movw	r22, r10
    1bd8:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    1bdc:	5b 01       	movw	r10, r22
    1bde:	6c 01       	movw	r12, r24
    1be0:	60 93 17 06 	sts	0x0617, r22
    1be4:	70 93 18 06 	sts	0x0618, r23
    1be8:	80 93 19 06 	sts	0x0619, r24
    1bec:	90 93 1a 06 	sts	0x061A, r25
    if (bs.overspeed_integral<0.0) bs.overspeed_integral=0.0;
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	50 e0       	ldi	r21, 0x00	; 0
    1bf8:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
    1bfc:	88 23       	and	r24, r24
    1bfe:	0c f4       	brge	.+2      	; 0x1c02 <balance+0x778>
    1c00:	dc c1       	rjmp	.+952    	; 0x1fba <balance+0xb30>
  }
  else if (bs.overspeed_integral<0.0) {
    float not_overspeed = fmax(0.0, (bs.cur_cg_speed_est + rsl)); // should be positive
    bs.overspeed_integral += 4.0 * bs.interval * fmax(0.02, not_overspeed);
    if (bs.overspeed_integral>0.0) bs.overspeed_integral=0.0;
  }
  bs.overspeed_integral=flim(bs.overspeed_integral, -0.5, 0.5);
    1c02:	0f 2e       	mov	r0, r31
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	ef 2e       	mov	r14, r31
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	ff 2e       	mov	r15, r31
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	0f 2f       	mov	r16, r31
    1c10:	ff e3       	ldi	r31, 0x3F	; 63
    1c12:	1f 2f       	mov	r17, r31
    1c14:	f0 2d       	mov	r31, r0
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	5f eb       	ldi	r21, 0xBF	; 191
    1c1e:	c6 01       	movw	r24, r12
    1c20:	b5 01       	movw	r22, r10
    1c22:	0e 94 8b 03 	call	0x716	; 0x716 <flim>
    1c26:	7b 01       	movw	r14, r22
    1c28:	8c 01       	movw	r16, r24
    1c2a:	60 93 17 06 	sts	0x0617, r22
    1c2e:	70 93 18 06 	sts	0x0618, r23
    1c32:	80 93 19 06 	sts	0x0619, r24
    1c36:	90 93 1a 06 	sts	0x061A, r25

  bs.stick_shake=0.0;
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	a0 e0       	ldi	r26, 0x00	; 0
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	80 93 27 06 	sts	0x0627, r24
    1c46:	90 93 28 06 	sts	0x0628, r25
    1c4a:	a0 93 29 06 	sts	0x0629, r26
    1c4e:	b0 93 2a 06 	sts	0x062A, r27
  if (bs.cur_cg_speed_est < -bc.rev_stick_shake_speed_lim*(0.5+0.5*bs.lpf_knob1)) {
    1c52:	20 91 77 05 	lds	r18, 0x0577
    1c56:	30 91 78 05 	lds	r19, 0x0578
    1c5a:	40 91 79 05 	lds	r20, 0x0579
    1c5e:	50 91 7a 05 	lds	r21, 0x057A
    1c62:	50 58       	subi	r21, 0x80	; 128
    1c64:	6a 85       	ldd	r22, Y+10	; 0x0a
    1c66:	7b 85       	ldd	r23, Y+11	; 0x0b
    1c68:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c6a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c6c:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1c70:	9b 01       	movw	r18, r22
    1c72:	ac 01       	movw	r20, r24
    1c74:	6e 85       	ldd	r22, Y+14	; 0x0e
    1c76:	7f 85       	ldd	r23, Y+15	; 0x0f
    1c78:	88 89       	ldd	r24, Y+16	; 0x10
    1c7a:	99 89       	ldd	r25, Y+17	; 0x11
    1c7c:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
    1c80:	88 23       	and	r24, r24
    1c82:	64 f4       	brge	.+24     	; 0x1c9c <balance+0x812>
    bs.stick_shake=0.03;
    1c84:	8f e8       	ldi	r24, 0x8F	; 143
    1c86:	92 ec       	ldi	r25, 0xC2	; 194
    1c88:	a5 ef       	ldi	r26, 0xF5	; 245
    1c8a:	bc e3       	ldi	r27, 0x3C	; 60
    1c8c:	80 93 27 06 	sts	0x0627, r24
    1c90:	90 93 28 06 	sts	0x0628, r25
    1c94:	a0 93 29 06 	sts	0x0629, r26
    1c98:	b0 93 2a 06 	sts	0x062A, r27
  }

  /* Add the tilt to the measured angle */
  bs.lpf_angle_corrected = bs.lpf_angle + flim(0.9*bs.overspeed + bs.overspeed_integral, -0.4, 0.4);
    1c9c:	a0 90 eb 05 	lds	r10, 0x05EB
    1ca0:	b0 90 ec 05 	lds	r11, 0x05EC
    1ca4:	c0 90 ed 05 	lds	r12, 0x05ED
    1ca8:	d0 90 ee 05 	lds	r13, 0x05EE
    1cac:	26 e6       	ldi	r18, 0x66	; 102
    1cae:	36 e6       	ldi	r19, 0x66	; 102
    1cb0:	46 e6       	ldi	r20, 0x66	; 102
    1cb2:	5f e3       	ldi	r21, 0x3F	; 63
    1cb4:	60 91 13 06 	lds	r22, 0x0613
    1cb8:	70 91 14 06 	lds	r23, 0x0614
    1cbc:	80 91 15 06 	lds	r24, 0x0615
    1cc0:	90 91 16 06 	lds	r25, 0x0616
    1cc4:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1cc8:	9b 01       	movw	r18, r22
    1cca:	ac 01       	movw	r20, r24
    1ccc:	c8 01       	movw	r24, r16
    1cce:	b7 01       	movw	r22, r14
    1cd0:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    1cd4:	0f 2e       	mov	r0, r31
    1cd6:	fd ec       	ldi	r31, 0xCD	; 205
    1cd8:	ef 2e       	mov	r14, r31
    1cda:	fc ec       	ldi	r31, 0xCC	; 204
    1cdc:	ff 2e       	mov	r15, r31
    1cde:	fc ec       	ldi	r31, 0xCC	; 204
    1ce0:	0f 2f       	mov	r16, r31
    1ce2:	fe e3       	ldi	r31, 0x3E	; 62
    1ce4:	1f 2f       	mov	r17, r31
    1ce6:	f0 2d       	mov	r31, r0
    1ce8:	2d ec       	ldi	r18, 0xCD	; 205
    1cea:	3c ec       	ldi	r19, 0xCC	; 204
    1cec:	4c ec       	ldi	r20, 0xCC	; 204
    1cee:	5e eb       	ldi	r21, 0xBE	; 190
    1cf0:	0e 94 8b 03 	call	0x716	; 0x716 <flim>
    1cf4:	9b 01       	movw	r18, r22
    1cf6:	ac 01       	movw	r20, r24
    1cf8:	c6 01       	movw	r24, r12
    1cfa:	b5 01       	movw	r22, r10
    1cfc:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    1d00:	3b 01       	movw	r6, r22
    1d02:	4c 01       	movw	r8, r24
    1d04:	60 93 ef 05 	sts	0x05EF, r22
    1d08:	70 93 f0 05 	sts	0x05F0, r23
    1d0c:	80 93 f1 05 	sts	0x05F1, r24
    1d10:	90 93 f2 05 	sts	0x05F2, r25

  /* Only do the integral term once we're stable */
  if (bs.softstart==1.0) {
    1d14:	20 90 0b 06 	lds	r2, 0x060B
    1d18:	30 90 0c 06 	lds	r3, 0x060C
    1d1c:	40 90 0d 06 	lds	r4, 0x060D
    1d20:	50 90 0e 06 	lds	r5, 0x060E
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e8       	ldi	r20, 0x80	; 128
    1d2a:	5f e3       	ldi	r21, 0x3F	; 63
    1d2c:	c2 01       	movw	r24, r4
    1d2e:	b1 01       	movw	r22, r2
    1d30:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
    1d34:	88 23       	and	r24, r24
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <balance+0x8b0>
    1d38:	cb c4       	rjmp	.+2454   	; 0x26d0 <balance+0x1246>
    bs.lpf_angintegral = flim(bs.lpf_angintegral + bs.lpf_angle_corrected*bs.interval * 4.0, -0.1, 0.1);
  }

  /* If we've tipped past 0.6 radians (45 degrees) abandon hope.
     This happens, for example, when the wheels slip on wet grass or snow and it falls over.
     It's better to give up than keep spinning the wheels trying to right ourselves.
     We probably can't recover anyway.
  */
  if (bs.mode!=MODE_TIPPED) {
    1d3a:	80 91 5b 06 	lds	r24, 0x065B
    1d3e:	82 30       	cpi	r24, 0x02	; 2
    1d40:	81 f0       	breq	.+32     	; 0x1d62 <balance+0x8d8>
    if (bs.lpf_angle > 0.6) {
    1d42:	2a e9       	ldi	r18, 0x9A	; 154
    1d44:	39 e9       	ldi	r19, 0x99	; 153
    1d46:	49 e1       	ldi	r20, 0x19	; 25
    1d48:	5f e3       	ldi	r21, 0x3F	; 63
    1d4a:	c6 01       	movw	r24, r12
    1d4c:	b5 01       	movw	r22, r10
    1d4e:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
    1d52:	18 16       	cp	r1, r24
    1d54:	0c f0       	brlt	.+2      	; 0x1d58 <balance+0x8ce>
    1d56:	aa c4       	rjmp	.+2388   	; 0x26ac <balance+0x1222>
      bs.mode=MODE_TIPPED;
    1d58:	82 e0       	ldi	r24, 0x02	; 2
    1d5a:	80 93 5b 06 	sts	0x065B, r24
      bs.mode_reason=2;
    1d5e:	80 93 5c 06 	sts	0x065C, r24
    }
    else if (bs.lpf_angle < -0.6) {
      bs.mode=MODE_TIPPED;
      bs.mode_reason=3;
    }
  }

  /*
    Below this we can't count on enough voltage to keep ourselves or the PWM drives running.
  */
  if (bs.bat_voltage < 0.35) {
    1d62:	e0 90 ab 05 	lds	r14, 0x05AB
    1d66:	f0 90 ac 05 	lds	r15, 0x05AC
    1d6a:	00 91 ad 05 	lds	r16, 0x05AD
    1d6e:	10 91 ae 05 	lds	r17, 0x05AE
    1d72:	23 e3       	ldi	r18, 0x33	; 51
    1d74:	33 e3       	ldi	r19, 0x33	; 51
    1d76:	43 eb       	ldi	r20, 0xB3	; 179
    1d78:	5e e3       	ldi	r21, 0x3E	; 62
    1d7a:	c8 01       	movw	r24, r16
    1d7c:	b7 01       	movw	r22, r14
    1d7e:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
    1d82:	88 23       	and	r24, r24
    1d84:	0c f0       	brlt	.+2      	; 0x1d88 <balance+0x8fe>
    1d86:	2c c1       	rjmp	.+600    	; 0x1fe0 <balance+0xb56>
    bs.mode=MODE_TIPPED;
    1d88:	82 e0       	ldi	r24, 0x02	; 2
    1d8a:	80 93 5b 06 	sts	0x065B, r24
    bs.mode_reason=4;
    1d8e:	84 e0       	ldi	r24, 0x04	; 4
    1d90:	80 93 5c 06 	sts	0x065C, r24
  }

  if (bs.mode!=MODE_RUNNING) {
    // too tippy to try to recover.
    set_motor_idle();
    1d94:	0e 94 71 04 	call	0x8e2	; 0x8e2 <set_motor_idle>
    1d98:	4a c6       	rjmp	.+3220   	; 0x2a2e <balance+0x15a4>
    1d9a:	85 30       	cpi	r24, 0x05	; 5
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <balance+0x916>
    1d9e:	8a c0       	rjmp	.+276    	; 0x1eb4 <balance+0xa2a>
    1da0:	84 30       	cpi	r24, 0x04	; 4
    1da2:	09 f0       	breq	.+2      	; 0x1da6 <balance+0x91c>
    1da4:	5e c0       	rjmp	.+188    	; 0x1e62 <balance+0x9d8>
    1da6:	1a 9a       	sbi	0x03, 2	; 3
    1da8:	42 c6       	rjmp	.+3204   	; 0x2a2e <balance+0x15a4>
    1daa:	2d ec       	ldi	r18, 0xCD	; 205
    1dac:	3c ec       	ldi	r19, 0xCC	; 204
    1dae:	4c e4       	ldi	r20, 0x4C	; 76
    1db0:	5e eb       	ldi	r21, 0xBE	; 190
    1db2:	c8 01       	movw	r24, r16
    1db4:	b7 01       	movw	r22, r14
    1db6:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
    1dba:	18 16       	cp	r1, r24
    1dbc:	0c f0       	brlt	.+2      	; 0x1dc0 <balance+0x936>
    1dbe:	90 cd       	rjmp	.-1248   	; 0x18e0 <balance+0x456>
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	80 93 5b 06 	sts	0x065B, r24
    1dc6:	92 cd       	rjmp	.-1244   	; 0x18ec <balance+0x462>
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e8       	ldi	r20, 0x80	; 128
    1dce:	57 e4       	ldi	r21, 0x47	; 71
    1dd0:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    1dd4:	91 cb       	rjmp	.-2270   	; 0x14f8 <balance+0x6e>
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e8       	ldi	r20, 0x80	; 128
    1ddc:	57 e4       	ldi	r21, 0x47	; 71
    1dde:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    1de2:	f6 cb       	rjmp	.-2068   	; 0x15d0 <balance+0x146>
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e8       	ldi	r20, 0x80	; 128
    1dea:	57 e4       	ldi	r21, 0x47	; 71
    1dec:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    1df0:	ca cb       	rjmp	.-2156   	; 0x1586 <balance+0xfc>
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e8       	ldi	r20, 0x80	; 128
    1df8:	57 e4       	ldi	r21, 0x47	; 71
    1dfa:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    1dfe:	3a cd       	rjmp	.-1420   	; 0x1874 <balance+0x3ea>
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e8       	ldi	r20, 0x80	; 128
    1e06:	57 e4       	ldi	r21, 0x47	; 71
    1e08:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    1e0c:	fe cc       	rjmp	.-1540   	; 0x180a <balance+0x380>
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e8       	ldi	r20, 0x80	; 128
    1e14:	57 e4       	ldi	r21, 0x47	; 71
    1e16:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    1e1a:	ce cc       	rjmp	.-1636   	; 0x17b8 <balance+0x32e>
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	40 e8       	ldi	r20, 0x80	; 128
    1e22:	57 e4       	ldi	r21, 0x47	; 71
    1e24:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    1e28:	a0 cc       	rjmp	.-1728   	; 0x176a <balance+0x2e0>
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e8       	ldi	r20, 0x80	; 128
    1e30:	57 e4       	ldi	r21, 0x47	; 71
    1e32:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    1e36:	72 cc       	rjmp	.-1820   	; 0x171c <balance+0x292>
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e8       	ldi	r20, 0x80	; 128
    1e3e:	57 e4       	ldi	r21, 0x47	; 71
    1e40:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    1e44:	50 cc       	rjmp	.-1888   	; 0x16e6 <balance+0x25c>
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e8       	ldi	r20, 0x80	; 128
    1e4c:	57 e4       	ldi	r21, 0x47	; 71
    1e4e:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    1e52:	18 cc       	rjmp	.-2000   	; 0x1684 <balance+0x1fa>
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	40 e8       	ldi	r20, 0x80	; 128
    1e5a:	57 e4       	ldi	r21, 0x47	; 71
    1e5c:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    1e60:	e0 cb       	rjmp	.-2112   	; 0x1622 <balance+0x198>
    1e62:	83 30       	cpi	r24, 0x03	; 3
    1e64:	09 f0       	breq	.+2      	; 0x1e68 <balance+0x9de>
    1e66:	42 cd       	rjmp	.-1404   	; 0x18ec <balance+0x462>
    1e68:	6a e0       	ldi	r22, 0x0A	; 10
    1e6a:	77 ed       	ldi	r23, 0xD7	; 215
    1e6c:	83 e2       	ldi	r24, 0x23	; 35
    1e6e:	9c e3       	ldi	r25, 0x3C	; 60
    1e70:	0e 94 9e 04 	call	0x93c	; 0x93c <update_hwadj>
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	50 e4       	ldi	r21, 0x40	; 64
    1e7c:	60 91 a3 05 	lds	r22, 0x05A3
    1e80:	70 91 a4 05 	lds	r23, 0x05A4
    1e84:	80 91 a5 05 	lds	r24, 0x05A5
    1e88:	90 91 a6 05 	lds	r25, 0x05A6
    1e8c:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
    1e90:	18 16       	cp	r1, r24
    1e92:	0c f0       	brlt	.+2      	; 0x1e96 <balance+0xa0c>
    1e94:	cc c5       	rjmp	.+2968   	; 0x2a2e <balance+0x15a4>
    1e96:	1a 98       	cbi	0x03, 2	; 3
    1e98:	f8 94       	cli
            {
              uint8_t len;
              len = (uint8_t) n;

              __asm__ __volatile__ (
    1e9a:	84 e1       	ldi	r24, 0x14	; 20
    1e9c:	e1 e2       	ldi	r30, 0x21	; 33
    1e9e:	f5 e0       	ldi	r31, 0x05	; 5
    1ea0:	a0 e0       	ldi	r26, 0x00	; 0
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	18 2e       	mov	r1, r24
    1ea6:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <__eeprom_write_block_1C1D1E>
    1eaa:	78 94       	sei
    1eac:	84 e0       	ldi	r24, 0x04	; 4
    1eae:	80 93 5b 06 	sts	0x065B, r24
    1eb2:	bd c5       	rjmp	.+2938   	; 0x2a2e <balance+0x15a4>
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 ea       	ldi	r20, 0xA0	; 160
    1eba:	51 e4       	ldi	r21, 0x41	; 65
    1ebc:	6a 89       	ldd	r22, Y+18	; 0x12
    1ebe:	7b 89       	ldd	r23, Y+19	; 0x13
    1ec0:	8c 89       	ldd	r24, Y+20	; 0x14
    1ec2:	9d 89       	ldd	r25, Y+21	; 0x15
    1ec4:	0e 94 ef 1b 	call	0x37de	; 0x37de <__divsf3>
    1ec8:	9b 01       	movw	r18, r22
    1eca:	ac 01       	movw	r20, r24
    1ecc:	6a e9       	ldi	r22, 0x9A	; 154
    1ece:	79 e9       	ldi	r23, 0x99	; 153
    1ed0:	89 e9       	ldi	r24, 0x99	; 153
    1ed2:	9e e3       	ldi	r25, 0x3E	; 62
    1ed4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <fmin>
    1ed8:	7b 01       	movw	r14, r22
    1eda:	8c 01       	movw	r16, r24
    1edc:	60 93 3b 06 	sts	0x063B, r22
    1ee0:	70 93 3c 06 	sts	0x063C, r23
    1ee4:	80 93 3d 06 	sts	0x063D, r24
    1ee8:	90 93 3e 06 	sts	0x063E, r25
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e0       	ldi	r20, 0x00	; 0
    1ef2:	5f e3       	ldi	r21, 0x3F	; 63
    1ef4:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1ef8:	9b 01       	movw	r18, r22
    1efa:	ac 01       	movw	r20, r24
    1efc:	60 93 3f 06 	sts	0x063F, r22
    1f00:	70 93 40 06 	sts	0x0640, r23
    1f04:	80 93 41 06 	sts	0x0641, r24
    1f08:	90 93 42 06 	sts	0x0642, r25
    1f0c:	c8 01       	movw	r24, r16
    1f0e:	b7 01       	movw	r22, r14
    1f10:	0e 94 5e 09 	call	0x12bc	; 0x12bc <set_motors>
    1f14:	8c c5       	rjmp	.+2840   	; 0x2a2e <balance+0x15a4>
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	50 e0       	ldi	r21, 0x00	; 0
    1f1e:	c6 01       	movw	r24, r12
    1f20:	b5 01       	movw	r22, r10
    1f22:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
    1f26:	88 23       	and	r24, r24
    1f28:	0c f0       	brlt	.+2      	; 0x1f2c <balance+0xaa2>
    1f2a:	6b ce       	rjmp	.-810    	; 0x1c02 <balance+0x778>
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	40 e8       	ldi	r20, 0x80	; 128
    1f32:	50 e4       	ldi	r21, 0x40	; 64
    1f34:	60 91 a7 05 	lds	r22, 0x05A7
    1f38:	70 91 a8 05 	lds	r23, 0x05A8
    1f3c:	80 91 a9 05 	lds	r24, 0x05A9
    1f40:	90 91 aa 05 	lds	r25, 0x05AA
    1f44:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1f48:	7b 01       	movw	r14, r22
    1f4a:	8c 01       	movw	r16, r24
    1f4c:	a2 01       	movw	r20, r4
    1f4e:	91 01       	movw	r18, r2
    1f50:	6e 85       	ldd	r22, Y+14	; 0x0e
    1f52:	7f 85       	ldd	r23, Y+15	; 0x0f
    1f54:	88 89       	ldd	r24, Y+16	; 0x10
    1f56:	99 89       	ldd	r25, Y+17	; 0x11
    1f58:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    1f5c:	9b 01       	movw	r18, r22
    1f5e:	ac 01       	movw	r20, r24
    1f60:	60 e0       	ldi	r22, 0x00	; 0
    1f62:	70 e0       	ldi	r23, 0x00	; 0
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	0e 94 51 03 	call	0x6a2	; 0x6a2 <fmax>
    1f6c:	9b 01       	movw	r18, r22
    1f6e:	ac 01       	movw	r20, r24
    1f70:	6a e0       	ldi	r22, 0x0A	; 10
    1f72:	77 ed       	ldi	r23, 0xD7	; 215
    1f74:	83 ea       	ldi	r24, 0xA3	; 163
    1f76:	9c e3       	ldi	r25, 0x3C	; 60
    1f78:	0e 94 51 03 	call	0x6a2	; 0x6a2 <fmax>
    1f7c:	9b 01       	movw	r18, r22
    1f7e:	ac 01       	movw	r20, r24
    1f80:	c8 01       	movw	r24, r16
    1f82:	b7 01       	movw	r22, r14
    1f84:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    1f88:	9b 01       	movw	r18, r22
    1f8a:	ac 01       	movw	r20, r24
    1f8c:	c6 01       	movw	r24, r12
    1f8e:	b5 01       	movw	r22, r10
    1f90:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    1f94:	5b 01       	movw	r10, r22
    1f96:	6c 01       	movw	r12, r24
    1f98:	60 93 17 06 	sts	0x0617, r22
    1f9c:	70 93 18 06 	sts	0x0618, r23
    1fa0:	80 93 19 06 	sts	0x0619, r24
    1fa4:	90 93 1a 06 	sts	0x061A, r25
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e0       	ldi	r20, 0x00	; 0
    1fae:	50 e0       	ldi	r21, 0x00	; 0
    1fb0:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
    1fb4:	18 16       	cp	r1, r24
    1fb6:	0c f0       	brlt	.+2      	; 0x1fba <balance+0xb30>
    1fb8:	24 ce       	rjmp	.-952    	; 0x1c02 <balance+0x778>
    1fba:	0f 2e       	mov	r0, r31
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	af 2e       	mov	r10, r31
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	bf 2e       	mov	r11, r31
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	cf 2e       	mov	r12, r31
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	df 2e       	mov	r13, r31
    1fcc:	f0 2d       	mov	r31, r0
    1fce:	a0 92 17 06 	sts	0x0617, r10
    1fd2:	b0 92 18 06 	sts	0x0618, r11
    1fd6:	c0 92 19 06 	sts	0x0619, r12
    1fda:	d0 92 1a 06 	sts	0x061A, r13
    1fde:	11 ce       	rjmp	.-990    	; 0x1c02 <balance+0x778>
    1fe0:	80 91 5b 06 	lds	r24, 0x065B
    1fe4:	81 30       	cpi	r24, 0x01	; 1
    1fe6:	09 f0       	breq	.+2      	; 0x1fea <balance+0xb60>
    1fe8:	d5 ce       	rjmp	.-598    	; 0x1d94 <balance+0x90a>
    return;
  }

  /*
    The actual feedback loop between tilt angle and motor torque
   */

  float bat_factor = fmax(0.45, bs.bat_voltage);
    1fea:	a8 01       	movw	r20, r16
    1fec:	97 01       	movw	r18, r14
    1fee:	66 e6       	ldi	r22, 0x66	; 102
    1ff0:	76 e6       	ldi	r23, 0x66	; 102
    1ff2:	86 ee       	ldi	r24, 0xE6	; 230
    1ff4:	9e e3       	ldi	r25, 0x3E	; 62
    1ff6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <fmax>
    1ffa:	6a 83       	std	Y+2, r22	; 0x02
    1ffc:	7b 83       	std	Y+3, r23	; 0x03
    1ffe:	8c 83       	std	Y+4, r24	; 0x04
    2000:	9d 83       	std	Y+5, r25	; 0x05

  bs.balance_torque = (bc.p_gain*bs.lpf_angle_corrected + bc.d_gain*bs.lpf_angrate + bc.i_gain*bs.lpf_angintegral) * bs.softstart * bs.gain_reduction;
    2002:	20 91 53 05 	lds	r18, 0x0553
    2006:	30 91 54 05 	lds	r19, 0x0554
    200a:	40 91 55 05 	lds	r20, 0x0555
    200e:	50 91 56 05 	lds	r21, 0x0556
    2012:	c4 01       	movw	r24, r8
    2014:	b3 01       	movw	r22, r6
    2016:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    201a:	7b 01       	movw	r14, r22
    201c:	8c 01       	movw	r16, r24
    201e:	20 91 f3 05 	lds	r18, 0x05F3
    2022:	30 91 f4 05 	lds	r19, 0x05F4
    2026:	40 91 f5 05 	lds	r20, 0x05F5
    202a:	50 91 f6 05 	lds	r21, 0x05F6
    202e:	60 91 57 05 	lds	r22, 0x0557
    2032:	70 91 58 05 	lds	r23, 0x0558
    2036:	80 91 59 05 	lds	r24, 0x0559
    203a:	90 91 5a 05 	lds	r25, 0x055A
    203e:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    2042:	9b 01       	movw	r18, r22
    2044:	ac 01       	movw	r20, r24
    2046:	c8 01       	movw	r24, r16
    2048:	b7 01       	movw	r22, r14
    204a:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    204e:	7b 01       	movw	r14, r22
    2050:	8c 01       	movw	r16, r24
    2052:	20 91 f7 05 	lds	r18, 0x05F7
    2056:	30 91 f8 05 	lds	r19, 0x05F8
    205a:	40 91 f9 05 	lds	r20, 0x05F9
    205e:	50 91 fa 05 	lds	r21, 0x05FA
    2062:	60 91 5b 05 	lds	r22, 0x055B
    2066:	70 91 5c 05 	lds	r23, 0x055C
    206a:	80 91 5d 05 	lds	r24, 0x055D
    206e:	90 91 5e 05 	lds	r25, 0x055E
    2072:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    2076:	9b 01       	movw	r18, r22
    2078:	ac 01       	movw	r20, r24
    207a:	c8 01       	movw	r24, r16
    207c:	b7 01       	movw	r22, r14
    207e:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    2082:	9b 01       	movw	r18, r22
    2084:	ac 01       	movw	r20, r24
    2086:	c2 01       	movw	r24, r4
    2088:	b1 01       	movw	r22, r2
    208a:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    208e:	20 91 2b 06 	lds	r18, 0x062B
    2092:	30 91 2c 06 	lds	r19, 0x062C
    2096:	40 91 2d 06 	lds	r20, 0x062D
    209a:	50 91 2e 06 	lds	r21, 0x062E
    209e:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    20a2:	5b 01       	movw	r10, r22
    20a4:	6c 01       	movw	r12, r24
    20a6:	60 93 1b 06 	sts	0x061B, r22
    20aa:	70 93 1c 06 	sts	0x061C, r23
    20ae:	80 93 1d 06 	sts	0x061D, r24
    20b2:	90 93 1e 06 	sts	0x061E, r25
  

  /*
    Limit balance_torque to the amount we can actually produce, based on the PWM limit values.
    Avoiding having enormous balance_torques during PWM saturation helps keep cur_speed_est reasonable.
  */
  int8_t at_limit=0;
  if (bs.balance_torque>=0.0) {
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	50 e0       	ldi	r21, 0x00	; 0
    20be:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
    20c2:	88 23       	and	r24, r24
    20c4:	0c f4       	brge	.+2      	; 0x20c8 <balance+0xc3e>
    20c6:	e2 c3       	rjmp	.+1988   	; 0x288c <balance+0x1402>
    bs.bt_lim = fmin((bc.hard_speed_lim * bat_factor - bs.cur_speed_est) / bc.motor_torque_factor, bc.balance_torque_lim);
    20c8:	e0 90 8b 05 	lds	r14, 0x058B
    20cc:	f0 90 8c 05 	lds	r15, 0x058C
    20d0:	00 91 8d 05 	lds	r16, 0x058D
    20d4:	10 91 8e 05 	lds	r17, 0x058E
    20d8:	20 91 67 05 	lds	r18, 0x0567
    20dc:	30 91 68 05 	lds	r19, 0x0568
    20e0:	40 91 69 05 	lds	r20, 0x0569
    20e4:	50 91 6a 05 	lds	r21, 0x056A
    20e8:	6a 81       	ldd	r22, Y+2	; 0x02
    20ea:	7b 81       	ldd	r23, Y+3	; 0x03
    20ec:	8c 81       	ldd	r24, Y+4	; 0x04
    20ee:	9d 81       	ldd	r25, Y+5	; 0x05
    20f0:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    20f4:	2e 85       	ldd	r18, Y+14	; 0x0e
    20f6:	3f 85       	ldd	r19, Y+15	; 0x0f
    20f8:	48 89       	ldd	r20, Y+16	; 0x10
    20fa:	59 89       	ldd	r21, Y+17	; 0x11
    20fc:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
    2100:	20 91 8f 05 	lds	r18, 0x058F
    2104:	30 91 90 05 	lds	r19, 0x0590
    2108:	40 91 91 05 	lds	r20, 0x0591
    210c:	50 91 92 05 	lds	r21, 0x0592
    2110:	0e 94 ef 1b 	call	0x37de	; 0x37de <__divsf3>
    2114:	a8 01       	movw	r20, r16
    2116:	97 01       	movw	r18, r14
    2118:	0e 94 6e 03 	call	0x6dc	; 0x6dc <fmin>
    211c:	7b 01       	movw	r14, r22
    211e:	8c 01       	movw	r16, r24
    2120:	60 93 e3 05 	sts	0x05E3, r22
    2124:	70 93 e4 05 	sts	0x05E4, r23
    2128:	80 93 e5 05 	sts	0x05E5, r24
    212c:	90 93 e6 05 	sts	0x05E6, r25
    if (bs.balance_torque > bs.bt_lim) {
    2130:	9b 01       	movw	r18, r22
    2132:	ac 01       	movw	r20, r24
    2134:	c6 01       	movw	r24, r12
    2136:	b5 01       	movw	r22, r10
    2138:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
    213c:	18 16       	cp	r1, r24
    213e:	0c f0       	brlt	.+2      	; 0x2142 <balance+0xcb8>
    2140:	87 c3       	rjmp	.+1806   	; 0x2850 <balance+0x13c6>
      if (bs.bt_lim<0.0) {
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e0       	ldi	r20, 0x00	; 0
    2148:	50 e0       	ldi	r21, 0x00	; 0
    214a:	c8 01       	movw	r24, r16
    214c:	b7 01       	movw	r22, r14
    214e:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
    2152:	88 23       	and	r24, r24
    2154:	0c f4       	brge	.+2      	; 0x2158 <balance+0xcce>
    2156:	3d c4       	rjmp	.+2170   	; 0x29d2 <balance+0x1548>
        bs.balance_torque=0.0;
      } else {
        bs.balance_torque = bs.bt_lim;
    2158:	e0 92 1b 06 	sts	0x061B, r14
    215c:	f0 92 1c 06 	sts	0x061C, r15
    2160:	00 93 1d 06 	sts	0x061D, r16
    2164:	10 93 1e 06 	sts	0x061E, r17
    2168:	a1 e0       	ldi	r26, 0x01	; 1
    216a:	a9 83       	std	Y+1, r26	; 0x01
      }
      at_limit=1;
    }
  } else {
    bs.bt_lim = fmax((-bc.hard_speed_lim * bat_factor - bs.cur_speed_est) / bc.motor_torque_factor, -bc.balance_torque_lim);
    if (bs.balance_torque < bs.bt_lim) {
      if (bs.bt_lim>=0.0) {
        bs.balance_torque=0.0;
      } else {
        bs.balance_torque = bs.bt_lim;
      }
      at_limit=1;
    }
  }

  /*
    Calculate the PWM value, roughly = current speed + k * desired torque / bat_voltage.
  */
  bs.cmd = (bs.cur_speed_est + bc.motor_torque_factor*bs.balance_torque) / bat_factor;
    216c:	e0 90 1b 06 	lds	r14, 0x061B
    2170:	f0 90 1c 06 	lds	r15, 0x061C
    2174:	00 91 1d 06 	lds	r16, 0x061D
    2178:	10 91 1e 06 	lds	r17, 0x061E
    217c:	20 91 8f 05 	lds	r18, 0x058F
    2180:	30 91 90 05 	lds	r19, 0x0590
    2184:	40 91 91 05 	lds	r20, 0x0591
    2188:	50 91 92 05 	lds	r21, 0x0592
    218c:	c8 01       	movw	r24, r16
    218e:	b7 01       	movw	r22, r14
    2190:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    2194:	9b 01       	movw	r18, r22
    2196:	ac 01       	movw	r20, r24
    2198:	6e 85       	ldd	r22, Y+14	; 0x0e
    219a:	7f 85       	ldd	r23, Y+15	; 0x0f
    219c:	88 89       	ldd	r24, Y+16	; 0x10
    219e:	99 89       	ldd	r25, Y+17	; 0x11
    21a0:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    21a4:	2a 81       	ldd	r18, Y+2	; 0x02
    21a6:	3b 81       	ldd	r19, Y+3	; 0x03
    21a8:	4c 81       	ldd	r20, Y+4	; 0x04
    21aa:	5d 81       	ldd	r21, Y+5	; 0x05
    21ac:	0e 94 ef 1b 	call	0x37de	; 0x37de <__divsf3>
    21b0:	60 93 2f 06 	sts	0x062F, r22
    21b4:	70 93 30 06 	sts	0x0630, r23
    21b8:	80 93 31 06 	sts	0x0631, r24
    21bc:	90 93 32 06 	sts	0x0632, r25

  /*
    Assume that torque makes us accelerate. Not very accurate, but the feedback is tight enough
    to compensate.
  */
  bs.cur_speed_est = bs.cur_speed_est + 0.5*bs.interval*bs.balance_torque;
    21c0:	80 90 a7 05 	lds	r8, 0x05A7
    21c4:	90 90 a8 05 	lds	r9, 0x05A8
    21c8:	a0 90 a9 05 	lds	r10, 0x05A9
    21cc:	b0 90 aa 05 	lds	r11, 0x05AA
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	5f e3       	ldi	r21, 0x3F	; 63
    21d8:	c5 01       	movw	r24, r10
    21da:	b4 01       	movw	r22, r8
    21dc:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    21e0:	9b 01       	movw	r18, r22
    21e2:	ac 01       	movw	r20, r24
    21e4:	c8 01       	movw	r24, r16
    21e6:	b7 01       	movw	r22, r14
    21e8:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    21ec:	9b 01       	movw	r18, r22
    21ee:	ac 01       	movw	r20, r24
    21f0:	6e 85       	ldd	r22, Y+14	; 0x0e
    21f2:	7f 85       	ldd	r23, Y+15	; 0x0f
    21f4:	88 89       	ldd	r24, Y+16	; 0x10
    21f6:	99 89       	ldd	r25, Y+17	; 0x11
    21f8:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    21fc:	60 93 1f 06 	sts	0x061F, r22
    2200:	70 93 20 06 	sts	0x0620, r23
    2204:	80 93 21 06 	sts	0x0621, r24
    2208:	90 93 22 06 	sts	0x0622, r25

  /*
    Avoid trusting the accelerometer when we're accelerating hard.
   */
  bs.pitch_filter.angle_noise = fmax(bs.pitch_filter.angle_noise, fabs(bs.balance_torque)*10.0);
    220c:	c8 01       	movw	r24, r16
    220e:	b7 01       	movw	r22, r14
    2210:	0e 94 38 03 	call	0x670	; 0x670 <my_fabs>
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e2       	ldi	r20, 0x20	; 32
    221a:	51 e4       	ldi	r21, 0x41	; 65
    221c:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    2220:	9b 01       	movw	r18, r22
    2222:	ac 01       	movw	r20, r24
    2224:	60 91 4f 06 	lds	r22, 0x064F
    2228:	70 91 50 06 	lds	r23, 0x0650
    222c:	80 91 51 06 	lds	r24, 0x0651
    2230:	90 91 52 06 	lds	r25, 0x0652
    2234:	0e 94 51 03 	call	0x6a2	; 0x6a2 <fmax>
    2238:	60 93 4f 06 	sts	0x064F, r22
    223c:	70 93 50 06 	sts	0x0650, r23
    2240:	80 93 51 06 	sts	0x0651, r24
    2244:	90 93 52 06 	sts	0x0652, r25
  lpf_update(&bs.pitch_filter.angle_noise, 0.5, bs.interval, 0.0);
    2248:	0f 2e       	mov	r0, r31
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	cf 2e       	mov	r12, r31
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	df 2e       	mov	r13, r31
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	ef 2e       	mov	r14, r31
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	ff 2e       	mov	r15, r31
    225a:	f0 2d       	mov	r31, r0
    225c:	95 01       	movw	r18, r10
    225e:	84 01       	movw	r16, r8
    2260:	40 e0       	ldi	r20, 0x00	; 0
    2262:	50 e0       	ldi	r21, 0x00	; 0
    2264:	60 e0       	ldi	r22, 0x00	; 0
    2266:	7f e3       	ldi	r23, 0x3F	; 63
    2268:	8f e4       	ldi	r24, 0x4F	; 79
    226a:	96 e0       	ldi	r25, 0x06	; 6
    226c:	0e 94 cd 02 	call	0x59a	; 0x59a <lpf_update>
  
  /*
    Annoy the operator by adding a wobble.
   */
  if (bs.stick_shake!=0.0) {
    2270:	e0 90 27 06 	lds	r14, 0x0627
    2274:	f0 90 28 06 	lds	r15, 0x0628
    2278:	00 91 29 06 	lds	r16, 0x0629
    227c:	10 91 2a 06 	lds	r17, 0x062A
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 e0       	ldi	r20, 0x00	; 0
    2286:	50 e0       	ldi	r21, 0x00	; 0
    2288:	c8 01       	movw	r24, r16
    228a:	b7 01       	movw	r22, r14
    228c:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
    2290:	88 23       	and	r24, r24
    2292:	c1 f0       	breq	.+48     	; 0x22c4 <balance+0xe3a>
    if (bal_tickno&8) {
    2294:	80 91 0d 05 	lds	r24, 0x050D
    2298:	83 fd       	sbrc	r24, 3
    229a:	e3 c2       	rjmp	.+1478   	; 0x2862 <balance+0x13d8>
      bs.cmd += bs.stick_shake;
    } else {
      bs.cmd -= bs.stick_shake;
    229c:	a8 01       	movw	r20, r16
    229e:	97 01       	movw	r18, r14
    22a0:	60 91 2f 06 	lds	r22, 0x062F
    22a4:	70 91 30 06 	lds	r23, 0x0630
    22a8:	80 91 31 06 	lds	r24, 0x0631
    22ac:	90 91 32 06 	lds	r25, 0x0632
    22b0:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
    22b4:	60 93 2f 06 	sts	0x062F, r22
    22b8:	70 93 30 06 	sts	0x0630, r23
    22bc:	80 93 31 06 	sts	0x0631, r24
    22c0:	90 93 32 06 	sts	0x0632, r25
    }
  }

  if (at_limit) {
    22c4:	f9 81       	ldd	r31, Y+1	; 0x01
    22c6:	ff 23       	and	r31, r31
    22c8:	09 f4       	brne	.+2      	; 0x22cc <balance+0xe42>
    22ca:	b5 c2       	rjmp	.+1386   	; 0x2836 <balance+0x13ac>
    bs.full_speed_time += bs.interval;
    22cc:	60 91 e7 05 	lds	r22, 0x05E7
    22d0:	70 91 e8 05 	lds	r23, 0x05E8
    22d4:	80 91 e9 05 	lds	r24, 0x05E9
    22d8:	90 91 ea 05 	lds	r25, 0x05EA
    22dc:	20 91 a7 05 	lds	r18, 0x05A7
    22e0:	30 91 a8 05 	lds	r19, 0x05A8
    22e4:	40 91 a9 05 	lds	r20, 0x05A9
    22e8:	50 91 aa 05 	lds	r21, 0x05AA
    22ec:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    22f0:	60 93 e7 05 	sts	0x05E7, r22
    22f4:	70 93 e8 05 	sts	0x05E8, r23
    22f8:	80 93 e9 05 	sts	0x05E9, r24
    22fc:	90 93 ea 05 	sts	0x05EA, r25
    if (bs.full_speed_time > 0.5) {
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	5f e3       	ldi	r21, 0x3F	; 63
    2308:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
    230c:	18 16       	cp	r1, r24
    230e:	0c f4       	brge	.+2      	; 0x2312 <balance+0xe88>
    2310:	a1 c2       	rjmp	.+1346   	; 0x2854 <balance+0x13ca>
      bs.mode=MODE_TIPPED;
      bs.mode_reason=5;
    }
  } else {
    bs.full_speed_time = 0.0;
  }

#ifdef CATCH_GLITCHES
  if (bs.cmd > 0.3 || bs.cmd < -0.3) {
    barf();
  }
#endif

  /* Ramp up softstart over the first second */
  if (bs.pitch_filter.angle_inited && bs.pitch_filter.rate_inited) {
    2312:	80 91 54 06 	lds	r24, 0x0654
    2316:	88 23       	and	r24, r24
    2318:	29 f0       	breq	.+10     	; 0x2324 <balance+0xe9a>
    231a:	80 91 53 06 	lds	r24, 0x0653
    231e:	88 23       	and	r24, r24
    2320:	09 f0       	breq	.+2      	; 0x2324 <balance+0xe9a>
    2322:	10 c3       	rjmp	.+1568   	; 0x2944 <balance+0x14ba>
    bs.softstart = fmin(1.0, bs.softstart + 1.0*bs.interval);
    bs.start_protection = fmin(1.0, bs.start_protection + 0.25*bs.interval);
  }


#ifdef DO_STEERING

  /* Maximum steering rate calculation. At zero speed you want to be able to spin like a top
     but at high speed it needs to be gentle. We do an asymptotic slope */
  bs.steer_rate = bc.steer_rate_num / (bc.steer_rate_den * (2.0 - bs.lpf_knob1) + bs.cur_speed_est*bs.cur_speed_est) * bs.softstart;
    2324:	a0 90 1f 06 	lds	r10, 0x061F
    2328:	b0 90 20 06 	lds	r11, 0x0620
    232c:	c0 90 21 06 	lds	r12, 0x0621
    2330:	d0 90 22 06 	lds	r13, 0x0622
    2334:	20 91 07 06 	lds	r18, 0x0607
    2338:	30 91 08 06 	lds	r19, 0x0608
    233c:	40 91 09 06 	lds	r20, 0x0609
    2340:	50 91 0a 06 	lds	r21, 0x060A
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	70 e0       	ldi	r23, 0x00	; 0
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	90 e4       	ldi	r25, 0x40	; 64
    234c:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
    2350:	20 91 7f 05 	lds	r18, 0x057F
    2354:	30 91 80 05 	lds	r19, 0x0580
    2358:	40 91 81 05 	lds	r20, 0x0581
    235c:	50 91 82 05 	lds	r21, 0x0582
    2360:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    2364:	7b 01       	movw	r14, r22
    2366:	8c 01       	movw	r16, r24
    2368:	a6 01       	movw	r20, r12
    236a:	95 01       	movw	r18, r10
    236c:	c6 01       	movw	r24, r12
    236e:	b5 01       	movw	r22, r10
    2370:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    2374:	9b 01       	movw	r18, r22
    2376:	ac 01       	movw	r20, r24
    2378:	c8 01       	movw	r24, r16
    237a:	b7 01       	movw	r22, r14
    237c:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    2380:	9b 01       	movw	r18, r22
    2382:	ac 01       	movw	r20, r24
    2384:	60 91 7b 05 	lds	r22, 0x057B
    2388:	70 91 7c 05 	lds	r23, 0x057C
    238c:	80 91 7d 05 	lds	r24, 0x057D
    2390:	90 91 7e 05 	lds	r25, 0x057E
    2394:	0e 94 ef 1b 	call	0x37de	; 0x37de <__divsf3>
    2398:	20 91 0b 06 	lds	r18, 0x060B
    239c:	30 91 0c 06 	lds	r19, 0x060C
    23a0:	40 91 0d 06 	lds	r20, 0x060D
    23a4:	50 91 0e 06 	lds	r21, 0x060E
    23a8:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    23ac:	7b 01       	movw	r14, r22
    23ae:	8c 01       	movw	r16, r24
    23b0:	60 93 33 06 	sts	0x0633, r22
    23b4:	70 93 34 06 	sts	0x0634, r23
    23b8:	80 93 35 06 	sts	0x0635, r24
    23bc:	90 93 36 06 	sts	0x0636, r25


  /* 
     Set yaw gain. Gain is constant except at low speed where it drops off. I like to drop it off because
     you don't need it for stability, and it lets you twist the scooter with your feet. 
  */
  float yaw_steer_gain_adj = fmin(1.0, fabs(bs.cur_speed_est) / bc.yaw_steer_speed_thresh) * bc.yaw_steer_gain;
    23c0:	c6 01       	movw	r24, r12
    23c2:	b5 01       	movw	r22, r10
    23c4:	0e 94 38 03 	call	0x670	; 0x670 <my_fabs>
    23c8:	20 91 63 05 	lds	r18, 0x0563
    23cc:	30 91 64 05 	lds	r19, 0x0564
    23d0:	40 91 65 05 	lds	r20, 0x0565
    23d4:	50 91 66 05 	lds	r21, 0x0566
    23d8:	0e 94 ef 1b 	call	0x37de	; 0x37de <__divsf3>
    23dc:	9b 01       	movw	r18, r22
    23de:	ac 01       	movw	r20, r24
    23e0:	60 e0       	ldi	r22, 0x00	; 0
    23e2:	70 e0       	ldi	r23, 0x00	; 0
    23e4:	80 e8       	ldi	r24, 0x80	; 128
    23e6:	9f e3       	ldi	r25, 0x3F	; 63
    23e8:	0e 94 6e 03 	call	0x6dc	; 0x6dc <fmin>
    23ec:	20 91 5f 05 	lds	r18, 0x055F
    23f0:	30 91 60 05 	lds	r19, 0x0560
    23f4:	40 91 61 05 	lds	r20, 0x0561
    23f8:	50 91 62 05 	lds	r21, 0x0562
    23fc:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    2400:	3b 01       	movw	r6, r22
    2402:	4c 01       	movw	r8, r24

  float desired_steer = bs.steer_rate*bs.lpf_steering;
    2404:	20 91 fb 05 	lds	r18, 0x05FB
    2408:	30 91 fc 05 	lds	r19, 0x05FC
    240c:	40 91 fd 05 	lds	r20, 0x05FD
    2410:	50 91 fe 05 	lds	r21, 0x05FE
    2414:	c8 01       	movw	r24, r16
    2416:	b7 01       	movw	r22, r14
    2418:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    241c:	5b 01       	movw	r10, r22
    241e:	6c 01       	movw	r12, r24

  // Make sure to saturate at the same values as the gyro saturates.
  bs.target_yaw = flim(desired_steer * bc.yaw_target_mult, -2.1817, 2.1817);
    2420:	20 91 87 05 	lds	r18, 0x0587
    2424:	30 91 88 05 	lds	r19, 0x0588
    2428:	40 91 89 05 	lds	r20, 0x0589
    242c:	50 91 8a 05 	lds	r21, 0x058A
    2430:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    2434:	0f 2e       	mov	r0, r31
    2436:	f9 ef       	ldi	r31, 0xF9	; 249
    2438:	ef 2e       	mov	r14, r31
    243a:	f0 ea       	ldi	r31, 0xA0	; 160
    243c:	ff 2e       	mov	r15, r31
    243e:	fb e0       	ldi	r31, 0x0B	; 11
    2440:	0f 2f       	mov	r16, r31
    2442:	f0 e4       	ldi	r31, 0x40	; 64
    2444:	1f 2f       	mov	r17, r31
    2446:	f0 2d       	mov	r31, r0
    2448:	29 ef       	ldi	r18, 0xF9	; 249
    244a:	30 ea       	ldi	r19, 0xA0	; 160
    244c:	4b e0       	ldi	r20, 0x0B	; 11
    244e:	50 ec       	ldi	r21, 0xC0	; 192
    2450:	0e 94 8b 03 	call	0x716	; 0x716 <flim>
    2454:	60 93 03 06 	sts	0x0603, r22
    2458:	70 93 04 06 	sts	0x0604, r23
    245c:	80 93 05 06 	sts	0x0605, r24
    2460:	90 93 06 06 	sts	0x0606, r25
  
  // Differential steering
  bs.steer_diff = desired_steer + yaw_steer_gain_adj * (bs.target_yaw - bs.lpf_yaw_rate);
    2464:	20 91 ff 05 	lds	r18, 0x05FF
    2468:	30 91 00 06 	lds	r19, 0x0600
    246c:	40 91 01 06 	lds	r20, 0x0601
    2470:	50 91 02 06 	lds	r21, 0x0602
    2474:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
    2478:	9b 01       	movw	r18, r22
    247a:	ac 01       	movw	r20, r24
    247c:	c4 01       	movw	r24, r8
    247e:	b3 01       	movw	r22, r6
    2480:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    2484:	9b 01       	movw	r18, r22
    2486:	ac 01       	movw	r20, r24
    2488:	c6 01       	movw	r24, r12
    248a:	b5 01       	movw	r22, r10
    248c:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    2490:	5b 01       	movw	r10, r22
    2492:	6c 01       	movw	r12, r24
    2494:	60 93 37 06 	sts	0x0637, r22
    2498:	70 93 38 06 	sts	0x0638, r23
    249c:	80 93 39 06 	sts	0x0639, r24
    24a0:	90 93 3a 06 	sts	0x063A, r25
  
  bs.left_pwm =  flim(bs.cmd - bs.steer_diff, -bs.start_protection, bs.start_protection);
    24a4:	60 90 0f 06 	lds	r6, 0x060F
    24a8:	70 90 10 06 	lds	r7, 0x0610
    24ac:	80 90 11 06 	lds	r8, 0x0611
    24b0:	90 90 12 06 	lds	r9, 0x0612
    24b4:	d4 01       	movw	r26, r8
    24b6:	c3 01       	movw	r24, r6
    24b8:	b0 58       	subi	r27, 0x80	; 128
    24ba:	8e 83       	std	Y+6, r24	; 0x06
    24bc:	9f 83       	std	Y+7, r25	; 0x07
    24be:	a8 87       	std	Y+8, r26	; 0x08
    24c0:	b9 87       	std	Y+9, r27	; 0x09
    24c2:	20 90 2f 06 	lds	r2, 0x062F
    24c6:	30 90 30 06 	lds	r3, 0x0630
    24ca:	40 90 31 06 	lds	r4, 0x0631
    24ce:	50 90 32 06 	lds	r5, 0x0632
    24d2:	a6 01       	movw	r20, r12
    24d4:	95 01       	movw	r18, r10
    24d6:	c2 01       	movw	r24, r4
    24d8:	b1 01       	movw	r22, r2
    24da:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
    24de:	84 01       	movw	r16, r8
    24e0:	73 01       	movw	r14, r6
    24e2:	2e 81       	ldd	r18, Y+6	; 0x06
    24e4:	3f 81       	ldd	r19, Y+7	; 0x07
    24e6:	48 85       	ldd	r20, Y+8	; 0x08
    24e8:	59 85       	ldd	r21, Y+9	; 0x09
    24ea:	0e 94 8b 03 	call	0x716	; 0x716 <flim>
    24ee:	60 93 3b 06 	sts	0x063B, r22
    24f2:	70 93 3c 06 	sts	0x063C, r23
    24f6:	80 93 3d 06 	sts	0x063D, r24
    24fa:	90 93 3e 06 	sts	0x063E, r25
  bs.right_pwm = flim(bs.cmd + bs.steer_diff, -bs.start_protection, bs.start_protection);
    24fe:	a2 01       	movw	r20, r4
    2500:	91 01       	movw	r18, r2
    2502:	c6 01       	movw	r24, r12
    2504:	b5 01       	movw	r22, r10
    2506:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    250a:	2e 81       	ldd	r18, Y+6	; 0x06
    250c:	3f 81       	ldd	r19, Y+7	; 0x07
    250e:	48 85       	ldd	r20, Y+8	; 0x08
    2510:	59 85       	ldd	r21, Y+9	; 0x09
    2512:	0e 94 8b 03 	call	0x716	; 0x716 <flim>
    2516:	60 93 3f 06 	sts	0x063F, r22
    251a:	70 93 40 06 	sts	0x0640, r23
    251e:	80 93 41 06 	sts	0x0641, r24
    2522:	90 93 42 06 	sts	0x0642, r25
#else
  bs.left_pwm = bs.cmd;
#endif

  /* Boost the PWM signal around 0, to overcome motor stiction */
  do_crossover(&bs.left_pwm, bc.crossover_boost, 2.0);
    2526:	40 91 9b 05 	lds	r20, 0x059B
    252a:	50 91 9c 05 	lds	r21, 0x059C
    252e:	60 91 9d 05 	lds	r22, 0x059D
    2532:	70 91 9e 05 	lds	r23, 0x059E
    2536:	00 e0       	ldi	r16, 0x00	; 0
    2538:	10 e0       	ldi	r17, 0x00	; 0
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e4       	ldi	r19, 0x40	; 64
    253e:	8b e3       	ldi	r24, 0x3B	; 59
    2540:	96 e0       	ldi	r25, 0x06	; 6
    2542:	0e 94 be 06 	call	0xd7c	; 0xd7c <do_crossover>
#ifdef DO_STEERING
  do_crossover(&bs.right_pwm, bc.crossover_boost, 2.0);
    2546:	40 91 9b 05 	lds	r20, 0x059B
    254a:	50 91 9c 05 	lds	r21, 0x059C
    254e:	60 91 9d 05 	lds	r22, 0x059D
    2552:	70 91 9e 05 	lds	r23, 0x059E
    2556:	00 e0       	ldi	r16, 0x00	; 0
    2558:	10 e0       	ldi	r17, 0x00	; 0
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e4       	ldi	r19, 0x40	; 64
    255e:	8f e3       	ldi	r24, 0x3F	; 63
    2560:	96 e0       	ldi	r25, 0x06	; 6
    2562:	0e 94 be 06 	call	0xd7c	; 0xd7c <do_crossover>
#endif

#ifdef DO_STEERING
  set_motors(+bs.left_pwm, +bs.right_pwm);
    2566:	20 91 3f 06 	lds	r18, 0x063F
    256a:	30 91 40 06 	lds	r19, 0x0640
    256e:	40 91 41 06 	lds	r20, 0x0641
    2572:	50 91 42 06 	lds	r21, 0x0642
    2576:	60 91 3b 06 	lds	r22, 0x063B
    257a:	70 91 3c 06 	lds	r23, 0x063C
    257e:	80 91 3d 06 	lds	r24, 0x063D
    2582:	90 91 3e 06 	lds	r25, 0x063E
    2586:	0e 94 5e 09 	call	0x12bc	; 0x12bc <set_motors>
#else
  set_motors(+bs.left_pwm);
#endif

#if defined(__BAL2__) || defined(__BAL3__) || defined(__BAL4__)
  /* If we're hitting the speed limit on any wheel, beep */
  if (bs.left_pwm > bc.beep_speed_lim || 
    258a:	a0 90 3b 06 	lds	r10, 0x063B
    258e:	b0 90 3c 06 	lds	r11, 0x063C
    2592:	c0 90 3d 06 	lds	r12, 0x063D
    2596:	d0 90 3e 06 	lds	r13, 0x063E
    259a:	e0 90 73 05 	lds	r14, 0x0573
    259e:	f0 90 74 05 	lds	r15, 0x0574
    25a2:	00 91 75 05 	lds	r16, 0x0575
    25a6:	10 91 76 05 	lds	r17, 0x0576
    25aa:	a8 01       	movw	r20, r16
    25ac:	97 01       	movw	r18, r14
    25ae:	c6 01       	movw	r24, r12
    25b0:	b5 01       	movw	r22, r10
    25b2:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
    25b6:	18 16       	cp	r1, r24
    25b8:	0c f4       	brge	.+2      	; 0x25bc <balance+0x1132>
    25ba:	76 c0       	rjmp	.+236    	; 0x26a8 <balance+0x121e>
    25bc:	37 01       	movw	r6, r14
    25be:	48 01       	movw	r8, r16
    25c0:	97 fa       	bst	r9, 7
    25c2:	90 94       	com	r9
    25c4:	97 f8       	bld	r9, 7
    25c6:	90 94       	com	r9
    25c8:	a4 01       	movw	r20, r8
    25ca:	93 01       	movw	r18, r6
    25cc:	c6 01       	movw	r24, r12
    25ce:	b5 01       	movw	r22, r10
    25d0:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
    25d4:	87 fd       	sbrc	r24, 7
    25d6:	68 c0       	rjmp	.+208    	; 0x26a8 <balance+0x121e>
    25d8:	99 81       	ldd	r25, Y+1	; 0x01
    25da:	99 23       	and	r25, r25
    25dc:	09 f0       	breq	.+2      	; 0x25e0 <balance+0x1156>
    25de:	64 c0       	rjmp	.+200    	; 0x26a8 <balance+0x121e>
    25e0:	a0 90 3f 06 	lds	r10, 0x063F
    25e4:	b0 90 40 06 	lds	r11, 0x0640
    25e8:	c0 90 41 06 	lds	r12, 0x0641
    25ec:	d0 90 42 06 	lds	r13, 0x0642
    25f0:	a6 01       	movw	r20, r12
    25f2:	95 01       	movw	r18, r10
    25f4:	c8 01       	movw	r24, r16
    25f6:	b7 01       	movw	r22, r14
    25f8:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
    25fc:	87 fd       	sbrc	r24, 7
    25fe:	54 c0       	rjmp	.+168    	; 0x26a8 <balance+0x121e>
    2600:	a6 01       	movw	r20, r12
    2602:	95 01       	movw	r18, r10
    2604:	c4 01       	movw	r24, r8
    2606:	b3 01       	movw	r22, r6
    2608:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
    260c:	18 16       	cp	r1, r24
    260e:	0c f4       	brge	.+2      	; 0x2612 <balance+0x1188>
    2610:	4b c0       	rjmp	.+150    	; 0x26a8 <balance+0x121e>
    2612:	e0 90 bb 05 	lds	r14, 0x05BB
    2616:	f0 90 bc 05 	lds	r15, 0x05BC
    261a:	00 91 bd 05 	lds	r16, 0x05BD
    261e:	10 91 be 05 	lds	r17, 0x05BE
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	40 e8       	ldi	r20, 0x80	; 128
    2628:	5f e3       	ldi	r21, 0x3F	; 63
    262a:	c8 01       	movw	r24, r16
    262c:	b7 01       	movw	r22, r14
    262e:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
    2632:	18 16       	cp	r1, r24
    2634:	cc f1       	brlt	.+114    	; 0x26a8 <balance+0x121e>
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e8       	ldi	r20, 0x80	; 128
    263c:	5f eb       	ldi	r21, 0xBF	; 191
    263e:	c8 01       	movw	r24, r16
    2640:	b7 01       	movw	r22, r14
    2642:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
    2646:	87 fd       	sbrc	r24, 7
    2648:	2f c0       	rjmp	.+94     	; 0x26a8 <balance+0x121e>
    264a:	e0 90 93 05 	lds	r14, 0x0593
    264e:	f0 90 94 05 	lds	r15, 0x0594
    2652:	00 91 95 05 	lds	r16, 0x0595
    2656:	10 91 96 05 	lds	r17, 0x0596
    265a:	60 91 db 05 	lds	r22, 0x05DB
    265e:	70 91 dc 05 	lds	r23, 0x05DC
    2662:	80 91 dd 05 	lds	r24, 0x05DD
    2666:	90 91 de 05 	lds	r25, 0x05DE
    266a:	0e 94 38 03 	call	0x670	; 0x670 <my_fabs>
    266e:	a8 01       	movw	r20, r16
    2670:	97 01       	movw	r18, r14
    2672:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
    2676:	18 16       	cp	r1, r24
    2678:	0c f0       	brlt	.+2      	; 0x267c <balance+0x11f2>
    267a:	c5 c1       	rjmp	.+906    	; 0x2a06 <balance+0x157c>
    267c:	80 91 0d 05 	lds	r24, 0x050D
    2680:	8c 70       	andi	r24, 0x0C	; 12
    2682:	88 30       	cpi	r24, 0x08	; 8
    2684:	89 f0       	breq	.+34     	; 0x26a8 <balance+0x121e>
    2686:	2d ec       	ldi	r18, 0xCD	; 205
    2688:	3c ec       	ldi	r19, 0xCC	; 204
    268a:	4c e4       	ldi	r20, 0x4C	; 76
    268c:	5e e3       	ldi	r21, 0x3E	; 62
    268e:	60 91 a3 05 	lds	r22, 0x05A3
    2692:	70 91 a4 05 	lds	r23, 0x05A4
    2696:	80 91 a5 05 	lds	r24, 0x05A5
    269a:	90 91 a6 05 	lds	r25, 0x05A6
    269e:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
    26a2:	88 23       	and	r24, r24
    26a4:	0c f0       	brlt	.+2      	; 0x26a8 <balance+0x121e>
    26a6:	7f cb       	rjmp	.-2306   	; 0x1da6 <balance+0x91c>
    26a8:	1a 98       	cbi	0x03, 2	; 3
    26aa:	c1 c1       	rjmp	.+898    	; 0x2a2e <balance+0x15a4>
    26ac:	2a e9       	ldi	r18, 0x9A	; 154
    26ae:	39 e9       	ldi	r19, 0x99	; 153
    26b0:	49 e1       	ldi	r20, 0x19	; 25
    26b2:	5f eb       	ldi	r21, 0xBF	; 191
    26b4:	c6 01       	movw	r24, r12
    26b6:	b5 01       	movw	r22, r10
    26b8:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
    26bc:	88 23       	and	r24, r24
    26be:	0c f0       	brlt	.+2      	; 0x26c2 <balance+0x1238>
    26c0:	50 cb       	rjmp	.-2400   	; 0x1d62 <balance+0x8d8>
    26c2:	82 e0       	ldi	r24, 0x02	; 2
    26c4:	80 93 5b 06 	sts	0x065B, r24
    26c8:	83 e0       	ldi	r24, 0x03	; 3
    26ca:	80 93 5c 06 	sts	0x065C, r24
    26ce:	49 cb       	rjmp	.-2414   	; 0x1d62 <balance+0x8d8>
    26d0:	20 91 a7 05 	lds	r18, 0x05A7
    26d4:	30 91 a8 05 	lds	r19, 0x05A8
    26d8:	40 91 a9 05 	lds	r20, 0x05A9
    26dc:	50 91 aa 05 	lds	r21, 0x05AA
    26e0:	c4 01       	movw	r24, r8
    26e2:	b3 01       	movw	r22, r6
    26e4:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	40 e8       	ldi	r20, 0x80	; 128
    26ee:	50 e4       	ldi	r21, 0x40	; 64
    26f0:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    26f4:	20 91 f7 05 	lds	r18, 0x05F7
    26f8:	30 91 f8 05 	lds	r19, 0x05F8
    26fc:	40 91 f9 05 	lds	r20, 0x05F9
    2700:	50 91 fa 05 	lds	r21, 0x05FA
    2704:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    2708:	0f 2e       	mov	r0, r31
    270a:	fd ec       	ldi	r31, 0xCD	; 205
    270c:	ef 2e       	mov	r14, r31
    270e:	fc ec       	ldi	r31, 0xCC	; 204
    2710:	ff 2e       	mov	r15, r31
    2712:	fc ec       	ldi	r31, 0xCC	; 204
    2714:	0f 2f       	mov	r16, r31
    2716:	fd e3       	ldi	r31, 0x3D	; 61
    2718:	1f 2f       	mov	r17, r31
    271a:	f0 2d       	mov	r31, r0
    271c:	2d ec       	ldi	r18, 0xCD	; 205
    271e:	3c ec       	ldi	r19, 0xCC	; 204
    2720:	4c ec       	ldi	r20, 0xCC	; 204
    2722:	5d eb       	ldi	r21, 0xBD	; 189
    2724:	0e 94 8b 03 	call	0x716	; 0x716 <flim>
    2728:	60 93 f7 05 	sts	0x05F7, r22
    272c:	70 93 f8 05 	sts	0x05F8, r23
    2730:	80 93 f9 05 	sts	0x05F9, r24
    2734:	90 93 fa 05 	sts	0x05FA, r25
    2738:	00 cb       	rjmp	.-2560   	; 0x1d3a <balance+0x8b0>
    273a:	a4 01       	movw	r20, r8
    273c:	93 01       	movw	r18, r6
    273e:	6e 85       	ldd	r22, Y+14	; 0x0e
    2740:	7f 85       	ldd	r23, Y+15	; 0x0f
    2742:	88 89       	ldd	r24, Y+16	; 0x10
    2744:	99 89       	ldd	r25, Y+17	; 0x11
    2746:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
    274a:	7b 01       	movw	r14, r22
    274c:	8c 01       	movw	r16, r24
    274e:	60 93 13 06 	sts	0x0613, r22
    2752:	70 93 14 06 	sts	0x0614, r23
    2756:	80 93 15 06 	sts	0x0615, r24
    275a:	90 93 16 06 	sts	0x0616, r25
    275e:	60 91 a7 05 	lds	r22, 0x05A7
    2762:	70 91 a8 05 	lds	r23, 0x05A8
    2766:	80 91 a9 05 	lds	r24, 0x05A9
    276a:	90 91 aa 05 	lds	r25, 0x05AA
    276e:	9b 01       	movw	r18, r22
    2770:	ac 01       	movw	r20, r24
    2772:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    2776:	5b 01       	movw	r10, r22
    2778:	6c 01       	movw	r12, r24
    277a:	2a e0       	ldi	r18, 0x0A	; 10
    277c:	37 ed       	ldi	r19, 0xD7	; 215
    277e:	43 ea       	ldi	r20, 0xA3	; 163
    2780:	5d e3       	ldi	r21, 0x3D	; 61
    2782:	c8 01       	movw	r24, r16
    2784:	b7 01       	movw	r22, r14
    2786:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
    278a:	9b 01       	movw	r18, r22
    278c:	ac 01       	movw	r20, r24
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	70 e0       	ldi	r23, 0x00	; 0
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	0e 94 51 03 	call	0x6a2	; 0x6a2 <fmax>
    279a:	9b 01       	movw	r18, r22
    279c:	ac 01       	movw	r20, r24
    279e:	c6 01       	movw	r24, r12
    27a0:	b5 01       	movw	r22, r10
    27a2:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    27a6:	9b 01       	movw	r18, r22
    27a8:	ac 01       	movw	r20, r24
    27aa:	60 91 17 06 	lds	r22, 0x0617
    27ae:	70 91 18 06 	lds	r23, 0x0618
    27b2:	80 91 19 06 	lds	r24, 0x0619
    27b6:	90 91 1a 06 	lds	r25, 0x061A
    27ba:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    27be:	5b 01       	movw	r10, r22
    27c0:	6c 01       	movw	r12, r24
    27c2:	60 93 17 06 	sts	0x0617, r22
    27c6:	70 93 18 06 	sts	0x0618, r23
    27ca:	80 93 19 06 	sts	0x0619, r24
    27ce:	90 93 1a 06 	sts	0x061A, r25
    27d2:	17 ca       	rjmp	.-3026   	; 0x1c02 <balance+0x778>
    27d4:	a2 01       	movw	r20, r4
    27d6:	91 01       	movw	r18, r2
    27d8:	6e 85       	ldd	r22, Y+14	; 0x0e
    27da:	7f 85       	ldd	r23, Y+15	; 0x0f
    27dc:	88 89       	ldd	r24, Y+16	; 0x10
    27de:	99 89       	ldd	r25, Y+17	; 0x11
    27e0:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    27e4:	7b 01       	movw	r14, r22
    27e6:	8c 01       	movw	r16, r24
    27e8:	60 93 13 06 	sts	0x0613, r22
    27ec:	70 93 14 06 	sts	0x0614, r23
    27f0:	80 93 15 06 	sts	0x0615, r24
    27f4:	90 93 16 06 	sts	0x0616, r25
    27f8:	60 91 a7 05 	lds	r22, 0x05A7
    27fc:	70 91 a8 05 	lds	r23, 0x05A8
    2800:	80 91 a9 05 	lds	r24, 0x05A9
    2804:	90 91 aa 05 	lds	r25, 0x05AA
    2808:	9b 01       	movw	r18, r22
    280a:	ac 01       	movw	r20, r24
    280c:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    2810:	5b 01       	movw	r10, r22
    2812:	6c 01       	movw	r12, r24
    2814:	2a e0       	ldi	r18, 0x0A	; 10
    2816:	37 ed       	ldi	r19, 0xD7	; 215
    2818:	43 ea       	ldi	r20, 0xA3	; 163
    281a:	5d e3       	ldi	r21, 0x3D	; 61
    281c:	c8 01       	movw	r24, r16
    281e:	b7 01       	movw	r22, r14
    2820:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    2824:	9b 01       	movw	r18, r22
    2826:	ac 01       	movw	r20, r24
    2828:	60 e0       	ldi	r22, 0x00	; 0
    282a:	70 e0       	ldi	r23, 0x00	; 0
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	0e 94 6e 03 	call	0x6dc	; 0x6dc <fmin>
    2834:	b2 cf       	rjmp	.-156    	; 0x279a <balance+0x1310>
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	a0 e0       	ldi	r26, 0x00	; 0
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	80 93 e7 05 	sts	0x05E7, r24
    2842:	90 93 e8 05 	sts	0x05E8, r25
    2846:	a0 93 e9 05 	sts	0x05E9, r26
    284a:	b0 93 ea 05 	sts	0x05EA, r27
    284e:	61 cd       	rjmp	.-1342   	; 0x2312 <balance+0xe88>
    2850:	19 82       	std	Y+1, r1	; 0x01
    2852:	8c cc       	rjmp	.-1768   	; 0x216c <balance+0xce2>
    2854:	82 e0       	ldi	r24, 0x02	; 2
    2856:	80 93 5b 06 	sts	0x065B, r24
    285a:	85 e0       	ldi	r24, 0x05	; 5
    285c:	80 93 5c 06 	sts	0x065C, r24
    2860:	58 cd       	rjmp	.-1360   	; 0x2312 <balance+0xe88>
    2862:	20 91 2f 06 	lds	r18, 0x062F
    2866:	30 91 30 06 	lds	r19, 0x0630
    286a:	40 91 31 06 	lds	r20, 0x0631
    286e:	50 91 32 06 	lds	r21, 0x0632
    2872:	c8 01       	movw	r24, r16
    2874:	b7 01       	movw	r22, r14
    2876:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    287a:	60 93 2f 06 	sts	0x062F, r22
    287e:	70 93 30 06 	sts	0x0630, r23
    2882:	80 93 31 06 	sts	0x0631, r24
    2886:	90 93 32 06 	sts	0x0632, r25
    288a:	1c cd       	rjmp	.-1480   	; 0x22c4 <balance+0xe3a>
    288c:	e0 90 8b 05 	lds	r14, 0x058B
    2890:	f0 90 8c 05 	lds	r15, 0x058C
    2894:	00 91 8d 05 	lds	r16, 0x058D
    2898:	10 91 8e 05 	lds	r17, 0x058E
    289c:	17 fb       	bst	r17, 7
    289e:	10 95       	com	r17
    28a0:	17 f9       	bld	r17, 7
    28a2:	10 95       	com	r17
    28a4:	20 91 67 05 	lds	r18, 0x0567
    28a8:	30 91 68 05 	lds	r19, 0x0568
    28ac:	40 91 69 05 	lds	r20, 0x0569
    28b0:	50 91 6a 05 	lds	r21, 0x056A
    28b4:	50 58       	subi	r21, 0x80	; 128
    28b6:	6a 81       	ldd	r22, Y+2	; 0x02
    28b8:	7b 81       	ldd	r23, Y+3	; 0x03
    28ba:	8c 81       	ldd	r24, Y+4	; 0x04
    28bc:	9d 81       	ldd	r25, Y+5	; 0x05
    28be:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    28c2:	2e 85       	ldd	r18, Y+14	; 0x0e
    28c4:	3f 85       	ldd	r19, Y+15	; 0x0f
    28c6:	48 89       	ldd	r20, Y+16	; 0x10
    28c8:	59 89       	ldd	r21, Y+17	; 0x11
    28ca:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
    28ce:	20 91 8f 05 	lds	r18, 0x058F
    28d2:	30 91 90 05 	lds	r19, 0x0590
    28d6:	40 91 91 05 	lds	r20, 0x0591
    28da:	50 91 92 05 	lds	r21, 0x0592
    28de:	0e 94 ef 1b 	call	0x37de	; 0x37de <__divsf3>
    28e2:	a8 01       	movw	r20, r16
    28e4:	97 01       	movw	r18, r14
    28e6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <fmax>
    28ea:	7b 01       	movw	r14, r22
    28ec:	8c 01       	movw	r16, r24
    28ee:	60 93 e3 05 	sts	0x05E3, r22
    28f2:	70 93 e4 05 	sts	0x05E4, r23
    28f6:	80 93 e5 05 	sts	0x05E5, r24
    28fa:	90 93 e6 05 	sts	0x05E6, r25
    28fe:	9b 01       	movw	r18, r22
    2900:	ac 01       	movw	r20, r24
    2902:	c6 01       	movw	r24, r12
    2904:	b5 01       	movw	r22, r10
    2906:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
    290a:	88 23       	and	r24, r24
    290c:	0c f0       	brlt	.+2      	; 0x2910 <balance+0x1486>
    290e:	a0 cf       	rjmp	.-192    	; 0x2850 <balance+0x13c6>
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e0       	ldi	r20, 0x00	; 0
    2916:	50 e0       	ldi	r21, 0x00	; 0
    2918:	c8 01       	movw	r24, r16
    291a:	b7 01       	movw	r22, r14
    291c:	0e 94 5f 1c 	call	0x38be	; 0x38be <__gesf2>
    2920:	88 23       	and	r24, r24
    2922:	0c f4       	brge	.+2      	; 0x2926 <balance+0x149c>
    2924:	65 c0       	rjmp	.+202    	; 0x29f0 <balance+0x1566>
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	a0 e0       	ldi	r26, 0x00	; 0
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	80 93 1b 06 	sts	0x061B, r24
    2932:	90 93 1c 06 	sts	0x061C, r25
    2936:	a0 93 1d 06 	sts	0x061D, r26
    293a:	b0 93 1e 06 	sts	0x061E, r27
    293e:	b1 e0       	ldi	r27, 0x01	; 1
    2940:	b9 83       	std	Y+1, r27	; 0x01
    2942:	14 cc       	rjmp	.-2008   	; 0x216c <balance+0xce2>
    2944:	e0 90 a7 05 	lds	r14, 0x05A7
    2948:	f0 90 a8 05 	lds	r15, 0x05A8
    294c:	00 91 a9 05 	lds	r16, 0x05A9
    2950:	10 91 aa 05 	lds	r17, 0x05AA
    2954:	20 91 0b 06 	lds	r18, 0x060B
    2958:	30 91 0c 06 	lds	r19, 0x060C
    295c:	40 91 0d 06 	lds	r20, 0x060D
    2960:	50 91 0e 06 	lds	r21, 0x060E
    2964:	c8 01       	movw	r24, r16
    2966:	b7 01       	movw	r22, r14
    2968:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    296c:	9b 01       	movw	r18, r22
    296e:	ac 01       	movw	r20, r24
    2970:	60 e0       	ldi	r22, 0x00	; 0
    2972:	70 e0       	ldi	r23, 0x00	; 0
    2974:	80 e8       	ldi	r24, 0x80	; 128
    2976:	9f e3       	ldi	r25, 0x3F	; 63
    2978:	0e 94 6e 03 	call	0x6dc	; 0x6dc <fmin>
    297c:	60 93 0b 06 	sts	0x060B, r22
    2980:	70 93 0c 06 	sts	0x060C, r23
    2984:	80 93 0d 06 	sts	0x060D, r24
    2988:	90 93 0e 06 	sts	0x060E, r25
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	40 e8       	ldi	r20, 0x80	; 128
    2992:	5e e3       	ldi	r21, 0x3E	; 62
    2994:	c8 01       	movw	r24, r16
    2996:	b7 01       	movw	r22, r14
    2998:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__mulsf3>
    299c:	20 91 0f 06 	lds	r18, 0x060F
    29a0:	30 91 10 06 	lds	r19, 0x0610
    29a4:	40 91 11 06 	lds	r20, 0x0611
    29a8:	50 91 12 06 	lds	r21, 0x0612
    29ac:	0e 94 ad 1b 	call	0x375a	; 0x375a <__addsf3>
    29b0:	9b 01       	movw	r18, r22
    29b2:	ac 01       	movw	r20, r24
    29b4:	60 e0       	ldi	r22, 0x00	; 0
    29b6:	70 e0       	ldi	r23, 0x00	; 0
    29b8:	80 e8       	ldi	r24, 0x80	; 128
    29ba:	9f e3       	ldi	r25, 0x3F	; 63
    29bc:	0e 94 6e 03 	call	0x6dc	; 0x6dc <fmin>
    29c0:	60 93 0f 06 	sts	0x060F, r22
    29c4:	70 93 10 06 	sts	0x0610, r23
    29c8:	80 93 11 06 	sts	0x0611, r24
    29cc:	90 93 12 06 	sts	0x0612, r25
    29d0:	a9 cc       	rjmp	.-1710   	; 0x2324 <balance+0xe9a>
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	a0 e0       	ldi	r26, 0x00	; 0
    29d8:	b0 e0       	ldi	r27, 0x00	; 0
    29da:	80 93 1b 06 	sts	0x061B, r24
    29de:	90 93 1c 06 	sts	0x061C, r25
    29e2:	a0 93 1d 06 	sts	0x061D, r26
    29e6:	b0 93 1e 06 	sts	0x061E, r27
    29ea:	91 e0       	ldi	r25, 0x01	; 1
    29ec:	99 83       	std	Y+1, r25	; 0x01
    29ee:	be cb       	rjmp	.-2180   	; 0x216c <balance+0xce2>
    29f0:	e0 92 1b 06 	sts	0x061B, r14
    29f4:	f0 92 1c 06 	sts	0x061C, r15
    29f8:	00 93 1d 06 	sts	0x061D, r16
    29fc:	10 93 1e 06 	sts	0x061E, r17
    2a00:	e1 e0       	ldi	r30, 0x01	; 1
    2a02:	e9 83       	std	Y+1, r30	; 0x01
    2a04:	b3 cb       	rjmp	.-2202   	; 0x216c <balance+0xce2>
    2a06:	60 91 df 05 	lds	r22, 0x05DF
    2a0a:	70 91 e0 05 	lds	r23, 0x05E0
    2a0e:	80 91 e1 05 	lds	r24, 0x05E1
    2a12:	90 91 e2 05 	lds	r25, 0x05E2
    2a16:	0e 94 38 03 	call	0x670	; 0x670 <my_fabs>
    2a1a:	9b 01       	movw	r18, r22
    2a1c:	ac 01       	movw	r20, r24
    2a1e:	c8 01       	movw	r24, r16
    2a20:	b7 01       	movw	r22, r14
    2a22:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
    2a26:	88 23       	and	r24, r24
    2a28:	0c f0       	brlt	.+2      	; 0x2a2c <balance+0x15a2>
    2a2a:	2d ce       	rjmp	.-934    	; 0x2686 <balance+0x11fc>
    2a2c:	27 ce       	rjmp	.-946    	; 0x267c <balance+0x11f2>
    2a2e:	65 96       	adiw	r28, 0x15	; 21
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	cd bf       	out	0x3d, r28	; 61
    2a3a:	df 91       	pop	r29
    2a3c:	cf 91       	pop	r28
    2a3e:	1f 91       	pop	r17
    2a40:	0f 91       	pop	r16
    2a42:	ff 90       	pop	r15
    2a44:	ef 90       	pop	r14
    2a46:	df 90       	pop	r13
    2a48:	cf 90       	pop	r12
    2a4a:	bf 90       	pop	r11
    2a4c:	af 90       	pop	r10
    2a4e:	9f 90       	pop	r9
    2a50:	8f 90       	pop	r8
    2a52:	7f 90       	pop	r7
    2a54:	6f 90       	pop	r6
    2a56:	5f 90       	pop	r5
    2a58:	4f 90       	pop	r4
    2a5a:	3f 90       	pop	r3
    2a5c:	2f 90       	pop	r2
    2a5e:	08 95       	ret

00002a60 <main>:
      bs.left_pwm < -bc.beep_speed_lim ||
      at_limit ||
#ifdef DO_STEERING
      bs.right_pwm > bc.beep_speed_lim || bs.right_pwm < -bc.beep_speed_lim ||
      bs.steering > 1.0 || bs.steering < -1.0 ||
#endif
#ifdef DO_BAT
      (bs.bat_voltage < 0.5 && (bal_tickno & 0x38) == 0x00) ||
      (bs.bat_speed_lim < 0.25 && (bal_tickno & 0x38) == 0x20) ||
#endif
#if defined(__BAL2__)
      ((fabs(bs.b1is) > bc.fuse_alarm_thresh || fabs(bs.b2is) > bc.fuse_alarm_thresh) && (bal_tickno & 0x0c) == 0x08) ||
#endif
#if defined(__BAL3__) || defined(__BAL4__)
      ((fabs(bs.batis) > bc.fuse_alarm_thresh) && (bal_tickno & 0x0c) == 0x08) ||
#endif
#if defined(__BAL3__) && !defined(__JORDANWAY__)
      ((bs.pwmtempa > 0.7 || bs.pwmtempb > 0.7 || bs.pwmtempc > 0.7 || bs.pwmtempd > 0.7) && (bal_tickno&0x40)==0x00) ||
#endif
      (1 && bs.realtime < 0.2) ||
       0
      ) {
    set0_beeper();
  } else {
    set1_beeper();
  }
#endif

#ifdef DO_BAT

  float weight = bs.interval;
  bs.bat.s1 += weight;
  bs.bat.si += bs.batis * weight;
  bs.bat.sii += bs.batis * bs.batis * weight;
  bs.bat.sv += bs.bat_voltage * weight;
  bs.bat.svv += bs.bat_voltage * bs.bat_voltage * weight;
  bs.bat.siv += bs.bat_voltage * bs.batis * weight;

  time_since_bat_update += bs.interval;

  /* Every second, update bat_speed_lim by estimating the battery resistance */

  if (time_since_bat_update >= 0.1) {
    bs.bat.delta = bs.bat.s1 * bs.bat.sii - bs.bat.si * bs.bat.si;
    float idelta = (bs.bat.delta<=0.0) ? 10.0 : 1.0/bs.bat.delta;
    bs.bat.resistance = (bs.bat.s1 * bs.bat.siv - bs.bat.sv * bs.bat.si) * idelta; // normally negative
    bs.bat.ocvoltage = (bs.bat.sii * bs.bat.sv - bs.bat.si * bs.bat.siv) * idelta;
  
    bs.bat.sigma_ocvoltage = sqrt(bs.bat.sii * idelta);
    bs.bat.sigma_resistance = sqrt(bs.bat.s1 * idelta);

    
    float max_current = 0.4; // The maximum current I want to be able to draw (0.4=40 amps)
    float max_bt = 0.2;

    bs.bat.fullloadvoltage = fmin(0.8, bs.bat.ocvoltage) + max_current * fmin(-0.15, bs.bat.resistance);

    // compare to the way cmd is generated from cur_speed_est and
    // balance_torque. This allows balance_torque up to 0.3
    // Maybe I should weight this according to delta, since that reflects how much variation
    // in current there was.

    if (bs.bat.delta>2.0) {
      lpf_update(&bs.bat_speed_lim,
                 40.0,
                 time_since_bat_update * bs.bat.delta / 10.0,
                 fmax(0.15, bs.bat.fullloadvoltage * 1.5626 - bc.motor_torque_factor * max_bt));
    }
    time_since_bat_update = 0.0;

    bs.bat.s1 *= 0.99;
    bs.bat.si *= 0.99;
    bs.bat.sii *= 0.99;
    bs.bat.sv *= 0.99;
    bs.bat.svv *= 0.99;
    bs.bat.siv *= 0.99;
                 
  }
#endif

#ifdef DO_MISSION_LOG
  lpf_update(&mission_accum.bat_voltage, 0.5, bs.interval, bs.bat_voltage);
  lpf_update(&mission_accum.bat_current, 0.5, bs.interval, bs.batis);
  lpf_update(&mission_accum.bat_resistance, 0.5, bs.interval, bs.bat.resistance);
  lpf_update(&mission_accum.bat_ocvoltage, 0.5, bs.interval, bs.bat.ocvoltage);
  lpf_update(&mission_accum.cur_speed_est, 0.5, bs.interval, bs.cur_speed_est);

  time_since_mission_save += bs.interval;
  if (time_since_mission_save >= 1.0) {
    mission_accum.realtime = bs.realtime;
    
    eeprom_write_bg(&mission_accum, sizeof(mission_accum),
                    mission_index*sizeof(mission_accum));
    mission_index = (mission_index+1) % N_MISSION_ENTRIES;
  }
#endif

}

void
timer_init(void)
{
  /*
    Timer 1:

    PWM mode is "PWM, Phase Correct, 9-bit"
    14 MHz / 1 / 512 / 2 gives 14 kHz, just inaudible

  */

  TCCR1A = 0 |
    (1<<COM1A1) | (1<<COM1A0) | // clear on match up, set on match down
    (1<<COM1B1) | (0<<COM1B0) | // set on match up, clear on match down
#if OCR1_MAX==1023
    (1<<WGM11) | (1<<WGM10);
#elif OCR1_MAX==511
    (1<<WGM11);
#elif OCR1_MAX==255
    (1<<WGM10);
#else
#error "Unknown OCR1_MAX"
#endif

  TCCR1B = 0 |
    (1<<CS10); // prescaler divide by 1


  /*
    Timer 3:
    
    Frequency is about 14 kHz, so it overflows every 4.5 seconds
  */

  TCCR3A = 0;
  TCCR3B = 0 |
    (1<<CS32) | (0<<CS31) | (1<<CS30); // prescale clk/1024
  timer3_seconds_conv = 1.0/((float)CLOCK_SPEED/1024);

}

/*
  Receive a packet over the serial port.
 */
void
handle_rx()
{
  uint8_t *pkt;
  uint8_t pktlen=pkt_rx(&pkt);
  if (!pktlen) return;

  uint8_t cmd=pkt[0];
  /* Send current bal_state */
  if (cmd=='C' && pktlen==1) {
    pkt_tx_start();
    pkt_tx_uint8('c');
    for (uint8_t i=0; i<sizeof(bs); i++) {
      pkt_tx_uint8(((uint8_t *)&bs)[i]);
    }
    pkt_tx_end();
  }
  /* Send current bal_config */
  else if (cmd=='R' && pktlen==1) {
    pkt_tx_start();
    pkt_tx_uint8('r');
    for (uint8_t i=0; i<sizeof(bc); i++) {
      pkt_tx_uint8(((uint8_t *)&bc)[i]);
    }
    pkt_tx_end();
  }
  /* Send current bal_hwadj */
  else if (cmd=='H' && pktlen==1) {
    pkt_tx_start();
    pkt_tx_uint8('h');
    for (uint8_t i=0; i<sizeof(bh); i++) {
      pkt_tx_uint8(((uint8_t *)&bh)[i]);
    }
    pkt_tx_end();
  }

  /* Accept new bal_hwadj */
  else if (cmd=='A' && pktlen==1+sizeof(struct bal_hwadj)) {
    struct bal_hwadj *newbh = (struct bal_hwadj *)(pkt+1);
    pkt_tx_start();
    pkt_tx_uint8('a');
    if (bal_hwadj_validate(newbh)) {
      bh = *newbh;
      pkt_tx_uint8(1);
    } else {
      pkt_tx_uint8(0);
    }
    pkt_tx_end();
  }

  /* Accept new bal_config */
  else if (cmd=='W' && pktlen==1+sizeof(struct bal_config)) {
    struct bal_config *newbc = (struct bal_config *)(pkt+1);
    pkt_tx_start();
    pkt_tx_uint8('w');
    if (bal_config_validate(newbc)) {
      bc = *newbc;
      pkt_tx_uint8(1);
    } else {
      pkt_tx_uint8(0);
    }
    pkt_tx_end();
  }

#ifdef DO_DRIVE
  /* Accept drive command */
  else if (cmd=='D' && pktlen==1+sizeof(struct bal_drive)) {
    struct bal_drive *newbd = (struct bal_drive *)(pkt+1);
    pkt_tx_start();
    pkt_tx_uint8('d');
    if (bal_drive_validate(newbd)) {
      bs.drive = *newbd;
      bs.drive_age = 0.0;
      pkt_tx_uint8(1);
    } else {
      pkt_tx_uint8(0);
    }
    pkt_tx_end();
  }
#endif

  /* Reboot request, handy for uploading new firmware without hitting the big red button */
  else if (cmd=='Q' && pktlen==6) {
    // Only 'l33t people can reboot it. 
    // (This is mainly just so line noise on the serial port doesn't hose me)
    if (pkt[1] != '3' || pkt[2] != 'b' || pkt[3] != '0' || pkt[4] != '0' || pkt[5] != 't') return;
      
    set_motor_idle();

    // I could be more careful and turn off all the interrupt sources, but this should work too.
    cli();
    void (*funcptr)();
    funcptr = (void (*)()) 0x1f800L; // XXX fragile, specific to ATMega128
    funcptr();
  }

  else {
    // discard cmd
  }
}

void barf()
{
  adc_disable();
  set_motor_idle();
  while (1) {
    if (uart_tx_empty()) {
      dump_adc_log();
    }
  }
}

int8_t led_counter;
void update_leds()
{
#ifdef __BAL4__
  led_counter=(led_counter+1)&15;
  
  float angle_thresh=(led_counter+1) * 0.03125;
  
  set0_led1();
  set0_led2();
  set0_led3();

  if (bs.lpf_angle > angle_thresh) set1_led1();
  else if (bs.lpf_angle < -angle_thresh) set1_led2();

  //if (led_counter==0) set1_led3();
#endif
}

/* Sending data just when the Free2Move serial port dongle is powered on seems to hose it,
   so we give the first beacon after 2 seconds */
float timetonext_beacon=2.0;

#define VERSION "bal 2.0"

int main( void )
{
  timer_init();
    2a60:	0e 94 1c 07 	call	0xe38	; 0xe38 <timer_init>
  io_init();
    2a64:	0e 94 ae 02 	call	0x55c	; 0x55c <io_init>
  uart_init_tx();
    2a68:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <uart_init_tx>
  uart_init_rx();
    2a6c:	0e 94 2f 1b 	call	0x365e	; 0x365e <uart_init_rx>

  sei();
    2a70:	78 94       	sei

  PKT_ANNOUNCE_VERSION(VERSION);
    2a72:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <pkt_tx_start>
    2a76:	85 e9       	ldi	r24, 0x95	; 149
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	0e 94 93 17 	call	0x2f26	; 0x2f26 <pkt_tx_str_P>
    2a7e:	0e 94 51 18 	call	0x30a2	; 0x30a2 <pkt_tx_end>

  adc_init();
    2a82:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <adc_init>
    2a86:	96 9a       	sbi	0x12, 6	; 18
  set1_led2();
  adc_stabilize();
    2a88:	0e 94 92 16 	call	0x2d24	; 0x2d24 <adc_stabilize>
    2a8c:	96 98       	cbi	0x12, 6	; 18
  set0_led2();
  balance_init();
    2a8e:	0e 94 34 09 	call	0x1268	; 0x1268 <balance_init>
    2a92:	97 98       	cbi	0x12, 7	; 18
    2a94:	96 98       	cbi	0x12, 6	; 18

  set0_led1();
  set0_led2();

  while (1) {


    if (uart_tx_empty()) {
    2a96:	0e 94 01 19 	call	0x3202	; 0x3202 <uart_tx_empty>
    2a9a:	88 23       	and	r24, r24
    2a9c:	d9 f5       	brne	.+118    	; 0x2b14 <main+0xb4>
      handle_rx();
    }

    //dump_adc_log();

    if (adc_collect_samples(samples, &last_balance_s0, ADCNO_BAT_VOLTAGE)) {
    2a9e:	40 e0       	ldi	r20, 0x00	; 0
    2aa0:	67 e0       	ldi	r22, 0x07	; 7
    2aa2:	71 e0       	ldi	r23, 0x01	; 1
    2aa4:	85 e3       	ldi	r24, 0x35	; 53
    2aa6:	95 e0       	ldi	r25, 0x05	; 5
    2aa8:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <adc_collect_samples>
    2aac:	88 23       	and	r24, r24
    2aae:	a9 f5       	brne	.+106    	; 0x2b1a <main+0xba>
      /* The brightness of LED2 gives us an idea how much of the time we're calculating
         as opposed to waiting for new ADC samples */
      update_leds();
      balance();

      timetonext_beacon -= bs.interval;
    }

    /* Send periodic beacons to inform balctl that we're here */
    if (timetonext_beacon <= 0.0 && uart_tx_empty()) {
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	40 e0       	ldi	r20, 0x00	; 0
    2ab6:	50 e0       	ldi	r21, 0x00	; 0
    2ab8:	60 91 00 01 	lds	r22, 0x0100
    2abc:	70 91 01 01 	lds	r23, 0x0101
    2ac0:	80 91 02 01 	lds	r24, 0x0102
    2ac4:	90 91 03 01 	lds	r25, 0x0103
    2ac8:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__eqsf2>
    2acc:	18 16       	cp	r1, r24
    2ace:	1c f3       	brlt	.-58     	; 0x2a96 <main+0x36>
    2ad0:	0e 94 01 19 	call	0x3202	; 0x3202 <uart_tx_empty>
    2ad4:	88 23       	and	r24, r24
    2ad6:	f9 f2       	breq	.-66     	; 0x2a96 <main+0x36>
      timetonext_beacon = 0.5;
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	a0 e0       	ldi	r26, 0x00	; 0
    2ade:	bf e3       	ldi	r27, 0x3F	; 63
    2ae0:	80 93 00 01 	sts	0x0100, r24
    2ae4:	90 93 01 01 	sts	0x0101, r25
    2ae8:	a0 93 02 01 	sts	0x0102, r26
    2aec:	b0 93 03 01 	sts	0x0103, r27
      PKT_ANNOUNCE_VERSION(VERSION);
    2af0:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <pkt_tx_start>
    2af4:	8c e8       	ldi	r24, 0x8C	; 140
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	0e 94 93 17 	call	0x2f26	; 0x2f26 <pkt_tx_str_P>
    2afc:	0e 94 51 18 	call	0x30a2	; 0x30a2 <pkt_tx_end>
      err_tx_start();
    2b00:	0e 94 6d 18 	call	0x30da	; 0x30da <err_tx_start>
      err_tx_comm();
    2b04:	0e 94 ce 18 	call	0x319c	; 0x319c <err_tx_comm>
      err_tx_end();
    2b08:	0e 94 c4 18 	call	0x3188	; 0x3188 <err_tx_end>
    2b0c:	0e 94 01 19 	call	0x3202	; 0x3202 <uart_tx_empty>
    2b10:	88 23       	and	r24, r24
    2b12:	29 f2       	breq	.-118    	; 0x2a9e <main+0x3e>
    2b14:	0e 94 42 07 	call	0xe84	; 0xe84 <handle_rx>
    2b18:	c2 cf       	rjmp	.-124    	; 0x2a9e <main+0x3e>
    2b1a:	0e 94 45 0a 	call	0x148a	; 0x148a <balance>
    2b1e:	20 91 a7 05 	lds	r18, 0x05A7
    2b22:	30 91 a8 05 	lds	r19, 0x05A8
    2b26:	40 91 a9 05 	lds	r20, 0x05A9
    2b2a:	50 91 aa 05 	lds	r21, 0x05AA
    2b2e:	60 91 00 01 	lds	r22, 0x0100
    2b32:	70 91 01 01 	lds	r23, 0x0101
    2b36:	80 91 02 01 	lds	r24, 0x0102
    2b3a:	90 91 03 01 	lds	r25, 0x0103
    2b3e:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__subsf3>
    2b42:	60 93 00 01 	sts	0x0100, r22
    2b46:	70 93 01 01 	sts	0x0101, r23
    2b4a:	80 93 02 01 	sts	0x0102, r24
    2b4e:	90 93 03 01 	sts	0x0103, r25
    2b52:	ae cf       	rjmp	.-164    	; 0x2ab0 <main+0x50>

00002b54 <start_conversion>:

void
start_conversion()
{
  adci = pgm_read_byte(&adcpattern[adcpatterni]);
    2b54:	80 91 f8 01 	lds	r24, 0x01F8
    2b58:	e7 ec       	ldi	r30, 0xC7	; 199
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	e8 0f       	add	r30, r24
    2b5e:	f1 1d       	adc	r31, r1
    2b60:	e4 91       	lpm	r30, Z
    2b62:	e0 93 fa 01 	sts	0x01FA, r30
#if !defined(__BAL__)
  set_extramux(pgm_read_byte(&adc_config[adci].extramux));
    2b66:	e0 91 fa 01 	lds	r30, 0x01FA
    2b6a:	ff 27       	eor	r31, r31
    2b6c:	ee 0f       	add	r30, r30
    2b6e:	ff 1f       	adc	r31, r31
    2b70:	31 96       	adiw	r30, 0x01	; 1
    2b72:	20 ef       	ldi	r18, 0xF0	; 240
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	e2 0f       	add	r30, r18
    2b78:	f3 1f       	adc	r31, r19
    2b7a:	e4 91       	lpm	r30, Z

DEFBIT(extramux2, E, 7);     // Controls the 4051 mux that expands ADC7
DEFBIT(extramux1, E, 6);
DEFBIT(extramux0, E, 5);
DEFBITGROUP(extramux, E, 5, 3);
    2b7c:	83 b1       	in	r24, 0x03	; 3
    2b7e:	8f 71       	andi	r24, 0x1F	; 31
    2b80:	e2 95       	swap	r30
    2b82:	ee 0f       	add	r30, r30
    2b84:	e0 7e       	andi	r30, 0xE0	; 224
    2b86:	8e 2b       	or	r24, r30
    2b88:	83 b9       	out	0x03, r24	; 3
#endif
  ADMUX = pgm_read_byte(&adc_config[adci].admux);
    2b8a:	e0 91 fa 01 	lds	r30, 0x01FA
    2b8e:	ff 27       	eor	r31, r31
    2b90:	ee 0f       	add	r30, r30
    2b92:	ff 1f       	adc	r31, r31
    2b94:	e2 0f       	add	r30, r18
    2b96:	f3 1f       	adc	r31, r19
    2b98:	e4 91       	lpm	r30, Z
    2b9a:	e7 b9       	out	0x07, r30	; 7
  ADCSRA |= (1<<ADSC); // Start next conv
    2b9c:	36 9a       	sbi	0x06, 6	; 6
    2b9e:	08 95       	ret

00002ba0 <adc_init>:
}

void
adc_init()
{
  // PORTF is input, no pullups
  PORTF = 0x00;
    2ba0:	10 92 62 00 	sts	0x0062, r1
  DDRF = 0x00;
    2ba4:	10 92 61 00 	sts	0x0061, r1

  ACSR |= (1<<ACD); // Turn off the analog comparator
    2ba8:	47 9a       	sbi	0x08, 7	; 8

  ADCSRA = 0
    2baa:	8f e8       	ldi	r24, 0x8F	; 143
    2bac:	86 b9       	out	0x06, r24	; 6
    | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2) // div by 128
    | (1<<ADEN) // enable ADC
    | (1<<ADIE) // enable interrupts
    ;
  // At 14.7 MHz:
  //  115 kHz ADC clock
  //  Conversions take 13 cycles 
  //  We do 4 per short cycle
  //  So about 2211 cycles/sec

  adcpatterni=0;
    2bae:	10 92 f8 01 	sts	0x01F8, r1
  start_conversion();
    2bb2:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <start_conversion>
    2bb6:	08 95       	ret

00002bb8 <adc_disable>:
}

void
adc_disable()
{
  ADCSRA &= ~(1<<ADIE);
    2bb8:	33 98       	cbi	0x06, 3	; 6
    2bba:	08 95       	ret

00002bbc <adc_collect_samples>:
}

/*
  Collect the most recent samples, if any, into samples. Return 1 if there were new samples,
  or 0 if not. Pass a pointer to last_samplecount to keep track of the caller's last sample sequence number,
  so we know if there have been more samples since the last time he called it.
*/
uint8_t adc_collect_samples(uint16_t *samples, uint8_t *last_samplecount, uint8_t whichadc)
{
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
    2bc0:	9c 01       	movw	r18, r24
    2bc2:	db 01       	movw	r26, r22
  uint8_t i,j;

  cli();
    2bc4:	f8 94       	cli
  if (*last_samplecount == adc_samplecount[whichadc]) {
    2bc6:	e4 2f       	mov	r30, r20
    2bc8:	ff 27       	eor	r31, r31
    2bca:	e3 5a       	subi	r30, 0xA3	; 163
    2bcc:	f9 4f       	sbci	r31, 0xF9	; 249
    2bce:	90 81       	ld	r25, Z
    2bd0:	8c 91       	ld	r24, X
    2bd2:	89 17       	cp	r24, r25
    2bd4:	51 f1       	breq	.+84     	; 0x2c2a <adc_collect_samples+0x6e>
    sei();
    return 0;
  }
  *last_samplecount = adc_samplecount[whichadc];
    2bd6:	80 81       	ld	r24, Z
    2bd8:	8c 93       	st	X, r24
    2bda:	e9 01       	movw	r28, r18
    2bdc:	a0 e0       	ldi	r26, 0x00	; 0
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
  for (i=0; i<ADCNO_END; i++) {
    uint16_t tot=0;
    for (j=0; j<ADC_HIST; j++) {
      tot+=adc_current_samples[i][j];
    }
    samples[i] = tot;
  }
  sei();
    2be0:	40 e0       	ldi	r20, 0x00	; 0
    2be2:	50 e0       	ldi	r21, 0x00	; 0
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	bd 01       	movw	r22, r26
    2bea:	66 0f       	add	r22, r22
    2bec:	77 1f       	adc	r23, r23
    2bee:	66 0f       	add	r22, r22
    2bf0:	77 1f       	adc	r23, r23
    2bf2:	66 0f       	add	r22, r22
    2bf4:	77 1f       	adc	r23, r23
    2bf6:	fb 01       	movw	r30, r22
    2bf8:	e2 0f       	add	r30, r18
    2bfa:	f3 1f       	adc	r31, r19
    2bfc:	ee 0f       	add	r30, r30
    2bfe:	ff 1f       	adc	r31, r31
    2c00:	e8 5f       	subi	r30, 0xF8	; 248
    2c02:	fe 4f       	sbci	r31, 0xFE	; 254
    2c04:	80 81       	ld	r24, Z
    2c06:	91 81       	ldd	r25, Z+1	; 0x01
    2c08:	48 0f       	add	r20, r24
    2c0a:	59 1f       	adc	r21, r25
    2c0c:	2f 5f       	subi	r18, 0xFF	; 255
    2c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c10:	28 30       	cpi	r18, 0x08	; 8
    2c12:	31 05       	cpc	r19, r1
    2c14:	81 f7       	brne	.-32     	; 0x2bf6 <adc_collect_samples+0x3a>
    2c16:	49 93       	st	Y+, r20
    2c18:	59 93       	st	Y+, r21
    2c1a:	11 96       	adiw	r26, 0x01	; 1
    2c1c:	af 30       	cpi	r26, 0x0F	; 15
    2c1e:	b1 05       	cpc	r27, r1
    2c20:	f9 f6       	brne	.-66     	; 0x2be0 <adc_collect_samples+0x24>
    2c22:	78 94       	sei
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	03 c0       	rjmp	.+6      	; 0x2c30 <adc_collect_samples+0x74>
    2c2a:	78 94       	sei
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	df 91       	pop	r29
    2c32:	cf 91       	pop	r28
    2c34:	08 95       	ret

00002c36 <__vector_21>:
  return 1;
}

#ifdef MAX_ADC_LOG
static uint16_t adc_log_ptr;
static uint16_t adc_log[MAX_ADC_LOG];
#endif

/*
  The ADC completion interrupt. Store the sample in the adc_current_samples shift register
  and start the next conversion.
*/
SIGNAL( SIG_ADC )
{
    2c36:	1f 92       	push	r1
    2c38:	0f 92       	push	r0
    2c3a:	0f b6       	in	r0, 0x3f	; 63
    2c3c:	0f 92       	push	r0
    2c3e:	11 24       	eor	r1, r1
    2c40:	2f 93       	push	r18
    2c42:	3f 93       	push	r19
    2c44:	4f 93       	push	r20
    2c46:	5f 93       	push	r21
    2c48:	6f 93       	push	r22
    2c4a:	7f 93       	push	r23
    2c4c:	8f 93       	push	r24
    2c4e:	9f 93       	push	r25
    2c50:	af 93       	push	r26
    2c52:	bf 93       	push	r27
    2c54:	ef 93       	push	r30
    2c56:	ff 93       	push	r31
    2c58:	40 e0       	ldi	r20, 0x00	; 0
    2c5a:	50 e0       	ldi	r21, 0x00	; 0
  uint8_t i;

  for (i=0; i<ADC_HIST-1; i++) {
    adc_current_samples[adci][i]=adc_current_samples[adci][i+1];
    2c5c:	a0 91 fa 01 	lds	r26, 0x01FA
    2c60:	bb 27       	eor	r27, r27
    2c62:	9a 01       	movw	r18, r20
    2c64:	e0 91 fa 01 	lds	r30, 0x01FA
    2c68:	ff 27       	eor	r31, r31
    2c6a:	4f 5f       	subi	r20, 0xFF	; 255
    2c6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c6e:	ee 0f       	add	r30, r30
    2c70:	ff 1f       	adc	r31, r31
    2c72:	ee 0f       	add	r30, r30
    2c74:	ff 1f       	adc	r31, r31
    2c76:	ee 0f       	add	r30, r30
    2c78:	ff 1f       	adc	r31, r31
    2c7a:	e4 0f       	add	r30, r20
    2c7c:	f5 1f       	adc	r31, r21
    2c7e:	ee 0f       	add	r30, r30
    2c80:	ff 1f       	adc	r31, r31
    2c82:	e8 5f       	subi	r30, 0xF8	; 248
    2c84:	fe 4f       	sbci	r31, 0xFE	; 254
    2c86:	80 81       	ld	r24, Z
    2c88:	91 81       	ldd	r25, Z+1	; 0x01
    2c8a:	aa 0f       	add	r26, r26
    2c8c:	bb 1f       	adc	r27, r27
    2c8e:	aa 0f       	add	r26, r26
    2c90:	bb 1f       	adc	r27, r27
    2c92:	aa 0f       	add	r26, r26
    2c94:	bb 1f       	adc	r27, r27
    2c96:	a2 0f       	add	r26, r18
    2c98:	b3 1f       	adc	r27, r19
    2c9a:	aa 0f       	add	r26, r26
    2c9c:	bb 1f       	adc	r27, r27
    2c9e:	a8 5f       	subi	r26, 0xF8	; 248
    2ca0:	be 4f       	sbci	r27, 0xFE	; 254
    2ca2:	11 96       	adiw	r26, 0x01	; 1
    2ca4:	9c 93       	st	X, r25
    2ca6:	8e 93       	st	-X, r24
    2ca8:	47 30       	cpi	r20, 0x07	; 7
    2caa:	51 05       	cpc	r21, r1
    2cac:	b9 f6       	brne	.-82     	; 0x2c5c <__vector_21+0x26>
  }
  adc_current_samples[adci][ADC_HIST-1] = ADCW;
    2cae:	e0 91 fa 01 	lds	r30, 0x01FA
    2cb2:	ff 27       	eor	r31, r31
    2cb4:	84 b1       	in	r24, 0x04	; 4
    2cb6:	95 b1       	in	r25, 0x05	; 5
    2cb8:	e2 95       	swap	r30
    2cba:	f2 95       	swap	r31
    2cbc:	f0 7f       	andi	r31, 0xF0	; 240
    2cbe:	fe 27       	eor	r31, r30
    2cc0:	e0 7f       	andi	r30, 0xF0	; 240
    2cc2:	fe 27       	eor	r31, r30
    2cc4:	e8 5f       	subi	r30, 0xF8	; 248
    2cc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2cc8:	97 87       	std	Z+15, r25	; 0x0f
    2cca:	86 87       	std	Z+14, r24	; 0x0e
  adc_samplecount[adci]++;
    2ccc:	e0 91 fa 01 	lds	r30, 0x01FA
    2cd0:	ff 27       	eor	r31, r31
    2cd2:	e3 5a       	subi	r30, 0xA3	; 163
    2cd4:	f9 4f       	sbci	r31, 0xF9	; 249
    2cd6:	80 81       	ld	r24, Z
    2cd8:	8f 5f       	subi	r24, 0xFF	; 255
    2cda:	80 83       	st	Z, r24

#ifdef MAX_ADC_LOG
  adc_log[adc_log_ptr] = adc_current_samples[adci][ADC_HIST-1] | (adci<<10);
  adc_log_ptr++;
  if (adc_log_ptr >= MAX_ADC_LOG) adc_log_ptr=0;
#endif

  adcpatterni++;
    2cdc:	80 91 f8 01 	lds	r24, 0x01F8
    2ce0:	8f 5f       	subi	r24, 0xFF	; 255
    2ce2:	80 93 f8 01 	sts	0x01F8, r24
  if (adcpatterni >= N_ADCPATTERN) {
    2ce6:	80 91 f8 01 	lds	r24, 0x01F8
    2cea:	89 32       	cpi	r24, 0x29	; 41
    2cec:	38 f0       	brcs	.+14     	; 0x2cfc <__vector_21+0xc6>
    adcpatterni=0;
    2cee:	10 92 f8 01 	sts	0x01F8, r1
    adcpattern_loops++;
    2cf2:	80 91 f9 01 	lds	r24, 0x01F9
    2cf6:	8f 5f       	subi	r24, 0xFF	; 255
    2cf8:	80 93 f9 01 	sts	0x01F9, r24
  }
  start_conversion();
    2cfc:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <start_conversion>
    2d00:	ff 91       	pop	r31
    2d02:	ef 91       	pop	r30
    2d04:	bf 91       	pop	r27
    2d06:	af 91       	pop	r26
    2d08:	9f 91       	pop	r25
    2d0a:	8f 91       	pop	r24
    2d0c:	7f 91       	pop	r23
    2d0e:	6f 91       	pop	r22
    2d10:	5f 91       	pop	r21
    2d12:	4f 91       	pop	r20
    2d14:	3f 91       	pop	r19
    2d16:	2f 91       	pop	r18
    2d18:	0f 90       	pop	r0
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	0f 90       	pop	r0
    2d1e:	1f 90       	pop	r1
    2d20:	18 95       	reti

00002d22 <dump_adc_log>:
}

/*
  Send logged ADC readings to host. For analog debugging, to measure noise before we
  average the ADC_HIST samples together.
*/
void dump_adc_log()
{
    2d22:	08 95       	ret

00002d24 <adc_stabilize>:
#ifdef MAX_ADC_LOG

  for (uint16_t i=0; i<MAX_ADC_LOG; ) {
    while (!uart_tx_empty()) {}

    pkt_tx_start();
    pkt_tx_uint8('l');
    pkt_tx_uint16(i);
    for (uint8_t j=0; j<16; j++) {
      pkt_tx_uint16(adc_log[(i+adc_log_ptr) % MAX_ADC_LOG]);
      i++;
    }
    pkt_tx_end();
  }
#endif
}

/*
  Run the ADC for a while, do flush any initial power-up transients
 */
void adc_stabilize()
{
  while (1) {
    if (adcpattern_loops >= ADC_HIST+2) break;
    2d24:	80 91 f9 01 	lds	r24, 0x01F9
    2d28:	8a 30       	cpi	r24, 0x0A	; 10
    2d2a:	e0 f3       	brcs	.-8      	; 0x2d24 <adc_stabilize>
    2d2c:	08 95       	ret

00002d2e <hex>:
static char hextable[16] PROGMEM ="0123456789abcdef";

char hex(uint8_t value) 
{
  return pgm_read_byte(hextable+value);
    2d2e:	ee e0       	ldi	r30, 0x0E	; 14
    2d30:	f5 e0       	ldi	r31, 0x05	; 5
    2d32:	e8 0f       	add	r30, r24
    2d34:	f1 1d       	adc	r31, r1
    2d36:	e4 91       	lpm	r30, Z
}
    2d38:	8e 2f       	mov	r24, r30
    2d3a:	99 27       	eor	r25, r25
    2d3c:	87 fd       	sbrc	r24, 7
    2d3e:	90 95       	com	r25
    2d40:	08 95       	ret

00002d42 <uart_init_tx>:

void
uart_init_tx()
{

  // Sort of ad-hoc. I should type in the whole table 69.
#if BAUD_RATE==115200

#if   CLOCK_SPEED == 16000000
  UBRRL = 16;
  UCSRA |= (1<<U2X);
#elif CLOCK_SPEED == 14745600 || CLOCK_SPEED == 14318180
  UBRRL = 7;
    2d42:	87 e0       	ldi	r24, 0x07	; 7
    2d44:	89 b9       	out	0x09, r24	; 9
#elif CLOCK_SPEED == 8000000
  UBRRL = 8;
  UCSRA |= (1<<U2X);
#elif CLOCK_SPEED == 3680000
  UBRRL = 1;
#elif CLOCK_SPEED == 2000000
  UBRRL = 0;
#elif CLOCK_SPEED == 7372800
  UBRRL = 3;
#elif CLOCK_SPEED == 1843200
  UBRRL = 0;
#elif CLOCK_SPEED == 921600
  UBRRL = 0; // 57600 baud
#elif CLOCK_SPEED == 1000000
  UBRRL = 0; // 57600 baud, plus a little
#else
#error "Unsupported clock"
#endif

#elif BAUD_RATE==230400

#if   CLOCK_SPEED == 14745600 || CLOCK_SPEED == 14318180
  UBRRL = 3;
#else
#error "Unsupported clock"
#endif

#elif BAUD_RATE==57600

#if   CLOCK_SPEED == 16000000
  UBRRL = 34;
  UCSRA |= (1<<U2X);
#elif CLOCK_SPEED == 14745600 || CLOCK_SPEED == 14318180
  UBRRL = 15;
#elif CLOCK_SPEED == 8000000
  UBRRL = 8;
#else
#error "Unsupported clock"
#endif

#else
#error "Unsupported baud rate"
#endif

#if defined (__AVR_ATmega128__)
  DDRE |= (1<<1); // PE1 is txd, needs to be output
    2d46:	11 9a       	sbi	0x02, 1	; 2
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega2560__)
  DDRE |= (1<<1); // PE1 is txd, needs to be output
#else
  DDRD |= (1<<1); // PD1 is txd, needs to be output
#endif

  tx_head = tx_tail = 0;
    2d48:	10 92 76 06 	sts	0x0676, r1
    2d4c:	80 91 76 06 	lds	r24, 0x0676
    2d50:	80 93 75 06 	sts	0x0675, r24

  UCSRB |= (1<<TXEN);
    2d54:	53 9a       	sbi	0x0a, 3	; 10
    2d56:	08 95       	ret

00002d58 <uart_tx_uint8>:
}

static inline void uart_tx_enable_int() {  UCSRB |= (1<<UDRIE); }
static inline void uart_tx_disable_int() {  UCSRB &= ~(1<<UDRIE); }

ISR(SIG_UART_DATA)
{
  if (tx_head == tx_tail) {
    uart_tx_disable_int();
    return;
  }
  
  UDR = tx_buf[tx_tail];
  tx_tail = tx_next(tx_tail);
}

void 
uart_tx_uint8(uint8_t c) 
{
    2d58:	28 2f       	mov	r18, r24
  uint8_t next_head = tx_next(tx_head);
    2d5a:	e0 91 75 06 	lds	r30, 0x0675
    2d5e:	9e 2f       	mov	r25, r30
    2d60:	9f 5f       	subi	r25, 0xFF	; 255

  // busy loop, waiting for space in buffer
  if (next_head==tx_tail) {
    2d62:	80 91 76 06 	lds	r24, 0x0676
    2d66:	98 17       	cp	r25, r24
    2d68:	49 f4       	brne	.+18     	; 0x2d7c <uart_tx_uint8+0x24>
    errs.tx_busywait++;
    2d6a:	80 91 07 05 	lds	r24, 0x0507
    2d6e:	8f 5f       	subi	r24, 0xFF	; 255
    2d70:	80 93 07 05 	sts	0x0507, r24
    while (next_head==tx_tail) {}
    2d74:	80 91 76 06 	lds	r24, 0x0676
    2d78:	98 17       	cp	r25, r24
    2d7a:	e1 f3       	breq	.-8      	; 0x2d74 <uart_tx_uint8+0x1c>
  }
  
  tx_buf[tx_head] = c;
    2d7c:	ff 27       	eor	r31, r31
    2d7e:	e1 50       	subi	r30, 0x01	; 1
    2d80:	fd 4f       	sbci	r31, 0xFD	; 253
    2d82:	20 83       	st	Z, r18
  tx_head=next_head;
    2d84:	90 93 75 06 	sts	0x0675, r25
    2d88:	55 9a       	sbi	0x0a, 5	; 10
    2d8a:	08 95       	ret

00002d8c <uart_tx_nowait_uint8>:

  uart_tx_enable_int();
}

uint8_t
uart_tx_nowait_uint8(uint8_t c) 
{
    2d8c:	98 2f       	mov	r25, r24
  uint8_t next_head = tx_next(tx_head);
    2d8e:	e0 91 75 06 	lds	r30, 0x0675
    2d92:	ef 5f       	subi	r30, 0xFF	; 255
    2d94:	2e 2f       	mov	r18, r30
    2d96:	33 27       	eor	r19, r19
    2d98:	e1 50       	subi	r30, 0x01	; 1

  // busy loop, waiting for space in buffer
  if (next_head==tx_tail) return 0;
    2d9a:	80 91 76 06 	lds	r24, 0x0676
    2d9e:	82 17       	cp	r24, r18
    2da0:	51 f0       	breq	.+20     	; 0x2db6 <uart_tx_nowait_uint8+0x2a>
  
  tx_buf[tx_head] = c;
    2da2:	ff 27       	eor	r31, r31
    2da4:	e1 50       	subi	r30, 0x01	; 1
    2da6:	fd 4f       	sbci	r31, 0xFD	; 253
    2da8:	90 83       	st	Z, r25
  tx_head=next_head;
    2daa:	20 93 75 06 	sts	0x0675, r18
    2dae:	55 9a       	sbi	0x0a, 5	; 10
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	90 e0       	ldi	r25, 0x00	; 0

  uart_tx_enable_int();

  return 1;
}
    2db4:	08 95       	ret
    2db6:	80 e0       	ldi	r24, 0x00	; 0
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	08 95       	ret

00002dbc <pkt_tx_start>:

#ifndef ELIMINATE_PACKET
struct pktwrstate {
  uint8_t code;
  uint8_t code_loc; // where in tx_buf to stick code
  uint8_t dst_loc;
  uint8_t checksum[4];
} wrs;

void pkt_tx_start()
{
  uart_tx_uint8(0);
    2dbc:	80 e0       	ldi	r24, 0x00	; 0
    2dbe:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <uart_tx_uint8>
  wrs.code=1;
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	80 93 6e 06 	sts	0x066E, r24
  wrs.code_loc = tx_head;
    2dc8:	80 91 75 06 	lds	r24, 0x0675
    2dcc:	80 93 6f 06 	sts	0x066F, r24
  wrs.dst_loc = tx_next(tx_head);
    2dd0:	8f 5f       	subi	r24, 0xFF	; 255
    2dd2:	80 93 70 06 	sts	0x0670, r24
  for (uint8_t j=0; j<4; j++) wrs.checksum[j]=0;
    2dd6:	10 92 71 06 	sts	0x0671, r1
    2dda:	10 92 72 06 	sts	0x0672, r1
    2dde:	10 92 73 06 	sts	0x0673, r1
    2de2:	10 92 74 06 	sts	0x0674, r1
    2de6:	08 95       	ret

00002de8 <update_crc>:
}

void update_crc(uint8_t data, uint8_t crc[4])
{
    2de8:	cf 93       	push	r28
    2dea:	df 93       	push	r29
    2dec:	db 01       	movw	r26, r22
  // shift right 8
  uint8_t out=crc[3];
  crc[3]=crc[2] ^ pgm_read_byte(&crc32_table[out][3]);
    2dee:	eb 01       	movw	r28, r22
    2df0:	eb 81       	ldd	r30, Y+3	; 0x03
    2df2:	4e 2f       	mov	r20, r30
    2df4:	55 27       	eor	r21, r21
    2df6:	44 0f       	add	r20, r20
    2df8:	55 1f       	adc	r21, r21
    2dfa:	44 0f       	add	r20, r20
    2dfc:	55 1f       	adc	r21, r21
    2dfe:	2e e0       	ldi	r18, 0x0E	; 14
    2e00:	31 e0       	ldi	r19, 0x01	; 1
    2e02:	f9 01       	movw	r30, r18
    2e04:	33 96       	adiw	r30, 0x03	; 3
    2e06:	e4 0f       	add	r30, r20
    2e08:	f5 1f       	adc	r31, r21
    2e0a:	e4 91       	lpm	r30, Z
    2e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0e:	9e 27       	eor	r25, r30
    2e10:	9b 83       	std	Y+3, r25	; 0x03
  crc[2]=crc[1] ^ pgm_read_byte(&crc32_table[out][2]);
    2e12:	f9 01       	movw	r30, r18
    2e14:	32 96       	adiw	r30, 0x02	; 2
    2e16:	e4 0f       	add	r30, r20
    2e18:	f5 1f       	adc	r31, r21
    2e1a:	e4 91       	lpm	r30, Z
    2e1c:	99 81       	ldd	r25, Y+1	; 0x01
    2e1e:	9e 27       	eor	r25, r30
    2e20:	9a 83       	std	Y+2, r25	; 0x02
  crc[1]=crc[0] ^ pgm_read_byte(&crc32_table[out][1]);
    2e22:	f9 01       	movw	r30, r18
    2e24:	31 96       	adiw	r30, 0x01	; 1
    2e26:	e4 0f       	add	r30, r20
    2e28:	f5 1f       	adc	r31, r21
    2e2a:	e4 91       	lpm	r30, Z
    2e2c:	9c 91       	ld	r25, X
    2e2e:	9e 27       	eor	r25, r30
    2e30:	99 83       	std	Y+1, r25	; 0x01
  crc[0]=data ^ pgm_read_byte(&crc32_table[out][0]);
    2e32:	42 0f       	add	r20, r18
    2e34:	53 1f       	adc	r21, r19
    2e36:	fa 01       	movw	r30, r20
    2e38:	94 91       	lpm	r25, Z
    2e3a:	98 27       	eor	r25, r24
    2e3c:	9c 93       	st	X, r25
    2e3e:	df 91       	pop	r29
    2e40:	cf 91       	pop	r28
    2e42:	08 95       	ret

00002e44 <pkt_tx_raw>:
}

void pkt_tx_raw(uint8_t data) {
    2e44:	68 2f       	mov	r22, r24
  uint8_t next_dst = tx_next(wrs.dst_loc);
    2e46:	40 91 70 06 	lds	r20, 0x0670
    2e4a:	94 2f       	mov	r25, r20
    2e4c:	9f 5f       	subi	r25, 0xFF	; 255
  if (next_dst==tx_tail || tx_next(next_dst)==tx_tail) {
    2e4e:	80 91 76 06 	lds	r24, 0x0676
    2e52:	98 17       	cp	r25, r24
    2e54:	e1 f1       	breq	.+120    	; 0x2ece <pkt_tx_raw+0x8a>
    2e56:	80 91 76 06 	lds	r24, 0x0676
    2e5a:	59 2f       	mov	r21, r25
    2e5c:	5f 5f       	subi	r21, 0xFF	; 255
    2e5e:	85 17       	cp	r24, r21
    2e60:	c1 f1       	breq	.+112    	; 0x2ed2 <pkt_tx_raw+0x8e>
    errs.tx_busywait++;
    while (next_dst==tx_tail || tx_next(next_dst)==tx_tail) {}
  }
  
  if (data==0) {
    2e62:	66 23       	and	r22, r22
    2e64:	a1 f4       	brne	.+40     	; 0x2e8e <pkt_tx_raw+0x4a>
    tx_buf[wrs.code_loc]=wrs.code | 0x40;
    2e66:	e0 91 6f 06 	lds	r30, 0x066F
    2e6a:	ff 27       	eor	r31, r31
    2e6c:	e1 50       	subi	r30, 0x01	; 1
    2e6e:	fd 4f       	sbci	r31, 0xFD	; 253
    2e70:	80 91 6e 06 	lds	r24, 0x066E
    2e74:	80 64       	ori	r24, 0x40	; 64
    2e76:	80 83       	st	Z, r24
    wrs.code_loc = wrs.dst_loc;
    2e78:	40 93 6f 06 	sts	0x066F, r20
    wrs.dst_loc = next_dst;
    2e7c:	90 93 70 06 	sts	0x0670, r25
    wrs.code=1;
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	80 93 6e 06 	sts	0x066E, r24

    // pump out what we have so far
    tx_head=wrs.code_loc;
    2e86:	40 93 75 06 	sts	0x0675, r20
    2e8a:	55 9a       	sbi	0x0a, 5	; 10
    2e8c:	08 95       	ret
    uart_tx_enable_int();

  } else {
    tx_buf[wrs.dst_loc]=data;
    2e8e:	e4 2f       	mov	r30, r20
    2e90:	ff 27       	eor	r31, r31
    2e92:	e1 50       	subi	r30, 0x01	; 1
    2e94:	fd 4f       	sbci	r31, 0xFD	; 253
    2e96:	60 83       	st	Z, r22
    wrs.dst_loc=next_dst;
    2e98:	90 93 70 06 	sts	0x0670, r25
    wrs.code++;
    2e9c:	80 91 6e 06 	lds	r24, 0x066E
    2ea0:	8f 5f       	subi	r24, 0xFF	; 255
    2ea2:	80 93 6e 06 	sts	0x066E, r24
    if (wrs.code==0x38) { // max 56 byte chunks
    2ea6:	88 33       	cpi	r24, 0x38	; 56
    2ea8:	09 f0       	breq	.+2      	; 0x2eac <pkt_tx_raw+0x68>
    2eaa:	08 95       	ret
      tx_buf[wrs.code_loc]=wrs.code;
    2eac:	e0 91 6f 06 	lds	r30, 0x066F
    2eb0:	ff 27       	eor	r31, r31
    2eb2:	e1 50       	subi	r30, 0x01	; 1
    2eb4:	fd 4f       	sbci	r31, 0xFD	; 253
    2eb6:	80 83       	st	Z, r24
      wrs.code_loc = next_dst;
    2eb8:	90 93 6f 06 	sts	0x066F, r25
      wrs.dst_loc = tx_next(next_dst);
    2ebc:	50 93 70 06 	sts	0x0670, r21
      wrs.code = 1;
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	80 93 6e 06 	sts	0x066E, r24
      tx_head = wrs.code_loc;
    2ec6:	90 93 75 06 	sts	0x0675, r25
    2eca:	55 9a       	sbi	0x0a, 5	; 10
    2ecc:	08 95       	ret
    2ece:	59 2f       	mov	r21, r25
    2ed0:	5f 5f       	subi	r21, 0xFF	; 255
    2ed2:	80 91 07 05 	lds	r24, 0x0507
    2ed6:	8f 5f       	subi	r24, 0xFF	; 255
    2ed8:	80 93 07 05 	sts	0x0507, r24
    2edc:	25 2f       	mov	r18, r21
    2ede:	33 27       	eor	r19, r19
    2ee0:	80 91 76 06 	lds	r24, 0x0676
    2ee4:	98 17       	cp	r25, r24
    2ee6:	e1 f3       	breq	.-8      	; 0x2ee0 <pkt_tx_raw+0x9c>
    2ee8:	80 91 76 06 	lds	r24, 0x0676
    2eec:	82 17       	cp	r24, r18
    2eee:	c1 f3       	breq	.-16     	; 0x2ee0 <pkt_tx_raw+0x9c>
    2ef0:	b8 cf       	rjmp	.-144    	; 0x2e62 <pkt_tx_raw+0x1e>

00002ef2 <pkt_tx_uint8>:
      uart_tx_enable_int();
    }
  }
}

void pkt_tx_uint8(uint8_t data)
{
    2ef2:	1f 93       	push	r17
    2ef4:	18 2f       	mov	r17, r24
  update_crc(data, wrs.checksum);
    2ef6:	61 e7       	ldi	r22, 0x71	; 113
    2ef8:	76 e0       	ldi	r23, 0x06	; 6
    2efa:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <update_crc>
  pkt_tx_raw(data);
    2efe:	81 2f       	mov	r24, r17
    2f00:	0e 94 22 17 	call	0x2e44	; 0x2e44 <pkt_tx_raw>
    2f04:	1f 91       	pop	r17
    2f06:	08 95       	ret

00002f08 <pkt_tx_str>:
}

void pkt_tx_str(const char *s)
{
    2f08:	cf 93       	push	r28
    2f0a:	df 93       	push	r29
    2f0c:	ec 01       	movw	r28, r24
  while (*s) {
    2f0e:	88 81       	ld	r24, Y
    2f10:	88 23       	and	r24, r24
    2f12:	31 f0       	breq	.+12     	; 0x2f20 <pkt_tx_str+0x18>
    pkt_tx_uint8((char) *s++);
    2f14:	21 96       	adiw	r28, 0x01	; 1
    2f16:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
    2f1a:	88 81       	ld	r24, Y
    2f1c:	88 23       	and	r24, r24
    2f1e:	d1 f7       	brne	.-12     	; 0x2f14 <pkt_tx_str+0xc>
    2f20:	df 91       	pop	r29
    2f22:	cf 91       	pop	r28
    2f24:	08 95       	ret

00002f26 <pkt_tx_str_P>:
  }
}

void pkt_tx_str_P(const char *s)
{
    2f26:	cf 93       	push	r28
    2f28:	df 93       	push	r29
    2f2a:	fc 01       	movw	r30, r24
  while (1) {
    char c=pgm_read_byte(s++);
    2f2c:	84 91       	lpm	r24, Z
    if (!c) break;
    2f2e:	88 23       	and	r24, r24
    2f30:	51 f0       	breq	.+20     	; 0x2f46 <pkt_tx_str_P+0x20>
    2f32:	ef 01       	movw	r28, r30
    2f34:	21 96       	adiw	r28, 0x01	; 1
    pkt_tx_uint8(c);
    2f36:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	21 96       	adiw	r28, 0x01	; 1
    2f3e:	e4 91       	lpm	r30, Z
    2f40:	8e 2f       	mov	r24, r30
    2f42:	ee 23       	and	r30, r30
    2f44:	c1 f7       	brne	.-16     	; 0x2f36 <pkt_tx_str_P+0x10>
    2f46:	df 91       	pop	r29
    2f48:	cf 91       	pop	r28
    2f4a:	08 95       	ret

00002f4c <pkt_tx_uint16>:
  }
}


// Little endian
void pkt_tx_uint16(uint16_t data)
{
    2f4c:	0f 93       	push	r16
    2f4e:	1f 93       	push	r17
    2f50:	8c 01       	movw	r16, r24
  pkt_tx_uint8(data&0xff);
    2f52:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
  pkt_tx_uint8(data>>8);
    2f56:	01 2f       	mov	r16, r17
    2f58:	11 27       	eor	r17, r17
    2f5a:	80 2f       	mov	r24, r16
    2f5c:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
    2f60:	1f 91       	pop	r17
    2f62:	0f 91       	pop	r16
    2f64:	08 95       	ret

00002f66 <pkt_tx_int16>:
}

void pkt_tx_int16(int16_t data)
{
    2f66:	0f 93       	push	r16
    2f68:	1f 93       	push	r17
    2f6a:	8c 01       	movw	r16, r24
  pkt_tx_uint8(data&0xff);
    2f6c:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
  pkt_tx_uint8(data>>8);
    2f70:	01 2f       	mov	r16, r17
    2f72:	11 0f       	add	r17, r17
    2f74:	11 0b       	sbc	r17, r17
    2f76:	80 2f       	mov	r24, r16
    2f78:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
    2f7c:	1f 91       	pop	r17
    2f7e:	0f 91       	pop	r16
    2f80:	08 95       	ret

00002f82 <pkt_tx_uint32>:
}

// Little endian
void pkt_tx_uint32(uint32_t data)
{
    2f82:	ef 92       	push	r14
    2f84:	ff 92       	push	r15
    2f86:	0f 93       	push	r16
    2f88:	1f 93       	push	r17
    2f8a:	7b 01       	movw	r14, r22
    2f8c:	8c 01       	movw	r16, r24
  pkt_tx_uint8(data&0xff);
    2f8e:	86 2f       	mov	r24, r22
    2f90:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
  pkt_tx_uint8((data>>8)&0xff);
    2f94:	bb 27       	eor	r27, r27
    2f96:	a1 2f       	mov	r26, r17
    2f98:	90 2f       	mov	r25, r16
    2f9a:	8f 2d       	mov	r24, r15
    2f9c:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
  pkt_tx_uint8((data>>16)&0xff);
    2fa0:	c8 01       	movw	r24, r16
    2fa2:	aa 27       	eor	r26, r26
    2fa4:	bb 27       	eor	r27, r27
    2fa6:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
  pkt_tx_uint8((data>>24)&0xff);
    2faa:	e1 2e       	mov	r14, r17
    2fac:	ff 24       	eor	r15, r15
    2fae:	00 27       	eor	r16, r16
    2fb0:	11 27       	eor	r17, r17
    2fb2:	8e 2d       	mov	r24, r14
    2fb4:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
    2fb8:	1f 91       	pop	r17
    2fba:	0f 91       	pop	r16
    2fbc:	ff 90       	pop	r15
    2fbe:	ef 90       	pop	r14
    2fc0:	08 95       	ret

00002fc2 <pkt_tx_int32>:
}

void pkt_tx_int32(int32_t data)
{
    2fc2:	ef 92       	push	r14
    2fc4:	ff 92       	push	r15
    2fc6:	0f 93       	push	r16
    2fc8:	1f 93       	push	r17
    2fca:	7b 01       	movw	r14, r22
    2fcc:	8c 01       	movw	r16, r24
  pkt_tx_uint8(data&0xff);
    2fce:	86 2f       	mov	r24, r22
    2fd0:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
  pkt_tx_uint8((data>>8)&0xff);
    2fd4:	bb 27       	eor	r27, r27
    2fd6:	17 fd       	sbrc	r17, 7
    2fd8:	ba 95       	dec	r27
    2fda:	a1 2f       	mov	r26, r17
    2fdc:	90 2f       	mov	r25, r16
    2fde:	8f 2d       	mov	r24, r15
    2fe0:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
  pkt_tx_uint8((data>>16)&0xff);
    2fe4:	c8 01       	movw	r24, r16
    2fe6:	bb 27       	eor	r27, r27
    2fe8:	97 fd       	sbrc	r25, 7
    2fea:	b0 95       	com	r27
    2fec:	ab 2f       	mov	r26, r27
    2fee:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
  pkt_tx_uint8((data>>24)&0xff);
    2ff2:	e1 2e       	mov	r14, r17
    2ff4:	11 27       	eor	r17, r17
    2ff6:	e7 fc       	sbrc	r14, 7
    2ff8:	10 95       	com	r17
    2ffa:	f1 2e       	mov	r15, r17
    2ffc:	01 2f       	mov	r16, r17
    2ffe:	8e 2d       	mov	r24, r14
    3000:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
    3004:	1f 91       	pop	r17
    3006:	0f 91       	pop	r16
    3008:	ff 90       	pop	r15
    300a:	ef 90       	pop	r14
    300c:	08 95       	ret

0000300e <pkt_tx_uint8_hex>:
}

void pkt_tx_uint8_hex(uint8_t x)
{
    300e:	1f 93       	push	r17
    3010:	18 2f       	mov	r17, r24
  pkt_tx_uint8(hex((x>>4)&0xf));
    3012:	82 95       	swap	r24
    3014:	8f 70       	andi	r24, 0x0F	; 15
    3016:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <hex>
    301a:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
  pkt_tx_uint8(hex((x>>0)&0xf));
    301e:	81 2f       	mov	r24, r17
    3020:	8f 70       	andi	r24, 0x0F	; 15
    3022:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <hex>
    3026:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
    302a:	1f 91       	pop	r17
    302c:	08 95       	ret

0000302e <pkt_tx_uint16_hex>:
}

void pkt_tx_uint16_hex(uint16_t x)
{
    302e:	0f 93       	push	r16
    3030:	1f 93       	push	r17
    3032:	8c 01       	movw	r16, r24
  pkt_tx_uint8(hex((x>>12)&0xf));
    3034:	89 2f       	mov	r24, r25
    3036:	99 27       	eor	r25, r25
    3038:	82 95       	swap	r24
    303a:	8f 70       	andi	r24, 0x0F	; 15
    303c:	8f 70       	andi	r24, 0x0F	; 15
    303e:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <hex>
    3042:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
  pkt_tx_uint8(hex((x>>8)&0xf));
    3046:	81 2f       	mov	r24, r17
    3048:	99 27       	eor	r25, r25
    304a:	8f 70       	andi	r24, 0x0F	; 15
    304c:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <hex>
    3050:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
  pkt_tx_uint8(hex((x>>4)&0xf));
    3054:	c8 01       	movw	r24, r16
    3056:	92 95       	swap	r25
    3058:	82 95       	swap	r24
    305a:	8f 70       	andi	r24, 0x0F	; 15
    305c:	89 27       	eor	r24, r25
    305e:	9f 70       	andi	r25, 0x0F	; 15
    3060:	89 27       	eor	r24, r25
    3062:	8f 70       	andi	r24, 0x0F	; 15
    3064:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <hex>
    3068:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
  pkt_tx_uint8(hex((x>>0)&0xf));
    306c:	80 2f       	mov	r24, r16
    306e:	8f 70       	andi	r24, 0x0F	; 15
    3070:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <hex>
    3074:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
    3078:	1f 91       	pop	r17
    307a:	0f 91       	pop	r16
    307c:	08 95       	ret

0000307e <pkt_tx_uint32_hex>:
}
void pkt_tx_uint32_hex(uint32_t x)
{
    307e:	ef 92       	push	r14
    3080:	ff 92       	push	r15
    3082:	0f 93       	push	r16
    3084:	1f 93       	push	r17
    3086:	7b 01       	movw	r14, r22
    3088:	8c 01       	movw	r16, r24
  pkt_tx_uint16_hex(x>>16);
    308a:	aa 27       	eor	r26, r26
    308c:	bb 27       	eor	r27, r27
    308e:	0e 94 17 18 	call	0x302e	; 0x302e <pkt_tx_uint16_hex>
  pkt_tx_uint16_hex(x);
    3092:	c7 01       	movw	r24, r14
    3094:	0e 94 17 18 	call	0x302e	; 0x302e <pkt_tx_uint16_hex>
    3098:	1f 91       	pop	r17
    309a:	0f 91       	pop	r16
    309c:	ff 90       	pop	r15
    309e:	ef 90       	pop	r14
    30a0:	08 95       	ret

000030a2 <pkt_tx_end>:
}



void pkt_tx_end()
{
    30a2:	cf 93       	push	r28
    30a4:	df 93       	push	r29
    30a6:	c1 e7       	ldi	r28, 0x71	; 113
    30a8:	d6 e0       	ldi	r29, 0x06	; 6
  for (int j=0; j<4; j++) {
    pkt_tx_raw(wrs.checksum[j]);
    30aa:	89 91       	ld	r24, Y+
    30ac:	0e 94 22 17 	call	0x2e44	; 0x2e44 <pkt_tx_raw>
    30b0:	86 e0       	ldi	r24, 0x06	; 6
    30b2:	c5 37       	cpi	r28, 0x75	; 117
    30b4:	d8 07       	cpc	r29, r24
    30b6:	c9 f7       	brne	.-14     	; 0x30aa <pkt_tx_end+0x8>
  }
  
  tx_buf[wrs.code_loc]=wrs.code|0x80;
    30b8:	e0 91 6f 06 	lds	r30, 0x066F
    30bc:	ff 27       	eor	r31, r31
    30be:	e1 50       	subi	r30, 0x01	; 1
    30c0:	fd 4f       	sbci	r31, 0xFD	; 253
    30c2:	80 91 6e 06 	lds	r24, 0x066E
    30c6:	80 68       	ori	r24, 0x80	; 128
    30c8:	80 83       	st	Z, r24
  tx_head=wrs.dst_loc;
    30ca:	80 91 70 06 	lds	r24, 0x0670
    30ce:	80 93 75 06 	sts	0x0675, r24
    30d2:	55 9a       	sbi	0x0a, 5	; 10
    30d4:	df 91       	pop	r29
    30d6:	cf 91       	pop	r28
    30d8:	08 95       	ret

000030da <err_tx_start>:
  
  uart_tx_enable_int();
}

/*
  A pointer into static storage is returned in *pkt_r, valid until the next time
  pkt_rx is called. Returns length, or 0 if no packet yet.
 */
int pkt_rx(uint8_t **pkt_r)
{
  static uint8_t pkt_buf[RX_PACKET_SIZE];
  static uint8_t pkt_bufi;
  static uint8_t chunk_rem;
  static uint8_t chunk_lastflag;
  static uint8_t chunk_zeroflag;

  while (!uart_rx_empty()) {

    uint8_t data=uart_rx_uint8();

    if (data==0) {
      if (pkt_bufi>0) {
        errs.rx_pktterm++;
      }
      chunk_rem=0;
      chunk_lastflag=0;
      chunk_zeroflag=0;
      pkt_bufi=0;
      continue;
    }

    if (chunk_rem==0) {
      chunk_rem=(data&0x3f);
      chunk_lastflag = (data&0x80) ? 1 : 0;
      chunk_zeroflag = (data&0x40) ? 1 : 0;
    }
    else if (chunk_rem>1) {
      pkt_buf[pkt_bufi++] = data;
      chunk_rem--;
    }

    if (chunk_rem==1) {
      if (chunk_zeroflag) {
        pkt_buf[pkt_bufi++] = 0;
      }
      chunk_rem=0;

      if (chunk_lastflag) {
        int bad=0;
        if (pkt_bufi < 5) {
          errs.rx_pktshort++;
          bad=1;
        }

        if (!bad) {
          uint8_t crc[4];
          for (uint8_t j=0; j<4; j++) crc[j]=0;
          for (uint8_t i=0; i<pkt_bufi-4; i++) {
            update_crc(pkt_buf[i], crc);
          }
          
          uint8_t *rxcrc=&pkt_buf[pkt_bufi-4];
          for (int j=0; j<4; j++) {
            if (crc[j] != rxcrc[j]) {
              errs.rx_pktcrc++;
              bad=1;
              break;
            }
          }
        }
        
        if (bad) {
          pkt_bufi=0;
        }
        else {
          uint8_t ret = pkt_bufi-4;
          *pkt_r = pkt_buf;
          pkt_bufi=0;
          return ret;
        }
      }

    }

  }
  return 0;
}

uint8_t err_inpkt;
void err_tx_start()
{
  err_inpkt=0;
    30da:	10 92 6d 06 	sts	0x066D, r1
    30de:	08 95       	ret

000030e0 <err_tx_counter>:
}

void err_tx_counter(uint8_t *ctp, char key)
{
    30e0:	0f 93       	push	r16
    30e2:	1f 93       	push	r17
    30e4:	cf 93       	push	r28
    30e6:	df 93       	push	r29
    30e8:	ec 01       	movw	r28, r24
    30ea:	06 2f       	mov	r16, r22
  uint8_t ct=*ctp;
    30ec:	18 81       	ld	r17, Y
  if (ct) {
    30ee:	11 23       	and	r17, r17
    30f0:	d9 f0       	breq	.+54     	; 0x3128 <err_tx_counter+0x48>
    if (!err_inpkt) {
    30f2:	80 91 6d 06 	lds	r24, 0x066D
    30f6:	88 23       	and	r24, r24
    30f8:	99 f4       	brne	.+38     	; 0x3120 <err_tx_counter+0x40>
      pkt_tx_start();
    30fa:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <pkt_tx_start>
      pkt_tx_uint8('F');
    30fe:	86 e4       	ldi	r24, 0x46	; 70
    3100:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
      err_inpkt=1;
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	80 93 6d 06 	sts	0x066D, r24
    } else {
      pkt_tx_uint8(' ');
    }
    pkt_tx_uint8(key);
    310a:	80 2f       	mov	r24, r16
    310c:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
    pkt_tx_uint8('=');
    3110:	8d e3       	ldi	r24, 0x3D	; 61
    3112:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
    pkt_tx_uint8_hex(ct);
    3116:	81 2f       	mov	r24, r17
    3118:	0e 94 07 18 	call	0x300e	; 0x300e <pkt_tx_uint8_hex>
    *ctp=0;
    311c:	18 82       	st	Y, r1
    311e:	04 c0       	rjmp	.+8      	; 0x3128 <err_tx_counter+0x48>
    3120:	80 e2       	ldi	r24, 0x20	; 32
    3122:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
    3126:	f1 cf       	rjmp	.-30     	; 0x310a <err_tx_counter+0x2a>
    3128:	df 91       	pop	r29
    312a:	cf 91       	pop	r28
    312c:	1f 91       	pop	r17
    312e:	0f 91       	pop	r16
    3130:	08 95       	ret

00003132 <err_tx_counter_str>:
  }
}

void err_tx_counter_str(uint8_t *ctp, const char *key)
{
    3132:	ff 92       	push	r15
    3134:	0f 93       	push	r16
    3136:	1f 93       	push	r17
    3138:	cf 93       	push	r28
    313a:	df 93       	push	r29
    313c:	ec 01       	movw	r28, r24
    313e:	8b 01       	movw	r16, r22
  uint8_t ct=*ctp;
    3140:	f8 80       	ld	r15, Y
  if (ct) {
    3142:	ff 20       	and	r15, r15
    3144:	d9 f0       	breq	.+54     	; 0x317c <err_tx_counter_str+0x4a>
    if (!err_inpkt) {
    3146:	80 91 6d 06 	lds	r24, 0x066D
    314a:	88 23       	and	r24, r24
    314c:	99 f4       	brne	.+38     	; 0x3174 <err_tx_counter_str+0x42>
      pkt_tx_start();
    314e:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <pkt_tx_start>
      pkt_tx_uint8('F');
    3152:	86 e4       	ldi	r24, 0x46	; 70
    3154:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
      err_inpkt=1;
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	80 93 6d 06 	sts	0x066D, r24
    } else {
      pkt_tx_uint8(' ');
    }
    pkt_tx_str(key);
    315e:	c8 01       	movw	r24, r16
    3160:	0e 94 84 17 	call	0x2f08	; 0x2f08 <pkt_tx_str>
    pkt_tx_uint8('=');
    3164:	8d e3       	ldi	r24, 0x3D	; 61
    3166:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
    pkt_tx_uint8_hex(ct);
    316a:	8f 2d       	mov	r24, r15
    316c:	0e 94 07 18 	call	0x300e	; 0x300e <pkt_tx_uint8_hex>
    *ctp=0;
    3170:	18 82       	st	Y, r1
    3172:	04 c0       	rjmp	.+8      	; 0x317c <err_tx_counter_str+0x4a>
    3174:	80 e2       	ldi	r24, 0x20	; 32
    3176:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <pkt_tx_uint8>
    317a:	f1 cf       	rjmp	.-30     	; 0x315e <err_tx_counter_str+0x2c>
    317c:	df 91       	pop	r29
    317e:	cf 91       	pop	r28
    3180:	1f 91       	pop	r17
    3182:	0f 91       	pop	r16
    3184:	ff 90       	pop	r15
    3186:	08 95       	ret

00003188 <err_tx_end>:
  }
}

void err_tx_end()
{
  if (err_inpkt) {
    3188:	80 91 6d 06 	lds	r24, 0x066D
    318c:	88 23       	and	r24, r24
    318e:	09 f4       	brne	.+2      	; 0x3192 <err_tx_end+0xa>
    3190:	08 95       	ret
    err_inpkt=0;
    3192:	10 92 6d 06 	sts	0x066D, r1
    pkt_tx_end();
    3196:	0e 94 51 18 	call	0x30a2	; 0x30a2 <pkt_tx_end>
    319a:	08 95       	ret

0000319c <err_tx_comm>:
  }
}

void err_tx_comm()
{
    319c:	0f 93       	push	r16
    319e:	1f 93       	push	r17
  err_tx_counter(&errs.rx_overrun, 'O');
    31a0:	0f ef       	ldi	r16, 0xFF	; 255
    31a2:	14 e0       	ldi	r17, 0x04	; 4
    31a4:	6f e4       	ldi	r22, 0x4F	; 79
    31a6:	c8 01       	movw	r24, r16
    31a8:	0e 94 70 18 	call	0x30e0	; 0x30e0 <err_tx_counter>
  err_tx_counter(&errs.rx_frame, 'F');
    31ac:	66 e4       	ldi	r22, 0x46	; 70
    31ae:	c8 01       	movw	r24, r16
    31b0:	02 96       	adiw	r24, 0x02	; 2
    31b2:	0e 94 70 18 	call	0x30e0	; 0x30e0 <err_tx_counter>
  err_tx_counter(&errs.rx_hw_overrun, 'H');
    31b6:	68 e4       	ldi	r22, 0x48	; 72
    31b8:	c8 01       	movw	r24, r16
    31ba:	01 96       	adiw	r24, 0x01	; 1
    31bc:	0e 94 70 18 	call	0x30e0	; 0x30e0 <err_tx_counter>
  err_tx_counter(&errs.rx_parity, 'P');
    31c0:	60 e5       	ldi	r22, 0x50	; 80
    31c2:	c8 01       	movw	r24, r16
    31c4:	03 96       	adiw	r24, 0x03	; 3
    31c6:	0e 94 70 18 	call	0x30e0	; 0x30e0 <err_tx_counter>

  err_tx_counter(&errs.rx_pktshort, 'S');
    31ca:	63 e5       	ldi	r22, 0x53	; 83
    31cc:	c8 01       	movw	r24, r16
    31ce:	04 96       	adiw	r24, 0x04	; 4
    31d0:	0e 94 70 18 	call	0x30e0	; 0x30e0 <err_tx_counter>
  err_tx_counter(&errs.rx_pktcrc, 'C');
    31d4:	63 e4       	ldi	r22, 0x43	; 67
    31d6:	c8 01       	movw	r24, r16
    31d8:	05 96       	adiw	r24, 0x05	; 5
    31da:	0e 94 70 18 	call	0x30e0	; 0x30e0 <err_tx_counter>
  err_tx_counter(&errs.rx_pkttz, 'Z');
    31de:	6a e5       	ldi	r22, 0x5A	; 90
    31e0:	c8 01       	movw	r24, r16
    31e2:	06 96       	adiw	r24, 0x06	; 6
    31e4:	0e 94 70 18 	call	0x30e0	; 0x30e0 <err_tx_counter>
  err_tx_counter(&errs.rx_pktterm, 'T');
    31e8:	64 e5       	ldi	r22, 0x54	; 84
    31ea:	c8 01       	movw	r24, r16
    31ec:	07 96       	adiw	r24, 0x07	; 7
    31ee:	0e 94 70 18 	call	0x30e0	; 0x30e0 <err_tx_counter>

  err_tx_counter(&errs.tx_busywait, 'W');
    31f2:	67 e5       	ldi	r22, 0x57	; 87
    31f4:	c8 01       	movw	r24, r16
    31f6:	08 96       	adiw	r24, 0x08	; 8
    31f8:	0e 94 70 18 	call	0x30e0	; 0x30e0 <err_tx_counter>
    31fc:	1f 91       	pop	r17
    31fe:	0f 91       	pop	r16
    3200:	08 95       	ret

00003202 <uart_tx_empty>:
}

#endif

uint8_t
uart_tx_empty()
{
  return tx_head == tx_tail;
    3202:	90 91 76 06 	lds	r25, 0x0676
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	80 91 75 06 	lds	r24, 0x0675
    320e:	89 17       	cp	r24, r25
    3210:	11 f4       	brne	.+4      	; 0x3216 <uart_tx_empty+0x14>
    3212:	21 e0       	ldi	r18, 0x01	; 1
    3214:	30 e0       	ldi	r19, 0x00	; 0
}
    3216:	c9 01       	movw	r24, r18
    3218:	08 95       	ret

0000321a <uart_tx_qlen>:

uint8_t
uart_tx_qlen()
{
  return tx_modulo(tx_head+TX_BUF_SIZE-tx_tail);
    321a:	90 91 76 06 	lds	r25, 0x0676
    321e:	80 91 75 06 	lds	r24, 0x0675
    3222:	89 1b       	sub	r24, r25
}
    3224:	99 27       	eor	r25, r25
    3226:	08 95       	ret

00003228 <uart_tx_str>:

void uart_tx_str(const char *s)
{
    3228:	cf 93       	push	r28
    322a:	df 93       	push	r29
    322c:	ec 01       	movw	r28, r24
  while (*s) {
    322e:	88 81       	ld	r24, Y
    3230:	88 23       	and	r24, r24
    3232:	31 f0       	breq	.+12     	; 0x3240 <uart_tx_str+0x18>
    uart_tx_uint8(*s++);
    3234:	21 96       	adiw	r28, 0x01	; 1
    3236:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <uart_tx_uint8>
    323a:	88 81       	ld	r24, Y
    323c:	88 23       	and	r24, r24
    323e:	d1 f7       	brne	.-12     	; 0x3234 <uart_tx_str+0xc>
    3240:	df 91       	pop	r29
    3242:	cf 91       	pop	r28
    3244:	08 95       	ret

00003246 <uart_tx_str_P>:
  }
}

void uart_tx_str_P(const char *s)
{
    3246:	cf 93       	push	r28
    3248:	df 93       	push	r29
    324a:	fc 01       	movw	r30, r24
  while (1) {
    char c=pgm_read_byte(s++);
    324c:	84 91       	lpm	r24, Z
    if (!c) break;
    324e:	88 23       	and	r24, r24
    3250:	51 f0       	breq	.+20     	; 0x3266 <uart_tx_str_P+0x20>
    3252:	ef 01       	movw	r28, r30
    3254:	21 96       	adiw	r28, 0x01	; 1
    uart_tx_uint8(c);
    3256:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <uart_tx_uint8>
    325a:	fe 01       	movw	r30, r28
    325c:	21 96       	adiw	r28, 0x01	; 1
    325e:	e4 91       	lpm	r30, Z
    3260:	8e 2f       	mov	r24, r30
    3262:	ee 23       	and	r30, r30
    3264:	c1 f7       	brne	.-16     	; 0x3256 <uart_tx_str_P+0x10>
    3266:	df 91       	pop	r29
    3268:	cf 91       	pop	r28
    326a:	08 95       	ret

0000326c <uart_tx_uint8_hex>:
  }
}

void uart_tx_uint8_hex(uint8_t x)
{
    326c:	1f 93       	push	r17
    326e:	18 2f       	mov	r17, r24
  uart_tx_uint8(hex((x>>4)&0xf));
    3270:	82 95       	swap	r24
    3272:	8f 70       	andi	r24, 0x0F	; 15
    3274:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <hex>
    3278:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <uart_tx_uint8>
  uart_tx_uint8(hex((x>>0)&0xf));
    327c:	81 2f       	mov	r24, r17
    327e:	8f 70       	andi	r24, 0x0F	; 15
    3280:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <hex>
    3284:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <uart_tx_uint8>
    3288:	1f 91       	pop	r17
    328a:	08 95       	ret

0000328c <uart_tx_uint16_hex>:
}

void uart_tx_uint16_hex(uint16_t x)
{
    328c:	0f 93       	push	r16
    328e:	1f 93       	push	r17
    3290:	8c 01       	movw	r16, r24
  uart_tx_uint8(hex((x>>12)&0xf));
    3292:	89 2f       	mov	r24, r25
    3294:	99 27       	eor	r25, r25
    3296:	82 95       	swap	r24
    3298:	8f 70       	andi	r24, 0x0F	; 15
    329a:	8f 70       	andi	r24, 0x0F	; 15
    329c:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <hex>
    32a0:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <uart_tx_uint8>
  uart_tx_uint8(hex((x>>8)&0xf));
    32a4:	81 2f       	mov	r24, r17
    32a6:	99 27       	eor	r25, r25
    32a8:	8f 70       	andi	r24, 0x0F	; 15
    32aa:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <hex>
    32ae:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <uart_tx_uint8>
  uart_tx_uint8(hex((x>>4)&0xf));
    32b2:	c8 01       	movw	r24, r16
    32b4:	92 95       	swap	r25
    32b6:	82 95       	swap	r24
    32b8:	8f 70       	andi	r24, 0x0F	; 15
    32ba:	89 27       	eor	r24, r25
    32bc:	9f 70       	andi	r25, 0x0F	; 15
    32be:	89 27       	eor	r24, r25
    32c0:	8f 70       	andi	r24, 0x0F	; 15
    32c2:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <hex>
    32c6:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <uart_tx_uint8>
  uart_tx_uint8(hex((x>>0)&0xf));
    32ca:	80 2f       	mov	r24, r16
    32cc:	8f 70       	andi	r24, 0x0F	; 15
    32ce:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <hex>
    32d2:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <uart_tx_uint8>
    32d6:	1f 91       	pop	r17
    32d8:	0f 91       	pop	r16
    32da:	08 95       	ret

000032dc <uart_tx_uint32_hex>:
}

void uart_tx_uint32_hex(uint32_t x)
{
    32dc:	ef 92       	push	r14
    32de:	ff 92       	push	r15
    32e0:	0f 93       	push	r16
    32e2:	1f 93       	push	r17
    32e4:	7b 01       	movw	r14, r22
    32e6:	8c 01       	movw	r16, r24
  uart_tx_uint16_hex(x>>16);
    32e8:	c8 01       	movw	r24, r16
    32ea:	aa 27       	eor	r26, r26
    32ec:	bb 27       	eor	r27, r27
    32ee:	0e 94 46 19 	call	0x328c	; 0x328c <uart_tx_uint16_hex>
  uart_tx_uint16_hex(x);
    32f2:	c7 01       	movw	r24, r14
    32f4:	0e 94 46 19 	call	0x328c	; 0x328c <uart_tx_uint16_hex>
    32f8:	1f 91       	pop	r17
    32fa:	0f 91       	pop	r16
    32fc:	ff 90       	pop	r15
    32fe:	ef 90       	pop	r14
    3300:	08 95       	ret

00003302 <uart_tx_int8>:
}


void uart_tx_int8(int8_t x)
{
  uart_tx_uint8((uint8_t)x);
    3302:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <uart_tx_uint8>
    3306:	08 95       	ret

00003308 <uart_tx_uint16>:
}

// Little endian
void uart_tx_uint16(uint16_t x)
{
    3308:	0f 93       	push	r16
    330a:	1f 93       	push	r17
    330c:	8c 01       	movw	r16, r24
  uart_tx_uint8(x&0xff);
    330e:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <uart_tx_uint8>
  uart_tx_uint8(x>>8);
    3312:	01 2f       	mov	r16, r17
    3314:	11 27       	eor	r17, r17
    3316:	80 2f       	mov	r24, r16
    3318:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <uart_tx_uint8>
    331c:	1f 91       	pop	r17
    331e:	0f 91       	pop	r16
    3320:	08 95       	ret

00003322 <uart_tx_int16>:
}

void uart_tx_int16(int16_t x)
{
    3322:	0f 93       	push	r16
    3324:	1f 93       	push	r17
    3326:	8c 01       	movw	r16, r24
  uart_tx_uint8(x&0xff);
    3328:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <uart_tx_uint8>
  uart_tx_uint8(x>>8);
    332c:	01 2f       	mov	r16, r17
    332e:	11 0f       	add	r17, r17
    3330:	11 0b       	sbc	r17, r17
    3332:	80 2f       	mov	r24, r16
    3334:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <uart_tx_uint8>
    3338:	1f 91       	pop	r17
    333a:	0f 91       	pop	r16
    333c:	08 95       	ret

0000333e <uart_tx_float>:
}

#if 1
void uart_tx_float(float x)
{
    333e:	ef 92       	push	r14
    3340:	ff 92       	push	r15
    3342:	0f 93       	push	r16
    3344:	1f 93       	push	r17
    3346:	7b 01       	movw	r14, r22
    3348:	8c 01       	movw	r16, r24
  // Turns out to be same representation as float on i386.
  union {
    float f;
    uint8_t c[4];
  } tmp;
  tmp.f=x;
  uart_tx_uint8(tmp.c[0]);
    334a:	86 2f       	mov	r24, r22
    334c:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <uart_tx_uint8>
  uart_tx_uint8(tmp.c[1]);
    3350:	8f 2d       	mov	r24, r15
    3352:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <uart_tx_uint8>
  uart_tx_uint8(tmp.c[2]);
    3356:	80 2f       	mov	r24, r16
    3358:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <uart_tx_uint8>
  uart_tx_uint8(tmp.c[3]);
    335c:	81 2f       	mov	r24, r17
    335e:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <uart_tx_uint8>
    3362:	1f 91       	pop	r17
    3364:	0f 91       	pop	r16
    3366:	ff 90       	pop	r15
    3368:	ef 90       	pop	r14
    336a:	08 95       	ret

0000336c <__vector_18>:
}
#endif


ISR(SIG_UART_RECV)
{
    336c:	1f 92       	push	r1
    336e:	0f 92       	push	r0
    3370:	0f b6       	in	r0, 0x3f	; 63
    3372:	0f 92       	push	r0
    3374:	11 24       	eor	r1, r1
    3376:	2f 93       	push	r18
    3378:	3f 93       	push	r19
    337a:	4f 93       	push	r20
    337c:	5f 93       	push	r21
    337e:	6f 93       	push	r22
    3380:	8f 93       	push	r24
    3382:	9f 93       	push	r25
    3384:	ef 93       	push	r30
    3386:	ff 93       	push	r31
  uint8_t gotflags=UCSRA;
    3388:	9b b1       	in	r25, 0x0b	; 11
  uint8_t gotchar=UDR;
    338a:	6c b1       	in	r22, 0x0c	; 12

  uint8_t next_head = rx_next(rx_head);
    338c:	80 91 77 06 	lds	r24, 0x0677
    3390:	8f 5f       	subi	r24, 0xFF	; 255
    3392:	48 2f       	mov	r20, r24
    3394:	55 27       	eor	r21, r21

  if (next_head == rx_tail) {
    3396:	80 91 6c 06 	lds	r24, 0x066C
    339a:	84 17       	cp	r24, r20
    339c:	39 f1       	breq	.+78     	; 0x33ec <__vector_18+0x80>
    errs.rx_overrun++;
    return;
  }
  if (gotflags & 0x10) {
    339e:	29 2f       	mov	r18, r25
    33a0:	33 27       	eor	r19, r19
    33a2:	24 fd       	sbrc	r18, 4
    33a4:	1b c0       	rjmp	.+54     	; 0x33dc <__vector_18+0x70>
    errs.rx_frame++;
  }
  if (gotflags & 0x08) {
    33a6:	23 fd       	sbrc	r18, 3
    33a8:	11 c0       	rjmp	.+34     	; 0x33cc <__vector_18+0x60>
    errs.rx_hw_overrun++;
  }
  if (gotflags & 0x04) {
    33aa:	22 fd       	sbrc	r18, 2
    33ac:	09 c0       	rjmp	.+18     	; 0x33c0 <__vector_18+0x54>
    errs.rx_parity++;
  }
  
  rx_buf[rx_head] = gotchar;
    33ae:	e0 91 77 06 	lds	r30, 0x0677
    33b2:	ff 27       	eor	r31, r31
    33b4:	e1 50       	subi	r30, 0x01	; 1
    33b6:	fc 4f       	sbci	r31, 0xFC	; 252
    33b8:	60 83       	st	Z, r22
  rx_head=next_head;
    33ba:	40 93 77 06 	sts	0x0677, r20
    33be:	1b c0       	rjmp	.+54     	; 0x33f6 <__vector_18+0x8a>
    33c0:	80 91 02 05 	lds	r24, 0x0502
    33c4:	8f 5f       	subi	r24, 0xFF	; 255
    33c6:	80 93 02 05 	sts	0x0502, r24
    33ca:	f1 cf       	rjmp	.-30     	; 0x33ae <__vector_18+0x42>
    33cc:	80 91 00 05 	lds	r24, 0x0500
    33d0:	8f 5f       	subi	r24, 0xFF	; 255
    33d2:	80 93 00 05 	sts	0x0500, r24
    33d6:	22 ff       	sbrs	r18, 2
    33d8:	ea cf       	rjmp	.-44     	; 0x33ae <__vector_18+0x42>
    33da:	f2 cf       	rjmp	.-28     	; 0x33c0 <__vector_18+0x54>
    33dc:	80 91 01 05 	lds	r24, 0x0501
    33e0:	8f 5f       	subi	r24, 0xFF	; 255
    33e2:	80 93 01 05 	sts	0x0501, r24
    33e6:	23 ff       	sbrs	r18, 3
    33e8:	e0 cf       	rjmp	.-64     	; 0x33aa <__vector_18+0x3e>
    33ea:	f0 cf       	rjmp	.-32     	; 0x33cc <__vector_18+0x60>
    33ec:	80 91 ff 04 	lds	r24, 0x04FF
    33f0:	8f 5f       	subi	r24, 0xFF	; 255
    33f2:	80 93 ff 04 	sts	0x04FF, r24
    33f6:	ff 91       	pop	r31
    33f8:	ef 91       	pop	r30
    33fa:	9f 91       	pop	r25
    33fc:	8f 91       	pop	r24
    33fe:	6f 91       	pop	r22
    3400:	5f 91       	pop	r21
    3402:	4f 91       	pop	r20
    3404:	3f 91       	pop	r19
    3406:	2f 91       	pop	r18
    3408:	0f 90       	pop	r0
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	0f 90       	pop	r0
    340e:	1f 90       	pop	r1
    3410:	18 95       	reti

00003412 <uart_rx_uint8>:
}


void
uart_poll()
{
  uint8_t gotflags=UCSRA;

  if (gotflags & (1<<RXC)) {
    uint8_t gotchar=UDR;

    uint8_t next_head = rx_next(rx_head);

    if (next_head == rx_tail) {
      errs.rx_overrun++;
      goto do_tx;
    }
    if (gotflags & 0x10) {
      errs.rx_frame++;
    }
    if (gotflags & 0x08) {
      errs.rx_hw_overrun++;
    }
    if (gotflags & 0x04) {
      errs.rx_parity++;
    }
  
    rx_buf[rx_head] = gotchar;
    rx_head=next_head;    
  }

 do_tx:
  if (gotflags & (1<<TXC)) {
    if (tx_head != tx_tail) {
      UCSRA = gotflags;
      UDR = tx_buf[tx_tail];
      tx_tail = tx_next(tx_tail);
    }
  }
}


uint8_t uart_rx_uint8()
{
  while (rx_head == rx_tail) {}
    3412:	90 91 6c 06 	lds	r25, 0x066C
    3416:	80 91 77 06 	lds	r24, 0x0677
    341a:	89 17       	cp	r24, r25
    341c:	e1 f3       	breq	.-8      	; 0x3416 <uart_rx_uint8+0x4>

  uint8_t ret=rx_buf[rx_tail];
    341e:	e9 2f       	mov	r30, r25
    3420:	ff 27       	eor	r31, r31
    3422:	e1 50       	subi	r30, 0x01	; 1
    3424:	fc 4f       	sbci	r31, 0xFC	; 252
    3426:	80 81       	ld	r24, Z
  rx_tail = rx_next(rx_tail);
    3428:	9f 5f       	subi	r25, 0xFF	; 255
    342a:	90 93 6c 06 	sts	0x066C, r25

  return ret;
}
    342e:	99 27       	eor	r25, r25
    3430:	08 95       	ret

00003432 <uart_rx_uint16>:

uint16_t uart_rx_uint16()
{
    3432:	0f 93       	push	r16
    3434:	1f 93       	push	r17
  uint8_t c1=uart_rx_uint8();
    3436:	0e 94 09 1a 	call	0x3412	; 0x3412 <uart_rx_uint8>
    343a:	08 2f       	mov	r16, r24
  uint8_t c2=uart_rx_uint8();
    343c:	0e 94 09 1a 	call	0x3412	; 0x3412 <uart_rx_uint8>
    3440:	99 27       	eor	r25, r25
    3442:	98 2f       	mov	r25, r24
    3444:	88 27       	eor	r24, r24
    3446:	11 27       	eor	r17, r17
  return ((uint16_t)c2)<<8 | (uint16_t)c1;
}
    3448:	80 2b       	or	r24, r16
    344a:	91 2b       	or	r25, r17
    344c:	1f 91       	pop	r17
    344e:	0f 91       	pop	r16
    3450:	08 95       	ret

00003452 <uart_rx_peek>:

uint8_t uart_rx_peek()
{
  while (rx_head == rx_tail) {}
    3452:	e0 91 6c 06 	lds	r30, 0x066C
    3456:	80 91 77 06 	lds	r24, 0x0677
    345a:	8e 17       	cp	r24, r30
    345c:	e1 f3       	breq	.-8      	; 0x3456 <uart_rx_peek+0x4>
    345e:	ff 27       	eor	r31, r31
    3460:	e1 50       	subi	r30, 0x01	; 1
    3462:	fc 4f       	sbci	r31, 0xFC	; 252
    3464:	80 81       	ld	r24, Z
  return rx_buf[rx_tail];
}
    3466:	99 27       	eor	r25, r25
    3468:	08 95       	ret

0000346a <uart_rx_empty>:

uint8_t uart_rx_empty()
{
  return rx_head == rx_tail;
    346a:	90 91 77 06 	lds	r25, 0x0677
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	80 91 6c 06 	lds	r24, 0x066C
    3476:	98 17       	cp	r25, r24
    3478:	11 f4       	brne	.+4      	; 0x347e <uart_rx_empty+0x14>
    347a:	21 e0       	ldi	r18, 0x01	; 1
    347c:	30 e0       	ldi	r19, 0x00	; 0
}
    347e:	c9 01       	movw	r24, r18
    3480:	08 95       	ret

00003482 <pkt_rx>:
    3482:	4f 92       	push	r4
    3484:	5f 92       	push	r5
    3486:	6f 92       	push	r6
    3488:	7f 92       	push	r7
    348a:	8f 92       	push	r8
    348c:	9f 92       	push	r9
    348e:	af 92       	push	r10
    3490:	bf 92       	push	r11
    3492:	cf 92       	push	r12
    3494:	df 92       	push	r13
    3496:	ef 92       	push	r14
    3498:	ff 92       	push	r15
    349a:	0f 93       	push	r16
    349c:	1f 93       	push	r17
    349e:	cf 93       	push	r28
    34a0:	df 93       	push	r29
    34a2:	cd b7       	in	r28, 0x3d	; 61
    34a4:	de b7       	in	r29, 0x3e	; 62
    34a6:	24 97       	sbiw	r28, 0x04	; 4
    34a8:	0f b6       	in	r0, 0x3f	; 63
    34aa:	f8 94       	cli
    34ac:	de bf       	out	0x3e, r29	; 62
    34ae:	0f be       	out	0x3f, r0	; 63
    34b0:	cd bf       	out	0x3d, r28	; 61
    34b2:	3c 01       	movw	r6, r24
    34b4:	00 91 fe 01 	lds	r16, 0x01FE
    34b8:	b0 90 fb 01 	lds	r11, 0x01FB
    34bc:	a0 90 fc 01 	lds	r10, 0x01FC
    34c0:	10 91 fd 01 	lds	r17, 0x01FD
    34c4:	0e 94 35 1a 	call	0x346a	; 0x346a <uart_rx_empty>
    34c8:	88 23       	and	r24, r24
    34ca:	99 f4       	brne	.+38     	; 0x34f2 <pkt_rx+0x70>
    34cc:	0e 94 09 1a 	call	0x3412	; 0x3412 <uart_rx_uint8>
    34d0:	88 23       	and	r24, r24
    34d2:	d1 f4       	brne	.+52     	; 0x3508 <pkt_rx+0x86>
    34d4:	00 23       	and	r16, r16
    34d6:	29 f0       	breq	.+10     	; 0x34e2 <pkt_rx+0x60>
    34d8:	80 91 06 05 	lds	r24, 0x0506
    34dc:	8f 5f       	subi	r24, 0xFF	; 255
    34de:	80 93 06 05 	sts	0x0506, r24
    34e2:	00 e0       	ldi	r16, 0x00	; 0
    34e4:	bb 24       	eor	r11, r11
    34e6:	aa 24       	eor	r10, r10
    34e8:	10 e0       	ldi	r17, 0x00	; 0
    34ea:	0e 94 35 1a 	call	0x346a	; 0x346a <uart_rx_empty>
    34ee:	88 23       	and	r24, r24
    34f0:	69 f3       	breq	.-38     	; 0x34cc <pkt_rx+0x4a>
    34f2:	00 93 fe 01 	sts	0x01FE, r16
    34f6:	b0 92 fb 01 	sts	0x01FB, r11
    34fa:	a0 92 fc 01 	sts	0x01FC, r10
    34fe:	10 93 fd 01 	sts	0x01FD, r17
    3502:	80 e0       	ldi	r24, 0x00	; 0
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	8d c0       	rjmp	.+282    	; 0x3622 <pkt_rx+0x1a0>
    3508:	11 23       	and	r17, r17
    350a:	09 f0       	breq	.+2      	; 0x350e <pkt_rx+0x8c>
    350c:	67 c0       	rjmp	.+206    	; 0x35dc <pkt_rx+0x15a>
    350e:	18 2f       	mov	r17, r24
    3510:	1f 73       	andi	r17, 0x3F	; 63
    3512:	a8 2e       	mov	r10, r24
    3514:	aa 1c       	adc	r10, r10
    3516:	aa 24       	eor	r10, r10
    3518:	aa 1c       	adc	r10, r10
    351a:	99 27       	eor	r25, r25
    351c:	00 24       	eor	r0, r0
    351e:	88 0f       	add	r24, r24
    3520:	99 1f       	adc	r25, r25
    3522:	00 1c       	adc	r0, r0
    3524:	88 0f       	add	r24, r24
    3526:	99 1f       	adc	r25, r25
    3528:	00 1c       	adc	r0, r0
    352a:	89 2f       	mov	r24, r25
    352c:	90 2d       	mov	r25, r0
    352e:	21 e0       	ldi	r18, 0x01	; 1
    3530:	b2 2e       	mov	r11, r18
    3532:	b8 22       	and	r11, r24
    3534:	11 30       	cpi	r17, 0x01	; 1
    3536:	31 f6       	brne	.-116    	; 0x34c4 <pkt_rx+0x42>
    3538:	bb 20       	and	r11, r11
    353a:	31 f0       	breq	.+12     	; 0x3548 <pkt_rx+0xc6>
    353c:	e0 2f       	mov	r30, r16
    353e:	ff 27       	eor	r31, r31
    3540:	e1 50       	subi	r30, 0x01	; 1
    3542:	fe 4f       	sbci	r31, 0xFE	; 254
    3544:	10 82       	st	Z, r1
    3546:	0f 5f       	subi	r16, 0xFF	; 255
    3548:	aa 20       	and	r10, r10
    354a:	09 f4       	brne	.+2      	; 0x354e <pkt_rx+0xcc>
    354c:	58 c0       	rjmp	.+176    	; 0x35fe <pkt_rx+0x17c>
    354e:	05 30       	cpi	r16, 0x05	; 5
    3550:	08 f4       	brcc	.+2      	; 0x3554 <pkt_rx+0xd2>
    3552:	57 c0       	rjmp	.+174    	; 0x3602 <pkt_rx+0x180>
    3554:	19 82       	std	Y+1, r1	; 0x01
    3556:	1a 82       	std	Y+2, r1	; 0x02
    3558:	1b 82       	std	Y+3, r1	; 0x03
    355a:	1c 82       	std	Y+4, r1	; 0x04
    355c:	80 2e       	mov	r8, r16
    355e:	99 24       	eor	r9, r9
    3560:	9c ef       	ldi	r25, 0xFC	; 252
    3562:	e9 2e       	mov	r14, r25
    3564:	9f ef       	ldi	r25, 0xFF	; 255
    3566:	f9 2e       	mov	r15, r25
    3568:	e8 0c       	add	r14, r8
    356a:	f9 1c       	adc	r15, r9
    356c:	1e 14       	cp	r1, r14
    356e:	1f 04       	cpc	r1, r15
    3570:	0c f0       	brlt	.+2      	; 0x3574 <pkt_rx+0xf2>
    3572:	4e c0       	rjmp	.+156    	; 0x3610 <pkt_rx+0x18e>
    3574:	10 e0       	ldi	r17, 0x00	; 0
    3576:	e0 e0       	ldi	r30, 0x00	; 0
    3578:	f0 e0       	ldi	r31, 0x00	; 0
    357a:	8f ef       	ldi	r24, 0xFF	; 255
    357c:	48 2e       	mov	r4, r24
    357e:	81 e0       	ldi	r24, 0x01	; 1
    3580:	58 2e       	mov	r5, r24
    3582:	6e 01       	movw	r12, r28
    3584:	08 94       	sec
    3586:	c1 1c       	adc	r12, r1
    3588:	d1 1c       	adc	r13, r1
    358a:	e1 50       	subi	r30, 0x01	; 1
    358c:	fe 4f       	sbci	r31, 0xFE	; 254
    358e:	b6 01       	movw	r22, r12
    3590:	80 81       	ld	r24, Z
    3592:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <update_crc>
    3596:	1f 5f       	subi	r17, 0xFF	; 255
    3598:	e1 2f       	mov	r30, r17
    359a:	ff 27       	eor	r31, r31
    359c:	ee 15       	cp	r30, r14
    359e:	ff 05       	cpc	r31, r15
    35a0:	a4 f3       	brlt	.-24     	; 0x358a <pkt_rx+0x108>
    35a2:	f4 01       	movw	r30, r8
    35a4:	e5 50       	subi	r30, 0x05	; 5
    35a6:	fe 4f       	sbci	r31, 0xFE	; 254
    35a8:	d6 01       	movw	r26, r12
    35aa:	9f 01       	movw	r18, r30
    35ac:	2c 5f       	subi	r18, 0xFC	; 252
    35ae:	3f 4f       	sbci	r19, 0xFF	; 255
    35b0:	9d 91       	ld	r25, X+
    35b2:	81 91       	ld	r24, Z+
    35b4:	98 17       	cp	r25, r24
    35b6:	e9 f4       	brne	.+58     	; 0x35f2 <pkt_rx+0x170>
    35b8:	e2 17       	cp	r30, r18
    35ba:	f3 07       	cpc	r31, r19
    35bc:	c9 f7       	brne	.-14     	; 0x35b0 <pkt_rx+0x12e>
    35be:	b0 92 fb 01 	sts	0x01FB, r11
    35c2:	a0 92 fc 01 	sts	0x01FC, r10
    35c6:	10 92 fd 01 	sts	0x01FD, r1
    35ca:	f3 01       	movw	r30, r6
    35cc:	51 82       	std	Z+1, r5	; 0x01
    35ce:	40 82       	st	Z, r4
    35d0:	10 92 fe 01 	sts	0x01FE, r1
    35d4:	04 50       	subi	r16, 0x04	; 4
    35d6:	80 2f       	mov	r24, r16
    35d8:	99 27       	eor	r25, r25
    35da:	23 c0       	rjmp	.+70     	; 0x3622 <pkt_rx+0x1a0>
    35dc:	12 30       	cpi	r17, 0x02	; 2
    35de:	08 f4       	brcc	.+2      	; 0x35e2 <pkt_rx+0x160>
    35e0:	a9 cf       	rjmp	.-174    	; 0x3534 <pkt_rx+0xb2>
    35e2:	e0 2f       	mov	r30, r16
    35e4:	ff 27       	eor	r31, r31
    35e6:	e1 50       	subi	r30, 0x01	; 1
    35e8:	fe 4f       	sbci	r31, 0xFE	; 254
    35ea:	80 83       	st	Z, r24
    35ec:	0f 5f       	subi	r16, 0xFF	; 255
    35ee:	11 50       	subi	r17, 0x01	; 1
    35f0:	a1 cf       	rjmp	.-190    	; 0x3534 <pkt_rx+0xb2>
    35f2:	80 91 04 05 	lds	r24, 0x0504
    35f6:	8f 5f       	subi	r24, 0xFF	; 255
    35f8:	80 93 04 05 	sts	0x0504, r24
    35fc:	00 e0       	ldi	r16, 0x00	; 0
    35fe:	10 e0       	ldi	r17, 0x00	; 0
    3600:	61 cf       	rjmp	.-318    	; 0x34c4 <pkt_rx+0x42>
    3602:	80 91 03 05 	lds	r24, 0x0503
    3606:	8f 5f       	subi	r24, 0xFF	; 255
    3608:	80 93 03 05 	sts	0x0503, r24
    360c:	00 e0       	ldi	r16, 0x00	; 0
    360e:	f7 cf       	rjmp	.-18     	; 0x35fe <pkt_rx+0x17c>
    3610:	bf ef       	ldi	r27, 0xFF	; 255
    3612:	4b 2e       	mov	r4, r27
    3614:	b1 e0       	ldi	r27, 0x01	; 1
    3616:	5b 2e       	mov	r5, r27
    3618:	6e 01       	movw	r12, r28
    361a:	08 94       	sec
    361c:	c1 1c       	adc	r12, r1
    361e:	d1 1c       	adc	r13, r1
    3620:	c0 cf       	rjmp	.-128    	; 0x35a2 <pkt_rx+0x120>
    3622:	24 96       	adiw	r28, 0x04	; 4
    3624:	0f b6       	in	r0, 0x3f	; 63
    3626:	f8 94       	cli
    3628:	de bf       	out	0x3e, r29	; 62
    362a:	0f be       	out	0x3f, r0	; 63
    362c:	cd bf       	out	0x3d, r28	; 61
    362e:	df 91       	pop	r29
    3630:	cf 91       	pop	r28
    3632:	1f 91       	pop	r17
    3634:	0f 91       	pop	r16
    3636:	ff 90       	pop	r15
    3638:	ef 90       	pop	r14
    363a:	df 90       	pop	r13
    363c:	cf 90       	pop	r12
    363e:	bf 90       	pop	r11
    3640:	af 90       	pop	r10
    3642:	9f 90       	pop	r9
    3644:	8f 90       	pop	r8
    3646:	7f 90       	pop	r7
    3648:	6f 90       	pop	r6
    364a:	5f 90       	pop	r5
    364c:	4f 90       	pop	r4
    364e:	08 95       	ret

00003650 <uart_rx_qlen>:


uint8_t uart_rx_qlen()
{
  return rx_modulo(rx_head+RX_BUF_SIZE-rx_tail);
    3650:	80 91 77 06 	lds	r24, 0x0677
    3654:	90 91 6c 06 	lds	r25, 0x066C
    3658:	89 1b       	sub	r24, r25
}
    365a:	99 27       	eor	r25, r25
    365c:	08 95       	ret

0000365e <uart_init_rx>:

void uart_init_rx()
{
  rx_head = rx_tail = 0;
    365e:	10 92 6c 06 	sts	0x066C, r1
    3662:	10 92 77 06 	sts	0x0677, r1

#if defined (__AVR_ATmega128__)
  DDRE &= ~(1<<0); // PE0 is rxd, needs to be input
    3666:	10 98       	cbi	0x02, 0	; 2
  PORTE &= ~(1<<0); // no pullup
    3668:	18 98       	cbi	0x03, 0	; 3
#elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega2560__)
  DDRE &= ~(1<<0); // PE0 is rxd, needs to be input
  PORTE &= ~(1<<0); // no pullup
#else
  DDRD &= ~(1<<0); // PD0 is rxd, needs to be input
  PORTD &= ~(1<<0); // no pullup
#endif
 
  UCSRB |= (1<<RXEN) | (1<<RXCIE); // enable rx
    366a:	8a b1       	in	r24, 0x0a	; 10
    366c:	80 69       	ori	r24, 0x90	; 144
    366e:	8a b9       	out	0x0a, r24	; 10
    3670:	08 95       	ret

00003672 <__vector_19>:
    3672:	1f 92       	push	r1
    3674:	0f 92       	push	r0
    3676:	0f b6       	in	r0, 0x3f	; 63
    3678:	0f 92       	push	r0
    367a:	11 24       	eor	r1, r1
    367c:	8f 93       	push	r24
    367e:	9f 93       	push	r25
    3680:	ef 93       	push	r30
    3682:	ff 93       	push	r31
    3684:	90 91 76 06 	lds	r25, 0x0676
    3688:	80 91 75 06 	lds	r24, 0x0675
    368c:	89 17       	cp	r24, r25
    368e:	71 f0       	breq	.+28     	; 0x36ac <__vector_19+0x3a>
    3690:	e0 91 76 06 	lds	r30, 0x0676
    3694:	ff 27       	eor	r31, r31
    3696:	e1 50       	subi	r30, 0x01	; 1
    3698:	fd 4f       	sbci	r31, 0xFD	; 253
    369a:	80 81       	ld	r24, Z
    369c:	8c b9       	out	0x0c, r24	; 12
    369e:	80 91 76 06 	lds	r24, 0x0676
    36a2:	8f 5f       	subi	r24, 0xFF	; 255
    36a4:	99 27       	eor	r25, r25
    36a6:	80 93 76 06 	sts	0x0676, r24
    36aa:	01 c0       	rjmp	.+2      	; 0x36ae <__vector_19+0x3c>
    36ac:	55 98       	cbi	0x0a, 5	; 10
    36ae:	ff 91       	pop	r31
    36b0:	ef 91       	pop	r30
    36b2:	9f 91       	pop	r25
    36b4:	8f 91       	pop	r24
    36b6:	0f 90       	pop	r0
    36b8:	0f be       	out	0x3f, r0	; 63
    36ba:	0f 90       	pop	r0
    36bc:	1f 90       	pop	r1
    36be:	18 95       	reti

000036c0 <uart_poll>:
    36c0:	4b b1       	in	r20, 0x0b	; 11
    36c2:	44 23       	and	r20, r20
    36c4:	cc f0       	brlt	.+50     	; 0x36f8 <uart_poll+0x38>
    36c6:	24 2f       	mov	r18, r20
    36c8:	33 27       	eor	r19, r19
    36ca:	26 ff       	sbrs	r18, 6
    36cc:	14 c0       	rjmp	.+40     	; 0x36f6 <uart_poll+0x36>
    36ce:	90 91 76 06 	lds	r25, 0x0676
    36d2:	80 91 75 06 	lds	r24, 0x0675
    36d6:	89 17       	cp	r24, r25
    36d8:	71 f0       	breq	.+28     	; 0x36f6 <uart_poll+0x36>
    36da:	4b b9       	out	0x0b, r20	; 11
    36dc:	e0 91 76 06 	lds	r30, 0x0676
    36e0:	ff 27       	eor	r31, r31
    36e2:	e1 50       	subi	r30, 0x01	; 1
    36e4:	fd 4f       	sbci	r31, 0xFD	; 253
    36e6:	80 81       	ld	r24, Z
    36e8:	8c b9       	out	0x0c, r24	; 12
    36ea:	80 91 76 06 	lds	r24, 0x0676
    36ee:	8f 5f       	subi	r24, 0xFF	; 255
    36f0:	99 27       	eor	r25, r25
    36f2:	80 93 76 06 	sts	0x0676, r24
    36f6:	08 95       	ret
    36f8:	9c b1       	in	r25, 0x0c	; 12
    36fa:	80 91 77 06 	lds	r24, 0x0677
    36fe:	8f 5f       	subi	r24, 0xFF	; 255
    3700:	68 2f       	mov	r22, r24
    3702:	77 27       	eor	r23, r23
    3704:	80 91 6c 06 	lds	r24, 0x066C
    3708:	86 17       	cp	r24, r22
    370a:	01 f1       	breq	.+64     	; 0x374c <uart_poll+0x8c>
    370c:	24 2f       	mov	r18, r20
    370e:	33 27       	eor	r19, r19
    3710:	24 ff       	sbrs	r18, 4
    3712:	05 c0       	rjmp	.+10     	; 0x371e <uart_poll+0x5e>
    3714:	80 91 01 05 	lds	r24, 0x0501
    3718:	8f 5f       	subi	r24, 0xFF	; 255
    371a:	80 93 01 05 	sts	0x0501, r24
    371e:	23 ff       	sbrs	r18, 3
    3720:	05 c0       	rjmp	.+10     	; 0x372c <uart_poll+0x6c>
    3722:	80 91 00 05 	lds	r24, 0x0500
    3726:	8f 5f       	subi	r24, 0xFF	; 255
    3728:	80 93 00 05 	sts	0x0500, r24
    372c:	22 ff       	sbrs	r18, 2
    372e:	05 c0       	rjmp	.+10     	; 0x373a <uart_poll+0x7a>
    3730:	80 91 02 05 	lds	r24, 0x0502
    3734:	8f 5f       	subi	r24, 0xFF	; 255
    3736:	80 93 02 05 	sts	0x0502, r24
    373a:	e0 91 77 06 	lds	r30, 0x0677
    373e:	ff 27       	eor	r31, r31
    3740:	e1 50       	subi	r30, 0x01	; 1
    3742:	fc 4f       	sbci	r31, 0xFC	; 252
    3744:	90 83       	st	Z, r25
    3746:	60 93 77 06 	sts	0x0677, r22
    374a:	bf cf       	rjmp	.-130    	; 0x36ca <uart_poll+0xa>
    374c:	80 91 ff 04 	lds	r24, 0x04FF
    3750:	8f 5f       	subi	r24, 0xFF	; 255
    3752:	80 93 ff 04 	sts	0x04FF, r24
    3756:	b7 cf       	rjmp	.-146    	; 0x36c6 <uart_poll+0x6>

00003758 <__subsf3>:
    3758:	50 58       	subi	r21, 0x80	; 128

0000375a <__addsf3>:
    375a:	19 2e       	mov	r1, r25
    375c:	ef d0       	rcall	.+478    	; 0x393c <__fp_split3>
    375e:	01 d0       	rcall	.+2      	; 0x3762 <__addsf3x>
    3760:	d2 c0       	rjmp	.+420    	; 0x3906 <__fp_merge>

00003762 <__addsf3x>:
    3762:	ba 17       	cp	r27, r26
    3764:	62 07       	cpc	r22, r18
    3766:	73 07       	cpc	r23, r19
    3768:	84 07       	cpc	r24, r20
    376a:	95 07       	cpc	r25, r21
    376c:	b1 f1       	breq	.+108    	; 0x37da <__addsf3x+0x78>
    376e:	88 f4       	brcc	.+34     	; 0x3792 <__addsf3x+0x30>
    3770:	0e f4       	brtc	.+2      	; 0x3774 <__addsf3x+0x12>
    3772:	10 94       	com	r1
    3774:	0b 2e       	mov	r0, r27
    3776:	ba 2f       	mov	r27, r26
    3778:	a0 2d       	mov	r26, r0
    377a:	06 2e       	mov	r0, r22
    377c:	62 2f       	mov	r22, r18
    377e:	20 2d       	mov	r18, r0
    3780:	07 2e       	mov	r0, r23
    3782:	73 2f       	mov	r23, r19
    3784:	30 2d       	mov	r19, r0
    3786:	08 2e       	mov	r0, r24
    3788:	84 2f       	mov	r24, r20
    378a:	40 2d       	mov	r20, r0
    378c:	09 2e       	mov	r0, r25
    378e:	95 2f       	mov	r25, r21
    3790:	50 2d       	mov	r21, r0
    3792:	ff 27       	eor	r31, r31
    3794:	55 23       	and	r21, r21
    3796:	b9 f0       	breq	.+46     	; 0x37c6 <__addsf3x+0x64>
    3798:	59 1b       	sub	r21, r25
    379a:	49 f0       	breq	.+18     	; 0x37ae <__addsf3x+0x4c>
    379c:	57 3e       	cpi	r21, 0xE7	; 231
    379e:	98 f0       	brcs	.+38     	; 0x37c6 <__addsf3x+0x64>
    37a0:	46 95       	lsr	r20
    37a2:	37 95       	ror	r19
    37a4:	27 95       	ror	r18
    37a6:	a7 95       	ror	r26
    37a8:	f0 40       	sbci	r31, 0x00	; 0
    37aa:	53 95       	inc	r21
    37ac:	c9 f7       	brne	.-14     	; 0x37a0 <__addsf3x+0x3e>
    37ae:	76 f0       	brts	.+28     	; 0x37cc <__addsf3x+0x6a>
    37b0:	ba 0f       	add	r27, r26
    37b2:	62 1f       	adc	r22, r18
    37b4:	73 1f       	adc	r23, r19
    37b6:	84 1f       	adc	r24, r20
    37b8:	30 f4       	brcc	.+12     	; 0x37c6 <__addsf3x+0x64>
    37ba:	87 95       	ror	r24
    37bc:	77 95       	ror	r23
    37be:	67 95       	ror	r22
    37c0:	b7 95       	ror	r27
    37c2:	f0 40       	sbci	r31, 0x00	; 0
    37c4:	93 95       	inc	r25
    37c6:	17 fa       	bst	r1, 7
    37c8:	0f 2e       	mov	r0, r31
    37ca:	08 95       	ret
    37cc:	bf 1b       	sub	r27, r31
    37ce:	bb 27       	eor	r27, r27
    37d0:	ba 0b       	sbc	r27, r26
    37d2:	62 0b       	sbc	r22, r18
    37d4:	73 0b       	sbc	r23, r19
    37d6:	84 0b       	sbc	r24, r20
    37d8:	f6 cf       	rjmp	.-20     	; 0x37c6 <__addsf3x+0x64>
    37da:	de f6       	brtc	.-74     	; 0x3792 <__addsf3x+0x30>
    37dc:	db c0       	rjmp	.+438    	; 0x3994 <__fp_zerox>

000037de <__divsf3>:
    37de:	ae d0       	rcall	.+348    	; 0x393c <__fp_split3>
    37e0:	01 d0       	rcall	.+2      	; 0x37e4 <__divsf3x>
    37e2:	91 c0       	rjmp	.+290    	; 0x3906 <__fp_merge>

000037e4 <__divsf3x>:
    37e4:	55 23       	and	r21, r21
    37e6:	59 f0       	breq	.+22     	; 0x37fe <__divsf3x+0x1a>
    37e8:	99 23       	and	r25, r25
    37ea:	69 f0       	breq	.+26     	; 0x3806 <__divsf3x+0x22>
    37ec:	9f 57       	subi	r25, 0x7F	; 127
    37ee:	5f 57       	subi	r21, 0x7F	; 127
    37f0:	95 1b       	sub	r25, r21
    37f2:	33 f4       	brvc	.+12     	; 0x3800 <__divsf3x+0x1c>
    37f4:	42 f4       	brpl	.+16     	; 0x3806 <__divsf3x+0x22>
    37f6:	90 38       	cpi	r25, 0x80	; 128
    37f8:	11 f4       	brne	.+4      	; 0x37fe <__divsf3x+0x1a>
    37fa:	91 58       	subi	r25, 0x81	; 129
    37fc:	05 c0       	rjmp	.+10     	; 0x3808 <__divsf3x+0x24>
    37fe:	9b c0       	rjmp	.+310    	; 0x3936 <__fp_nan>
    3800:	91 58       	subi	r25, 0x81	; 129
    3802:	9f 3f       	cpi	r25, 0xFF	; 255
    3804:	09 f4       	brne	.+2      	; 0x3808 <__divsf3x+0x24>
    3806:	c6 c0       	rjmp	.+396    	; 0x3994 <__fp_zerox>
    3808:	bb 27       	eor	r27, r27
    380a:	11 24       	eor	r1, r1
    380c:	62 17       	cp	r22, r18
    380e:	73 07       	cpc	r23, r19
    3810:	84 07       	cpc	r24, r20
    3812:	30 f4       	brcc	.+12     	; 0x3820 <__divsf3x+0x3c>
    3814:	66 0f       	add	r22, r22
    3816:	77 1f       	adc	r23, r23
    3818:	88 1f       	adc	r24, r24
    381a:	bb 1f       	adc	r27, r27
    381c:	91 50       	subi	r25, 0x01	; 1
    381e:	98 f3       	brcs	.-26     	; 0x3806 <__divsf3x+0x22>
    3820:	11 d0       	rcall	.+34     	; 0x3844 <__divsf3x+0x60>
    3822:	0f 92       	push	r0
    3824:	0f d0       	rcall	.+30     	; 0x3844 <__divsf3x+0x60>
    3826:	0f 92       	push	r0
    3828:	0d d0       	rcall	.+26     	; 0x3844 <__divsf3x+0x60>
    382a:	a0 e8       	ldi	r26, 0x80	; 128
    382c:	26 17       	cp	r18, r22
    382e:	37 07       	cpc	r19, r23
    3830:	48 07       	cpc	r20, r24
    3832:	1b 06       	cpc	r1, r27
    3834:	09 f0       	breq	.+2      	; 0x3838 <__divsf3x+0x54>
    3836:	a0 48       	sbci	r26, 0x80	; 128
    3838:	ba 2f       	mov	r27, r26
    383a:	60 2d       	mov	r22, r0
    383c:	7f 91       	pop	r23
    383e:	8f 91       	pop	r24
    3840:	00 24       	eor	r0, r0
    3842:	08 95       	ret
    3844:	a0 e8       	ldi	r26, 0x80	; 128
    3846:	00 24       	eor	r0, r0
    3848:	62 17       	cp	r22, r18
    384a:	73 07       	cpc	r23, r19
    384c:	84 07       	cpc	r24, r20
    384e:	b1 05       	cpc	r27, r1
    3850:	28 f0       	brcs	.+10     	; 0x385c <__divsf3x+0x78>
    3852:	62 1b       	sub	r22, r18
    3854:	73 0b       	sbc	r23, r19
    3856:	84 0b       	sbc	r24, r20
    3858:	b1 09       	sbc	r27, r1
    385a:	0a 2a       	or	r0, r26
    385c:	66 0f       	add	r22, r22
    385e:	77 1f       	adc	r23, r23
    3860:	88 1f       	adc	r24, r24
    3862:	bb 1f       	adc	r27, r27
    3864:	a6 95       	lsr	r26
    3866:	81 f7       	brne	.-32     	; 0x3848 <__divsf3x+0x64>
    3868:	08 95       	ret

0000386a <__fixsfsi>:
    386a:	97 fb       	bst	r25, 7
    386c:	73 d0       	rcall	.+230    	; 0x3954 <__fp_split1>
    386e:	9f 37       	cpi	r25, 0x7F	; 127
    3870:	38 f0       	brcs	.+14     	; 0x3880 <__fixsfsi+0x16>
    3872:	fe e9       	ldi	r31, 0x9E	; 158
    3874:	f9 1b       	sub	r31, r25
    3876:	98 2f       	mov	r25, r24
    3878:	87 2f       	mov	r24, r23
    387a:	76 2f       	mov	r23, r22
    387c:	6b 2f       	mov	r22, r27
    387e:	05 c0       	rjmp	.+10     	; 0x388a <__fixsfsi+0x20>
    3880:	86 c0       	rjmp	.+268    	; 0x398e <__fp_zero>
    3882:	96 95       	lsr	r25
    3884:	87 95       	ror	r24
    3886:	77 95       	ror	r23
    3888:	67 95       	ror	r22
    388a:	f1 50       	subi	r31, 0x01	; 1
    388c:	d0 f7       	brcc	.-12     	; 0x3882 <__fixsfsi+0x18>
    388e:	3e f4       	brtc	.+14     	; 0x389e <__fp_lneg+0xe>

00003890 <__fp_lneg>:
    3890:	90 95       	com	r25
    3892:	80 95       	com	r24
    3894:	70 95       	com	r23
    3896:	61 95       	neg	r22
    3898:	7f 4f       	sbci	r23, 0xFF	; 255
    389a:	8f 4f       	sbci	r24, 0xFF	; 255
    389c:	9f 4f       	sbci	r25, 0xFF	; 255
    389e:	08 95       	ret

000038a0 <__floatunssisf>:
    38a0:	e8 94       	clt
    38a2:	03 c0       	rjmp	.+6      	; 0x38aa <__floatsisf+0x6>

000038a4 <__floatsisf>:
    38a4:	97 fb       	bst	r25, 7
    38a6:	0e f4       	brtc	.+2      	; 0x38aa <__floatsisf+0x6>
    38a8:	f3 df       	rcall	.-26     	; 0x3890 <__fp_lneg>
    38aa:	b6 2f       	mov	r27, r22
    38ac:	67 2f       	mov	r22, r23
    38ae:	78 2f       	mov	r23, r24
    38b0:	89 2f       	mov	r24, r25
    38b2:	9e e9       	ldi	r25, 0x9E	; 158
    38b4:	00 24       	eor	r0, r0
    38b6:	27 c0       	rjmp	.+78     	; 0x3906 <__fp_merge>

000038b8 <__eqsf2>:
    38b8:	0e d0       	rcall	.+28     	; 0x38d6 <.fp_cmp>
    38ba:	5e f0       	brts	.+22     	; 0x38d2 <__cmpsf2+0xe>
    38bc:	04 c0       	rjmp	.+8      	; 0x38c6 <__cmpsf2+0x2>

000038be <__gesf2>:
    38be:	0b d0       	rcall	.+22     	; 0x38d6 <.fp_cmp>
    38c0:	26 f0       	brts	.+8      	; 0x38ca <__cmpsf2+0x6>
    38c2:	01 c0       	rjmp	.+2      	; 0x38c6 <__cmpsf2+0x2>

000038c4 <__cmpsf2>:
    38c4:	08 d0       	rcall	.+16     	; 0x38d6 <.fp_cmp>
    38c6:	19 f0       	breq	.+6      	; 0x38ce <__cmpsf2+0xa>
    38c8:	20 f4       	brcc	.+8      	; 0x38d2 <__cmpsf2+0xe>
    38ca:	8f ef       	ldi	r24, 0xFF	; 255
    38cc:	08 95       	ret
    38ce:	80 e0       	ldi	r24, 0x00	; 0
    38d0:	08 95       	ret
    38d2:	81 e0       	ldi	r24, 0x01	; 1
    38d4:	08 95       	ret

000038d6 <.fp_cmp>:
    38d6:	97 fb       	bst	r25, 7
    38d8:	09 2e       	mov	r0, r25
    38da:	05 26       	eor	r0, r21
    38dc:	00 f8       	bld	r0, 0
    38de:	68 94       	set
    38e0:	30 d0       	rcall	.+96     	; 0x3942 <__fp_split2>
    38e2:	e8 94       	clt
    38e4:	07 fc       	sbrc	r0, 7
    38e6:	07 c0       	rjmp	.+14     	; 0x38f6 <.fp_cmp+0x20>
    38e8:	62 17       	cp	r22, r18
    38ea:	73 07       	cpc	r23, r19
    38ec:	84 07       	cpc	r24, r20
    38ee:	95 07       	cpc	r25, r21
    38f0:	21 f0       	breq	.+8      	; 0x38fa <.fp_cmp+0x24>
    38f2:	08 f4       	brcc	.+2      	; 0x38f6 <.fp_cmp+0x20>
    38f4:	00 94       	com	r0
    38f6:	07 94       	ror	r0
    38f8:	98 94       	clz
    38fa:	08 95       	ret
    38fc:	9a 95       	dec	r25
    38fe:	bb 0f       	add	r27, r27
    3900:	66 1f       	adc	r22, r22
    3902:	77 1f       	adc	r23, r23
    3904:	88 1f       	adc	r24, r24

00003906 <__fp_merge>:
    3906:	11 24       	eor	r1, r1
    3908:	99 23       	and	r25, r25
    390a:	a1 f0       	breq	.+40     	; 0x3934 <__fp_merge+0x2e>
    390c:	88 23       	and	r24, r24
    390e:	b2 f7       	brpl	.-20     	; 0x38fc <.fp_cmp+0x26>
    3910:	9f 3f       	cpi	r25, 0xFF	; 255
    3912:	59 f0       	breq	.+22     	; 0x392a <__fp_merge+0x24>
    3914:	bb 0f       	add	r27, r27
    3916:	48 f4       	brcc	.+18     	; 0x392a <__fp_merge+0x24>
    3918:	21 f4       	brne	.+8      	; 0x3922 <__fp_merge+0x1c>
    391a:	00 20       	and	r0, r0
    391c:	11 f4       	brne	.+4      	; 0x3922 <__fp_merge+0x1c>
    391e:	60 ff       	sbrs	r22, 0
    3920:	04 c0       	rjmp	.+8      	; 0x392a <__fp_merge+0x24>
    3922:	6f 5f       	subi	r22, 0xFF	; 255
    3924:	7f 4f       	sbci	r23, 0xFF	; 255
    3926:	8f 4f       	sbci	r24, 0xFF	; 255
    3928:	9f 4f       	sbci	r25, 0xFF	; 255
    392a:	88 1f       	adc	r24, r24
    392c:	97 95       	ror	r25
    392e:	87 95       	ror	r24
    3930:	97 f9       	bld	r25, 7
    3932:	08 95       	ret
    3934:	2c c0       	rjmp	.+88     	; 0x398e <__fp_zero>

00003936 <__fp_nan>:
    3936:	9f ef       	ldi	r25, 0xFF	; 255
    3938:	80 ec       	ldi	r24, 0xC0	; 192
    393a:	08 95       	ret

0000393c <__fp_split3>:
    393c:	05 2e       	mov	r0, r21
    393e:	09 26       	eor	r0, r25
    3940:	07 fa       	bst	r0, 7

00003942 <__fp_split2>:
    3942:	44 0f       	add	r20, r20
    3944:	55 1f       	adc	r21, r21
    3946:	5f 3f       	cpi	r21, 0xFF	; 255
    3948:	79 f0       	breq	.+30     	; 0x3968 <__fp_split1+0x14>
    394a:	aa 27       	eor	r26, r26
    394c:	a5 17       	cp	r26, r21
    394e:	08 f0       	brcs	.+2      	; 0x3952 <__fp_split2+0x10>
    3950:	51 e0       	ldi	r21, 0x01	; 1
    3952:	47 95       	ror	r20

00003954 <__fp_split1>:
    3954:	88 0f       	add	r24, r24
    3956:	99 1f       	adc	r25, r25
    3958:	9f 3f       	cpi	r25, 0xFF	; 255
    395a:	31 f0       	breq	.+12     	; 0x3968 <__fp_split1+0x14>
    395c:	bb 27       	eor	r27, r27
    395e:	b9 17       	cp	r27, r25
    3960:	08 f0       	brcs	.+2      	; 0x3964 <__fp_split1+0x10>
    3962:	91 e0       	ldi	r25, 0x01	; 1
    3964:	87 95       	ror	r24
    3966:	08 95       	ret
    3968:	9f 91       	pop	r25
    396a:	9f 91       	pop	r25
    396c:	11 24       	eor	r1, r1
    396e:	e3 cf       	rjmp	.-58     	; 0x3936 <__fp_nan>

00003970 <__fp_split_a>:
    3970:	97 fb       	bst	r25, 7
    3972:	88 0f       	add	r24, r24
    3974:	99 1f       	adc	r25, r25
    3976:	9f 3f       	cpi	r25, 0xFF	; 255
    3978:	31 f0       	breq	.+12     	; 0x3986 <__fp_split_a+0x16>
    397a:	bb 27       	eor	r27, r27
    397c:	b9 17       	cp	r27, r25
    397e:	08 f0       	brcs	.+2      	; 0x3982 <__fp_split_a+0x12>
    3980:	91 e0       	ldi	r25, 0x01	; 1
    3982:	87 95       	ror	r24
    3984:	08 95       	ret
    3986:	9f 91       	pop	r25
    3988:	9f 91       	pop	r25
    398a:	11 24       	eor	r1, r1
    398c:	d4 cf       	rjmp	.-88     	; 0x3936 <__fp_nan>

0000398e <__fp_zero>:
    398e:	66 27       	eor	r22, r22
    3990:	77 27       	eor	r23, r23
    3992:	88 27       	eor	r24, r24

00003994 <__fp_zerox>:
    3994:	99 27       	eor	r25, r25
    3996:	08 95       	ret

00003998 <__mulsf3>:
    3998:	d1 df       	rcall	.-94     	; 0x393c <__fp_split3>
    399a:	01 d0       	rcall	.+2      	; 0x399e <__mulsf3x>
    399c:	b4 cf       	rjmp	.-152    	; 0x3906 <__fp_merge>

0000399e <__mulsf3x>:
    399e:	99 23       	and	r25, r25
    39a0:	39 f0       	breq	.+14     	; 0x39b0 <__mulsf3x+0x12>
    39a2:	55 23       	and	r21, r21
    39a4:	29 f0       	breq	.+10     	; 0x39b0 <__mulsf3x+0x12>
    39a6:	9f 57       	subi	r25, 0x7F	; 127
    39a8:	5f 57       	subi	r21, 0x7F	; 127
    39aa:	95 0f       	add	r25, r21
    39ac:	13 f4       	brvc	.+4      	; 0x39b2 <__mulsf3x+0x14>
    39ae:	9a f1       	brmi	.+102    	; 0x3a16 <__mulsf3x+0x78>
    39b0:	f1 cf       	rjmp	.-30     	; 0x3994 <__fp_zerox>
    39b2:	91 58       	subi	r25, 0x81	; 129
    39b4:	9f 3f       	cpi	r25, 0xFF	; 255
    39b6:	e1 f3       	breq	.-8      	; 0x39b0 <__mulsf3x+0x12>
    39b8:	62 9f       	mul	r22, r18
    39ba:	a1 2d       	mov	r26, r1
    39bc:	0f 92       	push	r0
    39be:	bb 27       	eor	r27, r27
    39c0:	63 9f       	mul	r22, r19
    39c2:	a0 0d       	add	r26, r0
    39c4:	b1 1d       	adc	r27, r1
    39c6:	ee 27       	eor	r30, r30
    39c8:	72 9f       	mul	r23, r18
    39ca:	a0 0d       	add	r26, r0
    39cc:	b1 1d       	adc	r27, r1
    39ce:	ee 1f       	adc	r30, r30
    39d0:	af 93       	push	r26
    39d2:	aa 27       	eor	r26, r26
    39d4:	64 9f       	mul	r22, r20
    39d6:	b0 0d       	add	r27, r0
    39d8:	e1 1d       	adc	r30, r1
    39da:	73 9f       	mul	r23, r19
    39dc:	b0 0d       	add	r27, r0
    39de:	e1 1d       	adc	r30, r1
    39e0:	aa 1f       	adc	r26, r26
    39e2:	66 27       	eor	r22, r22
    39e4:	82 9f       	mul	r24, r18
    39e6:	b0 0d       	add	r27, r0
    39e8:	e1 1d       	adc	r30, r1
    39ea:	a6 1f       	adc	r26, r22
    39ec:	55 27       	eor	r21, r21
    39ee:	74 9f       	mul	r23, r20
    39f0:	e0 0d       	add	r30, r0
    39f2:	a1 1d       	adc	r26, r1
    39f4:	55 1f       	adc	r21, r21
    39f6:	83 9f       	mul	r24, r19
    39f8:	e0 0d       	add	r30, r0
    39fa:	a1 1d       	adc	r26, r1
    39fc:	56 1f       	adc	r21, r22
    39fe:	84 9f       	mul	r24, r20
    3a00:	a0 0d       	add	r26, r0
    3a02:	51 1d       	adc	r21, r1
    3a04:	85 2f       	mov	r24, r21
    3a06:	7a 2f       	mov	r23, r26
    3a08:	6e 2f       	mov	r22, r30
    3a0a:	1f 90       	pop	r1
    3a0c:	0f 90       	pop	r0
    3a0e:	88 23       	and	r24, r24
    3a10:	1a f4       	brpl	.+6      	; 0x3a18 <__mulsf3x+0x7a>
    3a12:	93 95       	inc	r25
    3a14:	39 f4       	brne	.+14     	; 0x3a24 <__mulsf3x+0x86>
    3a16:	8f cf       	rjmp	.-226    	; 0x3936 <__fp_nan>
    3a18:	00 0c       	add	r0, r0
    3a1a:	11 1c       	adc	r1, r1
    3a1c:	bb 1f       	adc	r27, r27
    3a1e:	66 1f       	adc	r22, r22
    3a20:	77 1f       	adc	r23, r23
    3a22:	88 1f       	adc	r24, r24
    3a24:	01 28       	or	r0, r1
    3a26:	08 95       	ret

00003a28 <__eeprom_read_block_1C1D1E>:
    3a28:	09 d0       	rcall	.+18     	; 0x3a3c <__eeprom_read_byte_1C1D1E>
    3a2a:	01 92       	st	Z+, r0
    3a2c:	1a 94       	dec	r1
    3a2e:	e1 f7       	brne	.-8      	; 0x3a28 <__eeprom_read_block_1C1D1E>
    3a30:	08 95       	ret

00003a32 <__eeprom_write_block_1C1D1E>:
    3a32:	01 90       	ld	r0, Z+
    3a34:	0b d0       	rcall	.+22     	; 0x3a4c <__eeprom_write_byte_1C1D1E>
    3a36:	1a 94       	dec	r1
    3a38:	e1 f7       	brne	.-8      	; 0x3a32 <__eeprom_write_block_1C1D1E>
    3a3a:	08 95       	ret

00003a3c <__eeprom_read_byte_1C1D1E>:
    3a3c:	e1 99       	sbic	0x1c, 1	; 28
    3a3e:	fe cf       	rjmp	.-4      	; 0x3a3c <__eeprom_read_byte_1C1D1E>
    3a40:	bf bb       	out	0x1f, r27	; 31
    3a42:	ae bb       	out	0x1e, r26	; 30
    3a44:	e0 9a       	sbi	0x1c, 0	; 28
    3a46:	11 96       	adiw	r26, 0x01	; 1
    3a48:	0d b2       	in	r0, 0x1d	; 29
    3a4a:	08 95       	ret

00003a4c <__eeprom_write_byte_1C1D1E>:
    3a4c:	e1 99       	sbic	0x1c, 1	; 28
    3a4e:	fe cf       	rjmp	.-4      	; 0x3a4c <__eeprom_write_byte_1C1D1E>
    3a50:	bf bb       	out	0x1f, r27	; 31
    3a52:	ae bb       	out	0x1e, r26	; 30
    3a54:	0d ba       	out	0x1d, r0	; 29
    3a56:	11 96       	adiw	r26, 0x01	; 1
    3a58:	0f b6       	in	r0, 0x3f	; 63
    3a5a:	f8 94       	cli
    3a5c:	e2 9a       	sbi	0x1c, 2	; 28
    3a5e:	e1 9a       	sbi	0x1c, 1	; 28
    3a60:	0f be       	out	0x3f, r0	; 63
    3a62:	08 95       	ret
