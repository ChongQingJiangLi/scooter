
build.JORDANWAY/bal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00004192  00004226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004192  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000060b  0080010c  0080010c  00004232  2**0
                  ALLOC
  3 .stab         00006270  00000000  00000000  00004234  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003372  00000000  00000000  0000a4a4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 96 02 	jmp	0x52c	; 0x52c <__ctors_end>
       4:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
       8:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
       c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      10:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      14:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      18:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      1c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      20:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      24:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      28:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      2c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      30:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      34:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      38:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      3c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      40:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      44:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      48:	0c 94 7c 1e 	jmp	0x3cf8	; 0x3cf8 <__vector_18>
      4c:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__vector_19>
      50:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      54:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__vector_21>
      58:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      5c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      60:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      64:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      68:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      6c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      70:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      74:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      78:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      7c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      80:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      84:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>
      88:	0c 94 b3 02 	jmp	0x566	; 0x566 <__bad_interrupt>

0000008c <__c.4>:
      8c:	21 6c 72 00                                         !lr.

00000090 <__c.5>:
      90:	21 6c 66 00                                         !lf.

00000094 <__c.6>:
      94:	21 72 72 00                                         !rr.

00000098 <__c.7>:
      98:	21 72 66 00                                         !rf.

0000009c <__c.2>:
      9c:	21 62 61 6c 61 6e 63 65 5f 76 61 6c 69 64 61 74     !balance_validat
      ac:	65 20 66 61 69 6c 73 0a 00                          e fails..

000000b5 <__c.0>:
      b5:	21 62 61 6c 20 32 2e 30 00                          !bal 2.0.

000000be <__c.1>:
      be:	21 62 61 6c 20 32 2e 30 00                          !bal 2.0.

000000c7 <adc_config>:
      c7:	40 00 41 00 42 00 43 00 45 00 44 00 46 00 46 01     @.A.B.C.E.D.F.F.
      d7:	46 02 46 03 46 04 46 05 46 06 46 07 47 07 47 06     F.F.F.F.F.F.G.G.
      e7:	47 05 47 04 47 03 47 02 47 01 47 00                 G.G.G.G.G.G.

000000f3 <adcpattern>:
      f3:	00 01 02 04 05 10 0e 0a 00 01 02 04 05 10 13 0b     ................
     103:	00 01 02 04 05 10 12 0c 00 01 02 04 05 10 15 0d     ................
     113:	00 01 02 04 05 10 14 11                             ........

0000011b <crc32_table>:
     11b:	00 00 00 00 b7 1d c1 04 6e 3b 82 09 d9 26 43 0d     ........n;...&C.
     12b:	dc 76 04 13 6b 6b c5 17 b2 4d 86 1a 05 50 47 1e     .v..kk...M...PG.
     13b:	b8 ed 08 26 0f f0 c9 22 d6 d6 8a 2f 61 cb 4b 2b     ...&...".../a.K+
     14b:	64 9b 0c 35 d3 86 cd 31 0a a0 8e 3c bd bd 4f 38     d..5...1...<..O8
     15b:	70 db 11 4c c7 c6 d0 48 1e e0 93 45 a9 fd 52 41     p..L...H...E..RA
     16b:	ac ad 15 5f 1b b0 d4 5b c2 96 97 56 75 8b 56 52     ..._...[...Vu.VR
     17b:	c8 36 19 6a 7f 2b d8 6e a6 0d 9b 63 11 10 5a 67     .6.j.+.n...c..Zg
     18b:	14 40 1d 79 a3 5d dc 7d 7a 7b 9f 70 cd 66 5e 74     .@.y.].}z{.p.f^t
     19b:	e0 b6 23 98 57 ab e2 9c 8e 8d a1 91 39 90 60 95     ..#.W.......9.`.
     1ab:	3c c0 27 8b 8b dd e6 8f 52 fb a5 82 e5 e6 64 86     <.'.....R.....d.
     1bb:	58 5b 2b be ef 46 ea ba 36 60 a9 b7 81 7d 68 b3     X[+..F..6`...}h.
     1cb:	84 2d 2f ad 33 30 ee a9 ea 16 ad a4 5d 0b 6c a0     .-/.30......].l.
     1db:	90 6d 32 d4 27 70 f3 d0 fe 56 b0 dd 49 4b 71 d9     .m2.'p...V..IKq.
     1eb:	4c 1b 36 c7 fb 06 f7 c3 22 20 b4 ce 95 3d 75 ca     L.6....." ...=u.
     1fb:	28 80 3a f2 9f 9d fb f6 46 bb b8 fb f1 a6 79 ff     (.:.....F.....y.
     20b:	f4 f6 3e e1 43 eb ff e5 9a cd bc e8 2d d0 7d ec     ..>.C.......-.}.
     21b:	77 70 86 34 c0 6d 47 30 19 4b 04 3d ae 56 c5 39     wp.4.mG0.K.=.V.9
     22b:	ab 06 82 27 1c 1b 43 23 c5 3d 00 2e 72 20 c1 2a     ...'..C#.=..r .*
     23b:	cf 9d 8e 12 78 80 4f 16 a1 a6 0c 1b 16 bb cd 1f     ....x.O.........
     24b:	13 eb 8a 01 a4 f6 4b 05 7d d0 08 08 ca cd c9 0c     ......K.}.......
     25b:	07 ab 97 78 b0 b6 56 7c 69 90 15 71 de 8d d4 75     ...x..V|i..q...u
     26b:	db dd 93 6b 6c c0 52 6f b5 e6 11 62 02 fb d0 66     ...kl.Ro...b...f
     27b:	bf 46 9f 5e 08 5b 5e 5a d1 7d 1d 57 66 60 dc 53     .F.^.[^Z.}.Wf`.S
     28b:	63 30 9b 4d d4 2d 5a 49 0d 0b 19 44 ba 16 d8 40     c0.M.-ZI...D...@
     29b:	97 c6 a5 ac 20 db 64 a8 f9 fd 27 a5 4e e0 e6 a1     .... .d...'.N...
     2ab:	4b b0 a1 bf fc ad 60 bb 25 8b 23 b6 92 96 e2 b2     K.....`.%.#.....
     2bb:	2f 2b ad 8a 98 36 6c 8e 41 10 2f 83 f6 0d ee 87     /+...6l.A./.....
     2cb:	f3 5d a9 99 44 40 68 9d 9d 66 2b 90 2a 7b ea 94     .]..D@h..f+.*{..
     2db:	e7 1d b4 e0 50 00 75 e4 89 26 36 e9 3e 3b f7 ed     ....P.u..&6.>;..
     2eb:	3b 6b b0 f3 8c 76 71 f7 55 50 32 fa e2 4d f3 fe     ;k...vq.UP2..M..
     2fb:	5f f0 bc c6 e8 ed 7d c2 31 cb 3e cf 86 d6 ff cb     _.....}.1.>.....
     30b:	83 86 b8 d5 34 9b 79 d1 ed bd 3a dc 5a a0 fb d8     ....4.y...:.Z...
     31b:	ee e0 0c 69 59 fd cd 6d 80 db 8e 60 37 c6 4f 64     ...iY..m...`7.Od
     32b:	32 96 08 7a 85 8b c9 7e 5c ad 8a 73 eb b0 4b 77     2..z...~\..s..Kw
     33b:	56 0d 04 4f e1 10 c5 4b 38 36 86 46 8f 2b 47 42     V..O...K86.F.+GB
     34b:	8a 7b 00 5c 3d 66 c1 58 e4 40 82 55 53 5d 43 51     .{.\=f.X.@.US]CQ
     35b:	9e 3b 1d 25 29 26 dc 21 f0 00 9f 2c 47 1d 5e 28     .;.%)&.!...,G.^(
     36b:	42 4d 19 36 f5 50 d8 32 2c 76 9b 3f 9b 6b 5a 3b     BM.6.P.2,v.?.kZ;
     37b:	26 d6 15 03 91 cb d4 07 48 ed 97 0a ff f0 56 0e     &.......H.....V.
     38b:	fa a0 11 10 4d bd d0 14 94 9b 93 19 23 86 52 1d     ....M.......#.R.
     39b:	0e 56 2f f1 b9 4b ee f5 60 6d ad f8 d7 70 6c fc     .V/..K..`m...pl.
     3ab:	d2 20 2b e2 65 3d ea e6 bc 1b a9 eb 0b 06 68 ef     . +.e=........h.
     3bb:	b6 bb 27 d7 01 a6 e6 d3 d8 80 a5 de 6f 9d 64 da     ..'.........o.d.
     3cb:	6a cd 23 c4 dd d0 e2 c0 04 f6 a1 cd b3 eb 60 c9     j.#...........`.
     3db:	7e 8d 3e bd c9 90 ff b9 10 b6 bc b4 a7 ab 7d b0     ~.>...........}.
     3eb:	a2 fb 3a ae 15 e6 fb aa cc c0 b8 a7 7b dd 79 a3     ..:.........{.y.
     3fb:	c6 60 36 9b 71 7d f7 9f a8 5b b4 92 1f 46 75 96     .`6.q}...[...Fu.
     40b:	1a 16 32 88 ad 0b f3 8c 74 2d b0 81 c3 30 71 85     ..2.....t-...0q.
     41b:	99 90 8a 5d 2e 8d 4b 59 f7 ab 08 54 40 b6 c9 50     ...]..KY...T@..P
     42b:	45 e6 8e 4e f2 fb 4f 4a 2b dd 0c 47 9c c0 cd 43     E..N..OJ+..G...C
     43b:	21 7d 82 7b 96 60 43 7f 4f 46 00 72 f8 5b c1 76     !}.{.`C.OF.r.[.v
     44b:	fd 0b 86 68 4a 16 47 6c 93 30 04 61 24 2d c5 65     ...hJ.Gl.0.a$-.e
     45b:	e9 4b 9b 11 5e 56 5a 15 87 70 19 18 30 6d d8 1c     .K..^VZ..p..0m..
     46b:	35 3d 9f 02 82 20 5e 06 5b 06 1d 0b ec 1b dc 0f     5=... ^.[.......
     47b:	51 a6 93 37 e6 bb 52 33 3f 9d 11 3e 88 80 d0 3a     Q..7..R3?..>...:
     48b:	8d d0 97 24 3a cd 56 20 e3 eb 15 2d 54 f6 d4 29     ...$:.V ...-T..)
     49b:	79 26 a9 c5 ce 3b 68 c1 17 1d 2b cc a0 00 ea c8     y&...;h...+.....
     4ab:	a5 50 ad d6 12 4d 6c d2 cb 6b 2f df 7c 76 ee db     .P...Ml..k/.|v..
     4bb:	c1 cb a1 e3 76 d6 60 e7 af f0 23 ea 18 ed e2 ee     ....v.`...#.....
     4cb:	1d bd a5 f0 aa a0 64 f4 73 86 27 f9 c4 9b e6 fd     ......d.s.'.....
     4db:	09 fd b8 89 be e0 79 8d 67 c6 3a 80 d0 db fb 84     ......y.g.:.....
     4eb:	d5 8b bc 9a 62 96 7d 9e bb b0 3e 93 0c ad ff 97     ....b.}...>.....
     4fb:	b1 10 b0 af 06 0d 71 ab df 2b 32 a6 68 36 f3 a2     ......q..+2.h6..
     50b:	6d 66 b4 bc da 7b 75 b8 03 5d 36 b5 b4 40 f7 b1     mf...{u..]6..@..

0000051b <hextable>:
     51b:	30 31 32 33 34 35 36 37 38 39 61 62 63 64 65 66     0123456789abcdef
     52b:	00                                                  .

0000052c <__ctors_end>:
     52c:	11 24       	eor	r1, r1
     52e:	1f be       	out	0x3f, r1	; 63
     530:	cf ef       	ldi	r28, 0xFF	; 255
     532:	d0 e1       	ldi	r29, 0x10	; 16
     534:	de bf       	out	0x3e, r29	; 62
     536:	cd bf       	out	0x3d, r28	; 61

00000538 <__do_copy_data>:
     538:	11 e0       	ldi	r17, 0x01	; 1
     53a:	a0 e0       	ldi	r26, 0x00	; 0
     53c:	b1 e0       	ldi	r27, 0x01	; 1
     53e:	e2 e9       	ldi	r30, 0x92	; 146
     540:	f1 e4       	ldi	r31, 0x41	; 65
     542:	00 e0       	ldi	r16, 0x00	; 0
     544:	0b bf       	out	0x3b, r16	; 59
     546:	02 c0       	rjmp	.+4      	; 0x54c <__do_copy_data+0x14>
     548:	07 90       	elpm	r0, Z+
     54a:	0d 92       	st	X+, r0
     54c:	ac 30       	cpi	r26, 0x0C	; 12
     54e:	b1 07       	cpc	r27, r17
     550:	d9 f7       	brne	.-10     	; 0x548 <__do_copy_data+0x10>

00000552 <__do_clear_bss>:
     552:	17 e0       	ldi	r17, 0x07	; 7
     554:	ac e0       	ldi	r26, 0x0C	; 12
     556:	b1 e0       	ldi	r27, 0x01	; 1
     558:	01 c0       	rjmp	.+2      	; 0x55c <.do_clear_bss_start>

0000055a <.do_clear_bss_loop>:
     55a:	1d 92       	st	X+, r1

0000055c <.do_clear_bss_start>:
     55c:	a7 31       	cpi	r26, 0x17	; 23
     55e:	b1 07       	cpc	r27, r17
     560:	e1 f7       	brne	.-8      	; 0x55a <.do_clear_bss_loop>
     562:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <main>

00000566 <__bad_interrupt>:
     566:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

0000056a <io_init>:
DEFBITGROUP(extramux, E, 5, 3);
DEFBIT(beeper, E, 2);        // The beeper on the console

DEFBIT(l_pwm_oc, B, 6);      // Output compare signals, which we use in PWM mode.
DEFBIT(r_pwm_oc, B, 5);
     56a:	c5 98       	cbi	0x18, 5	; 24
     56c:	ae 98       	cbi	0x15, 6	; 21
     56e:	ab 98       	cbi	0x15, 3	; 21
     570:	aa 98       	cbi	0x15, 2	; 21
     572:	bd 9a       	sbi	0x17, 5	; 23
     574:	a6 9a       	sbi	0x14, 6	; 20
     576:	a3 9a       	sbi	0x14, 3	; 20
     578:	a2 9a       	sbi	0x14, 2	; 20
     57a:	c6 98       	cbi	0x18, 6	; 24
     57c:	ad 98       	cbi	0x15, 5	; 21
     57e:	a9 98       	cbi	0x15, 1	; 21
     580:	a8 98       	cbi	0x15, 0	; 21
     582:	be 9a       	sbi	0x17, 6	; 23
     584:	a5 9a       	sbi	0x14, 5	; 20
     586:	a1 9a       	sbi	0x14, 1	; 20
     588:	a0 9a       	sbi	0x14, 0	; 20
     58a:	ac 98       	cbi	0x15, 4	; 21
     58c:	a4 9a       	sbi	0x14, 4	; 20
     58e:	97 98       	cbi	0x12, 7	; 18
     590:	96 98       	cbi	0x12, 6	; 18
     592:	8f 9a       	sbi	0x11, 7	; 17
     594:	8e 9a       	sbi	0x11, 6	; 17
     596:	1a 9a       	sbi	0x03, 2	; 3
     598:	12 9a       	sbi	0x02, 2	; 2
     59a:	83 b1       	in	r24, 0x03	; 3
     59c:	8f 71       	andi	r24, 0x1F	; 31
     59e:	83 b9       	out	0x03, r24	; 3
     5a0:	82 b1       	in	r24, 0x02	; 2
     5a2:	80 6e       	ori	r24, 0xE0	; 224
     5a4:	82 b9       	out	0x02, r24	; 2
     5a6:	08 95       	ret

000005a8 <lpf_update>:
     5a8:	4f 92       	push	r4
     5aa:	5f 92       	push	r5
     5ac:	6f 92       	push	r6
     5ae:	7f 92       	push	r7
     5b0:	8f 92       	push	r8
     5b2:	9f 92       	push	r9
     5b4:	af 92       	push	r10
     5b6:	bf 92       	push	r11
     5b8:	cf 92       	push	r12
     5ba:	df 92       	push	r13
     5bc:	ef 92       	push	r14
     5be:	ff 92       	push	r15
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	ec 01       	movw	r28, r24
     5ca:	48 01       	movw	r8, r16
     5cc:	59 01       	movw	r10, r18
     5ce:	26 01       	movw	r4, r12
     5d0:	37 01       	movw	r6, r14
     5d2:	9a 01       	movw	r18, r20
     5d4:	ab 01       	movw	r20, r22
     5d6:	60 e0       	ldi	r22, 0x00	; 0
     5d8:	70 e0       	ldi	r23, 0x00	; 0
     5da:	80 e8       	ldi	r24, 0x80	; 128
     5dc:	9f e3       	ldi	r25, 0x3F	; 63
     5de:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__divsf3>
     5e2:	dc 01       	movw	r26, r24
     5e4:	cb 01       	movw	r24, r22
     5e6:	9c 01       	movw	r18, r24
     5e8:	ad 01       	movw	r20, r26
     5ea:	c5 01       	movw	r24, r10
     5ec:	b4 01       	movw	r22, r8
     5ee:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
     5f2:	7b 01       	movw	r14, r22
     5f4:	8c 01       	movw	r16, r24
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	40 e8       	ldi	r20, 0x80	; 128
     5fc:	5f e3       	ldi	r21, 0x3F	; 63
     5fe:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
     602:	18 16       	cp	r1, r24
     604:	54 f4       	brge	.+20     	; 0x61a <lpf_update+0x72>
     606:	0f 2e       	mov	r0, r31
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	ef 2e       	mov	r14, r31
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	ff 2e       	mov	r15, r31
     610:	f0 e8       	ldi	r31, 0x80	; 128
     612:	0f 2f       	mov	r16, r31
     614:	ff e3       	ldi	r31, 0x3F	; 63
     616:	1f 2f       	mov	r17, r31
     618:	f0 2d       	mov	r31, r0
     61a:	a8 01       	movw	r20, r16
     61c:	97 01       	movw	r18, r14
     61e:	c3 01       	movw	r24, r6
     620:	b2 01       	movw	r22, r4
     622:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
     626:	5b 01       	movw	r10, r22
     628:	6c 01       	movw	r12, r24
     62a:	a8 01       	movw	r20, r16
     62c:	97 01       	movw	r18, r14
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	80 e8       	ldi	r24, 0x80	; 128
     634:	9f e3       	ldi	r25, 0x3F	; 63
     636:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
     63a:	dc 01       	movw	r26, r24
     63c:	cb 01       	movw	r24, r22
     63e:	e8 80       	ld	r14, Y
     640:	f9 80       	ldd	r15, Y+1	; 0x01
     642:	0a 81       	ldd	r16, Y+2	; 0x02
     644:	1b 81       	ldd	r17, Y+3	; 0x03
     646:	9c 01       	movw	r18, r24
     648:	ad 01       	movw	r20, r26
     64a:	c8 01       	movw	r24, r16
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
     652:	dc 01       	movw	r26, r24
     654:	cb 01       	movw	r24, r22
     656:	9c 01       	movw	r18, r24
     658:	ad 01       	movw	r20, r26
     65a:	c6 01       	movw	r24, r12
     65c:	b5 01       	movw	r22, r10
     65e:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
     662:	dc 01       	movw	r26, r24
     664:	cb 01       	movw	r24, r22
     666:	88 83       	st	Y, r24
     668:	99 83       	std	Y+1, r25	; 0x01
     66a:	aa 83       	std	Y+2, r26	; 0x02
     66c:	bb 83       	std	Y+3, r27	; 0x03
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	df 90       	pop	r13
     67c:	cf 90       	pop	r12
     67e:	bf 90       	pop	r11
     680:	af 90       	pop	r10
     682:	9f 90       	pop	r9
     684:	8f 90       	pop	r8
     686:	7f 90       	pop	r7
     688:	6f 90       	pop	r6
     68a:	5f 90       	pop	r5
     68c:	4f 90       	pop	r4
     68e:	08 95       	ret

00000690 <my_fabs>:
     690:	ef 92       	push	r14
     692:	ff 92       	push	r15
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	7b 01       	movw	r14, r22
     69a:	8c 01       	movw	r16, r24
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
     6a8:	88 23       	and	r24, r24
     6aa:	1c f0       	brlt	.+6      	; 0x6b2 <my_fabs+0x22>
     6ac:	c8 01       	movw	r24, r16
     6ae:	b7 01       	movw	r22, r14
     6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <my_fabs+0x28>
     6b2:	c8 01       	movw	r24, r16
     6b4:	b7 01       	movw	r22, r14
     6b6:	90 58       	subi	r25, 0x80	; 128
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	ff 90       	pop	r15
     6be:	ef 90       	pop	r14
     6c0:	08 95       	ret

000006c2 <fmax>:
     6c2:	af 92       	push	r10
     6c4:	bf 92       	push	r11
     6c6:	cf 92       	push	r12
     6c8:	df 92       	push	r13
     6ca:	ef 92       	push	r14
     6cc:	ff 92       	push	r15
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	5b 01       	movw	r10, r22
     6d4:	6c 01       	movw	r12, r24
     6d6:	79 01       	movw	r14, r18
     6d8:	8a 01       	movw	r16, r20
     6da:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
     6de:	88 23       	and	r24, r24
     6e0:	1c f0       	brlt	.+6      	; 0x6e8 <fmax+0x26>
     6e2:	a6 01       	movw	r20, r12
     6e4:	95 01       	movw	r18, r10
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <fmax+0x2a>

#if defined(__BAL3__)
     6e8:	a8 01       	movw	r20, r16
     6ea:	97 01       	movw	r18, r14
  // NOTE: this was wrong in the board submitted as scooter3
  // I had separate SEL lines but a single /OE line
     6ec:	ca 01       	movw	r24, r20
     6ee:	b9 01       	movw	r22, r18
     6f0:	1f 91       	pop	r17
     6f2:	0f 91       	pop	r16
     6f4:	ff 90       	pop	r15
     6f6:	ef 90       	pop	r14
     6f8:	df 90       	pop	r13
     6fa:	cf 90       	pop	r12
     6fc:	bf 90       	pop	r11
     6fe:	af 90       	pop	r10
     700:	08 95       	ret

00000702 <fmin>:
  DEFBITGROUP(enc_data, A, 0, 8);
  DEFBIT(enc_oe1_not, B, 7);
  DEFBIT(enc_oe2_not, B, 0);
     702:	af 92       	push	r10
     704:	bf 92       	push	r11
     706:	cf 92       	push	r12
     708:	df 92       	push	r13
     70a:	ef 92       	push	r14
     70c:	ff 92       	push	r15
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	5b 01       	movw	r10, r22
     714:	6c 01       	movw	r12, r24
     716:	79 01       	movw	r14, r18
     718:	8a 01       	movw	r16, r20
  DEFBIT(enc_rst_not, B, 2);
     71a:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
     71e:	18 16       	cp	r1, r24
     720:	1c f0       	brlt	.+6      	; 0x728 <fmin+0x26>
  DEFBIT(enc_sel1, B, 3);
     722:	a6 01       	movw	r20, r12
     724:	95 01       	movw	r18, r10
     726:	02 c0       	rjmp	.+4      	; 0x72c <fmin+0x2a>
  DEFBIT(enc_sel2, B, 4);
#endif
     728:	a8 01       	movw	r20, r16
     72a:	97 01       	movw	r18, r14

#if defined(__BAL2__)
     72c:	ca 01       	movw	r24, r20
     72e:	b9 01       	movw	r22, r18
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	ff 90       	pop	r15
     736:	ef 90       	pop	r14
     738:	df 90       	pop	r13
     73a:	cf 90       	pop	r12
     73c:	bf 90       	pop	r11
     73e:	af 90       	pop	r10
     740:	08 95       	ret

00000742 <flim>:
#define R_MOTOR_POLARITY -
#define L_MOTOR_POLARITY +
#else
     742:	6f 92       	push	r6
     744:	7f 92       	push	r7
     746:	8f 92       	push	r8
     748:	9f 92       	push	r9
     74a:	af 92       	push	r10
     74c:	bf 92       	push	r11
     74e:	cf 92       	push	r12
     750:	df 92       	push	r13
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	5b 01       	movw	r10, r22
     75c:	6c 01       	movw	r12, r24
     75e:	39 01       	movw	r6, r18
     760:	4a 01       	movw	r8, r20
#define R_MOTOR_POLARITY +
     762:	a8 01       	movw	r20, r16
     764:	97 01       	movw	r18, r14
     766:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
     76a:	18 16       	cp	r1, r24
     76c:	6c f0       	brlt	.+26     	; 0x788 <flim+0x46>
#define L_MOTOR_POLARITY +
     76e:	a4 01       	movw	r20, r8
     770:	93 01       	movw	r18, r6
     772:	c6 01       	movw	r24, r12
     774:	b5 01       	movw	r22, r10
     776:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
     77a:	88 23       	and	r24, r24
     77c:	1c f4       	brge	.+6      	; 0x784 <flim+0x42>
     77e:	84 01       	movw	r16, r8
     780:	73 01       	movw	r14, r6
     782:	02 c0       	rjmp	.+4      	; 0x788 <flim+0x46>
#endif
     784:	86 01       	movw	r16, r12
     786:	75 01       	movw	r14, r10

     788:	c8 01       	movw	r24, r16
     78a:	b7 01       	movw	r22, r14
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	df 90       	pop	r13
     796:	cf 90       	pop	r12
     798:	bf 90       	pop	r11
     79a:	af 90       	pop	r10
     79c:	9f 90       	pop	r9
     79e:	8f 90       	pop	r8
     7a0:	7f 90       	pop	r7
     7a2:	6f 90       	pop	r6
     7a4:	08 95       	ret

000007a6 <gyro_sample_rate>:
// Set the PWM values between 0 and OCR1_MAX
static inline void set_l_pwm(uint16_t x) { OCR1B = x; }
static inline void set_r_pwm(uint16_t x) { OCR1A = x; }

#endif
     7a6:	6f 92       	push	r6
     7a8:	7f 92       	push	r7
     7aa:	8f 92       	push	r8
     7ac:	9f 92       	push	r9
     7ae:	af 92       	push	r10
     7b0:	bf 92       	push	r11
     7b2:	cf 92       	push	r12
     7b4:	df 92       	push	r13
     7b6:	ef 92       	push	r14
     7b8:	ff 92       	push	r15
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	ec 01       	movw	r28, r24
     7c4:	3a 01       	movw	r6, r20
     7c6:	4b 01       	movw	r8, r22
     7c8:	78 01       	movw	r14, r16
     7ca:	89 01       	movw	r16, r18
     7cc:	88 89       	ldd	r24, Y+16	; 0x10
     7ce:	88 23       	and	r24, r24
     7d0:	29 f4       	brne	.+10     	; 0x7dc <gyro_sample_rate+0x36>
     7d2:	5a 01       	movw	r10, r20
     7d4:	6b 01       	movw	r12, r22
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	88 8b       	std	Y+16, r24	; 0x10
     7da:	04 c0       	rjmp	.+8      	; 0x7e4 <gyro_sample_rate+0x3e>
     7dc:	ac 80       	ldd	r10, Y+4	; 0x04
     7de:	bd 80       	ldd	r11, Y+5	; 0x05
     7e0:	ce 80       	ldd	r12, Y+6	; 0x06
     7e2:	df 80       	ldd	r13, Y+7	; 0x07
     7e4:	a6 01       	movw	r20, r12
     7e6:	95 01       	movw	r18, r10
     7e8:	c4 01       	movw	r24, r8
     7ea:	b3 01       	movw	r22, r6
     7ec:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
     7f0:	dc 01       	movw	r26, r24
     7f2:	cb 01       	movw	r24, r22
     7f4:	88 87       	std	Y+8, r24	; 0x08
     7f6:	99 87       	std	Y+9, r25	; 0x09
     7f8:	aa 87       	std	Y+10, r26	; 0x0a
     7fa:	bb 87       	std	Y+11, r27	; 0x0b
     7fc:	a8 01       	movw	r20, r16
     7fe:	97 01       	movw	r18, r14
     800:	bc 01       	movw	r22, r24
     802:	cd 01       	movw	r24, r26
     804:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
     808:	7b 01       	movw	r14, r22
     80a:	8c 01       	movw	r16, r24
     80c:	88 81       	ld	r24, Y
     80e:	99 81       	ldd	r25, Y+1	; 0x01
     810:	aa 81       	ldd	r26, Y+2	; 0x02
     812:	bb 81       	ldd	r27, Y+3	; 0x03
     814:	a8 01       	movw	r20, r16
     816:	97 01       	movw	r18, r14
     818:	bc 01       	movw	r22, r24
     81a:	cd 01       	movw	r24, r26
     81c:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
     820:	dc 01       	movw	r26, r24
     822:	cb 01       	movw	r24, r22
     824:	88 83       	st	Y, r24
     826:	99 83       	std	Y+1, r25	; 0x01
     828:	aa 83       	std	Y+2, r26	; 0x02
     82a:	bb 83       	std	Y+3, r27	; 0x03
     82c:	2a e9       	ldi	r18, 0x9A	; 154
     82e:	39 e9       	ldi	r19, 0x99	; 153
     830:	49 e9       	ldi	r20, 0x99	; 153
     832:	5e e3       	ldi	r21, 0x3E	; 62
     834:	c8 01       	movw	r24, r16
     836:	b7 01       	movw	r22, r14
     838:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
     83c:	dc 01       	movw	r26, r24
     83e:	cb 01       	movw	r24, r22
     840:	9c 01       	movw	r18, r24
     842:	ad 01       	movw	r20, r26
     844:	c6 01       	movw	r24, r12
     846:	b5 01       	movw	r22, r10
     848:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
     84c:	6c 83       	std	Y+4, r22	; 0x04
     84e:	7d 83       	std	Y+5, r23	; 0x05
     850:	8e 83       	std	Y+6, r24	; 0x06
     852:	9f 83       	std	Y+7, r25	; 0x07
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	ff 90       	pop	r15
     85e:	ef 90       	pop	r14
     860:	df 90       	pop	r13
     862:	cf 90       	pop	r12
     864:	bf 90       	pop	r11
     866:	af 90       	pop	r10
     868:	9f 90       	pop	r9
     86a:	8f 90       	pop	r8
     86c:	7f 90       	pop	r7
     86e:	6f 90       	pop	r6
     870:	08 95       	ret

00000872 <gyro_sample_angle>:
     872:	8f 92       	push	r8
     874:	9f 92       	push	r9
     876:	af 92       	push	r10
     878:	bf 92       	push	r11
     87a:	cf 92       	push	r12
     87c:	df 92       	push	r13
     87e:	ef 92       	push	r14
     880:	ff 92       	push	r15
     882:	0f 93       	push	r16
     884:	1f 93       	push	r17
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	4c 01       	movw	r8, r24
     88c:	eb 01       	movw	r28, r22
     88e:	da 01       	movw	r26, r20
     890:	78 01       	movw	r14, r16
     892:	89 01       	movw	r16, r18
     894:	fc 01       	movw	r30, r24
     896:	81 89       	ldd	r24, Z+17	; 0x11
     898:	88 23       	and	r24, r24
     89a:	29 f4       	brne	.+10     	; 0x8a6 <gyro_sample_angle+0x34>
     89c:	5a 01       	movw	r10, r20
     89e:	6b 01       	movw	r12, r22
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	81 8b       	std	Z+17, r24	; 0x11
     8a4:	05 c0       	rjmp	.+10     	; 0x8b0 <gyro_sample_angle+0x3e>
     8a6:	f4 01       	movw	r30, r8
     8a8:	a0 80       	ld	r10, Z
     8aa:	b1 80       	ldd	r11, Z+1	; 0x01
     8ac:	c2 80       	ldd	r12, Z+2	; 0x02
     8ae:	d3 80       	ldd	r13, Z+3	; 0x03
     8b0:	a6 01       	movw	r20, r12
     8b2:	95 01       	movw	r18, r10
     8b4:	bd 01       	movw	r22, r26
     8b6:	ce 01       	movw	r24, r28
     8b8:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
     8bc:	dc 01       	movw	r26, r24
     8be:	cb 01       	movw	r24, r22
     8c0:	a8 01       	movw	r20, r16
     8c2:	97 01       	movw	r18, r14
     8c4:	bc 01       	movw	r22, r24
     8c6:	cd 01       	movw	r24, r26
     8c8:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
     8cc:	7b 01       	movw	r14, r22
     8ce:	8c 01       	movw	r16, r24
     8d0:	f4 01       	movw	r30, r8
     8d2:	84 85       	ldd	r24, Z+12	; 0x0c
     8d4:	95 85       	ldd	r25, Z+13	; 0x0d
     8d6:	a6 85       	ldd	r26, Z+14	; 0x0e
     8d8:	b7 85       	ldd	r27, Z+15	; 0x0f
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	40 e0       	ldi	r20, 0x00	; 0
     8e0:	50 e4       	ldi	r21, 0x40	; 64
     8e2:	bc 01       	movw	r22, r24
     8e4:	cd 01       	movw	r24, r26
     8e6:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
     8ea:	dc 01       	movw	r26, r24
     8ec:	cb 01       	movw	r24, r22
     8ee:	9c 01       	movw	r18, r24
     8f0:	ad 01       	movw	r20, r26
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	80 e8       	ldi	r24, 0x80	; 128
     8f8:	9f e3       	ldi	r25, 0x3F	; 63
     8fa:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__divsf3>
     8fe:	dc 01       	movw	r26, r24
     900:	cb 01       	movw	r24, r22
     902:	9c 01       	movw	r18, r24
     904:	ad 01       	movw	r20, r26
     906:	c8 01       	movw	r24, r16
     908:	b7 01       	movw	r22, r14
     90a:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
     90e:	dc 01       	movw	r26, r24
     910:	cb 01       	movw	r24, r22
     912:	9c 01       	movw	r18, r24
     914:	ad 01       	movw	r20, r26
     916:	c6 01       	movw	r24, r12
     918:	b5 01       	movw	r22, r10
     91a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
     91e:	f4 01       	movw	r30, r8
     920:	60 83       	st	Z, r22
     922:	71 83       	std	Z+1, r23	; 0x01
     924:	82 83       	std	Z+2, r24	; 0x02
     926:	93 83       	std	Z+3, r25	; 0x03
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	df 90       	pop	r13
     936:	cf 90       	pop	r12
     938:	bf 90       	pop	r11
     93a:	af 90       	pop	r10
     93c:	9f 90       	pop	r9
     93e:	8f 90       	pop	r8
     940:	08 95       	ret

00000942 <set_motors>:
     942:	9f 92       	push	r9
     944:	af 92       	push	r10
     946:	bf 92       	push	r11
     948:	cf 92       	push	r12
     94a:	df 92       	push	r13
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	ec 01       	movw	r28, r24
     95a:	db 01       	movw	r26, r22
     95c:	59 01       	movw	r10, r18
     95e:	6a 01       	movw	r12, r20
     960:	99 24       	eor	r9, r9
     962:	80 91 0c 01 	lds	r24, 0x010C
     966:	8f 5f       	subi	r24, 0xFF	; 255
     968:	80 93 0c 01 	sts	0x010C, r24
     96c:	88 23       	and	r24, r24
     96e:	11 f4       	brne	.+4      	; 0x974 <set_motors+0x32>
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	98 2e       	mov	r9, r24
     974:	0f 2e       	mov	r0, r31
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	ef 2e       	mov	r14, r31
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	ff 2e       	mov	r15, r31
     97e:	f0 e8       	ldi	r31, 0x80	; 128
     980:	0f 2f       	mov	r16, r31
     982:	ff e3       	ldi	r31, 0x3F	; 63
     984:	1f 2f       	mov	r17, r31
     986:	f0 2d       	mov	r31, r0
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	40 e8       	ldi	r20, 0x80	; 128
     98e:	5f eb       	ldi	r21, 0xBF	; 191
     990:	bd 01       	movw	r22, r26
     992:	ce 01       	movw	r24, r28
     994:	0e 94 a1 03 	call	0x742	; 0x742 <flim>
     998:	23 e3       	ldi	r18, 0x33	; 51
     99a:	33 ef       	ldi	r19, 0xF3	; 243
     99c:	4f ef       	ldi	r20, 0xFF	; 255
     99e:	53 e4       	ldi	r21, 0x43	; 67
     9a0:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
     9a4:	dc 01       	movw	r26, r24
     9a6:	cb 01       	movw	r24, r22
     9a8:	bc 01       	movw	r22, r24
     9aa:	cd 01       	movw	r24, r26
     9ac:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <__fixsfsi>
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	ec 01       	movw	r28, r24
     9b6:	8e ef       	ldi	r24, 0xFE	; 254
     9b8:	c4 30       	cpi	r28, 0x04	; 4
     9ba:	d8 07       	cpc	r29, r24
     9bc:	14 f4       	brge	.+4      	; 0x9c2 <set_motors+0x80>
     9be:	c4 e0       	ldi	r28, 0x04	; 4
     9c0:	de ef       	ldi	r29, 0xFE	; 254
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	cd 3f       	cpi	r28, 0xFD	; 253
     9c6:	d8 07       	cpc	r29, r24
     9c8:	14 f0       	brlt	.+4      	; 0x9ce <set_motors+0x8c>
     9ca:	cc ef       	ldi	r28, 0xFC	; 252
     9cc:	d1 e0       	ldi	r29, 0x01	; 1
     9ce:	0f 2e       	mov	r0, r31
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	ef 2e       	mov	r14, r31
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	ff 2e       	mov	r15, r31
     9d8:	f0 e8       	ldi	r31, 0x80	; 128
     9da:	0f 2f       	mov	r16, r31
     9dc:	ff e3       	ldi	r31, 0x3F	; 63
     9de:	1f 2f       	mov	r17, r31
     9e0:	f0 2d       	mov	r31, r0
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	40 e8       	ldi	r20, 0x80	; 128
     9e8:	5f eb       	ldi	r21, 0xBF	; 191
     9ea:	c6 01       	movw	r24, r12
     9ec:	b5 01       	movw	r22, r10
     9ee:	0e 94 a1 03 	call	0x742	; 0x742 <flim>
     9f2:	23 e3       	ldi	r18, 0x33	; 51
     9f4:	33 ef       	ldi	r19, 0xF3	; 243
     9f6:	4f ef       	ldi	r20, 0xFF	; 255
     9f8:	53 e4       	ldi	r21, 0x43	; 67
     9fa:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
     9fe:	dc 01       	movw	r26, r24
     a00:	cb 01       	movw	r24, r22
     a02:	bc 01       	movw	r22, r24
     a04:	cd 01       	movw	r24, r26
     a06:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <__fixsfsi>
     a0a:	dc 01       	movw	r26, r24
     a0c:	cb 01       	movw	r24, r22
     a0e:	8c 01       	movw	r16, r24
     a10:	8e ef       	ldi	r24, 0xFE	; 254
     a12:	04 30       	cpi	r16, 0x04	; 4
     a14:	18 07       	cpc	r17, r24
     a16:	14 f4       	brge	.+4      	; 0xa1c <set_motors+0xda>
     a18:	04 e0       	ldi	r16, 0x04	; 4
     a1a:	1e ef       	ldi	r17, 0xFE	; 254
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	0d 3f       	cpi	r16, 0xFD	; 253
     a20:	18 07       	cpc	r17, r24
     a22:	14 f0       	brlt	.+4      	; 0xa28 <set_motors+0xe6>
     a24:	0c ef       	ldi	r16, 0xFC	; 252
     a26:	11 e0       	ldi	r17, 0x01	; 1
     a28:	f8 94       	cli
     a2a:	d7 fd       	sbrc	r29, 7
     a2c:	3d c0       	rjmp	.+122    	; 0xaa8 <set_motors+0x166>
     a2e:	a9 98       	cbi	0x15, 1	; 21
     a30:	ad 9a       	sbi	0x15, 5	; 21
     a32:	a8 9a       	sbi	0x15, 0	; 21
     a34:	d9 bd       	out	0x29, r29	; 41
     a36:	c8 bd       	out	0x28, r28	; 40
     a38:	99 20       	and	r9, r9
     a3a:	71 f4       	brne	.+28     	; 0xa58 <set_motors+0x116>
     a3c:	17 fd       	sbrc	r17, 7
     a3e:	19 c0       	rjmp	.+50     	; 0xa72 <set_motors+0x130>
     a40:	ab 98       	cbi	0x15, 3	; 21
     a42:	ae 9a       	sbi	0x15, 6	; 21
     a44:	aa 9a       	sbi	0x15, 2	; 21
     a46:	cf ef       	ldi	r28, 0xFF	; 255
     a48:	d1 e0       	ldi	r29, 0x01	; 1
     a4a:	c0 1b       	sub	r28, r16
     a4c:	d1 0b       	sbc	r29, r17
     a4e:	db bd       	out	0x2b, r29	; 43
     a50:	ca bd       	out	0x2a, r28	; 42
     a52:	99 20       	and	r9, r9
     a54:	c9 f1       	breq	.+114    	; 0xac8 <set_motors+0x186>
     a56:	1c c0       	rjmp	.+56     	; 0xa90 <set_motors+0x14e>
     a58:	0e 94 ca 1a 	call	0x3594	; 0x3594 <pkt_tx_start>
     a5c:	80 e9       	ldi	r24, 0x90	; 144
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <pkt_tx_str_P>
     a64:	ce 01       	movw	r24, r28
     a66:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <pkt_tx_uint16_hex>
     a6a:	0e 94 33 1c 	call	0x3866	; 0x3866 <pkt_tx_end>
     a6e:	17 ff       	sbrs	r17, 7
     a70:	e7 cf       	rjmp	.-50     	; 0xa40 <set_motors+0xfe>
     a72:	aa 98       	cbi	0x15, 2	; 21
     a74:	ae 9a       	sbi	0x15, 6	; 21
     a76:	ab 9a       	sbi	0x15, 3	; 21
     a78:	e8 01       	movw	r28, r16
     a7a:	c1 50       	subi	r28, 0x01	; 1
     a7c:	de 4f       	sbci	r29, 0xFE	; 254
     a7e:	db bd       	out	0x2b, r29	; 43
     a80:	ca bd       	out	0x2a, r28	; 42
     a82:	99 20       	and	r9, r9
     a84:	09 f1       	breq	.+66     	; 0xac8 <set_motors+0x186>
     a86:	0e 94 ca 1a 	call	0x3594	; 0x3594 <pkt_tx_start>
     a8a:	84 e9       	ldi	r24, 0x94	; 148
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <set_motors+0x156>
     a90:	0e 94 ca 1a 	call	0x3594	; 0x3594 <pkt_tx_start>
     a94:	88 e9       	ldi	r24, 0x98	; 152
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <pkt_tx_str_P>
     a9c:	ce 01       	movw	r24, r28
     a9e:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <pkt_tx_uint16_hex>
     aa2:	0e 94 33 1c 	call	0x3866	; 0x3866 <pkt_tx_end>
     aa6:	10 c0       	rjmp	.+32     	; 0xac8 <set_motors+0x186>
     aa8:	a8 98       	cbi	0x15, 0	; 21
     aaa:	ad 9a       	sbi	0x15, 5	; 21
     aac:	a9 9a       	sbi	0x15, 1	; 21
     aae:	d0 95       	com	r29
     ab0:	c1 95       	neg	r28
     ab2:	df 4f       	sbci	r29, 0xFF	; 255
     ab4:	d9 bd       	out	0x29, r29	; 41
     ab6:	c8 bd       	out	0x28, r28	; 40
     ab8:	99 20       	and	r9, r9
     aba:	09 f4       	brne	.+2      	; 0xabe <set_motors+0x17c>
     abc:	bf cf       	rjmp	.-130    	; 0xa3c <set_motors+0xfa>
     abe:	0e 94 ca 1a 	call	0x3594	; 0x3594 <pkt_tx_start>
     ac2:	8c e8       	ldi	r24, 0x8C	; 140
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	cc cf       	rjmp	.-104    	; 0xa60 <set_motors+0x11e>
     ac8:	78 94       	sei
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	ff 90       	pop	r15
     ad4:	ef 90       	pop	r14
     ad6:	df 90       	pop	r13
     ad8:	cf 90       	pop	r12
     ada:	bf 90       	pop	r11
     adc:	af 90       	pop	r10
     ade:	9f 90       	pop	r9
     ae0:	08 95       	ret

00000ae2 <set_motor_idle>:
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	9b bd       	out	0x2b, r25	; 43
     ae8:	8a bd       	out	0x2a, r24	; 42
     aea:	ae 98       	cbi	0x15, 6	; 21
     aec:	ab 98       	cbi	0x15, 3	; 21
     aee:	aa 98       	cbi	0x15, 2	; 21
     af0:	99 bd       	out	0x29, r25	; 41
     af2:	88 bd       	out	0x28, r24	; 40
     af4:	ad 98       	cbi	0x15, 5	; 21
     af6:	a9 98       	cbi	0x15, 1	; 21
     af8:	a8 98       	cbi	0x15, 0	; 21
     afa:	08 95       	ret

00000afc <accum_88_32>:
     afc:	fa 01       	movw	r30, r20
     afe:	80 83       	st	Z, r24
     b00:	81 81       	ldd	r24, Z+1	; 0x01
     b02:	61 83       	std	Z+1, r22	; 0x01
     b04:	96 2f       	mov	r25, r22
     b06:	98 1b       	sub	r25, r24
     b08:	97 fd       	sbrc	r25, 7
     b0a:	05 c0       	rjmp	.+10     	; 0xb16 <accum_88_32+0x1a>
     b0c:	97 fd       	sbrc	r25, 7
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <accum_88_32+0x18>
     b10:	87 fd       	sbrc	r24, 7
     b12:	0e c0       	rjmp	.+28     	; 0xb30 <accum_88_32+0x34>
     b14:	08 95       	ret
     b16:	87 fd       	sbrc	r24, 7
     b18:	f9 cf       	rjmp	.-14     	; 0xb0c <accum_88_32+0x10>
     b1a:	67 ff       	sbrs	r22, 7
     b1c:	f7 cf       	rjmp	.-18     	; 0xb0c <accum_88_32+0x10>
     b1e:	83 81       	ldd	r24, Z+3	; 0x03
     b20:	81 50       	subi	r24, 0x01	; 1
     b22:	83 83       	std	Z+3, r24	; 0x03
     b24:	8f 3f       	cpi	r24, 0xFF	; 255
     b26:	b1 f7       	brne	.-20     	; 0xb14 <accum_88_32+0x18>
     b28:	84 81       	ldd	r24, Z+4	; 0x04
     b2a:	81 50       	subi	r24, 0x01	; 1
     b2c:	84 83       	std	Z+4, r24	; 0x04
     b2e:	08 95       	ret
     b30:	67 fd       	sbrc	r22, 7
     b32:	f0 cf       	rjmp	.-32     	; 0xb14 <accum_88_32+0x18>
     b34:	83 81       	ldd	r24, Z+3	; 0x03
     b36:	8f 5f       	subi	r24, 0xFF	; 255
     b38:	83 83       	std	Z+3, r24	; 0x03
     b3a:	88 23       	and	r24, r24
     b3c:	59 f7       	brne	.-42     	; 0xb14 <accum_88_32+0x18>
     b3e:	84 81       	ldd	r24, Z+4	; 0x04
     b40:	8f 5f       	subi	r24, 0xFF	; 255
     b42:	84 83       	std	Z+4, r24	; 0x04
     b44:	08 95       	ret

00000b46 <update_hwadj>:
     b46:	af 92       	push	r10
     b48:	bf 92       	push	r11
     b4a:	cf 92       	push	r12
     b4c:	df 92       	push	r13
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	5b 01       	movw	r10, r22
     b58:	6c 01       	movw	r12, r24
     b5a:	80 91 43 06 	lds	r24, 0x0643
     b5e:	90 91 44 06 	lds	r25, 0x0644
     b62:	a0 91 45 06 	lds	r26, 0x0645
     b66:	b0 91 46 06 	lds	r27, 0x0646
     b6a:	a6 01       	movw	r20, r12
     b6c:	95 01       	movw	r18, r10
     b6e:	bc 01       	movw	r22, r24
     b70:	cd 01       	movw	r24, r26
     b72:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
     b76:	dc 01       	movw	r26, r24
     b78:	cb 01       	movw	r24, r22
     b7a:	e0 90 9f 05 	lds	r14, 0x059F
     b7e:	f0 90 a0 05 	lds	r15, 0x05A0
     b82:	00 91 a1 05 	lds	r16, 0x05A1
     b86:	10 91 a2 05 	lds	r17, 0x05A2
     b8a:	9c 01       	movw	r18, r24
     b8c:	ad 01       	movw	r20, r26
     b8e:	c8 01       	movw	r24, r16
     b90:	b7 01       	movw	r22, r14
     b92:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	80 93 9f 05 	sts	0x059F, r24
     b9e:	90 93 a0 05 	sts	0x05A0, r25
     ba2:	a0 93 a1 05 	sts	0x05A1, r26
     ba6:	b0 93 a2 05 	sts	0x05A2, r27
     baa:	80 91 47 06 	lds	r24, 0x0647
     bae:	90 91 48 06 	lds	r25, 0x0648
     bb2:	a0 91 49 06 	lds	r26, 0x0649
     bb6:	b0 91 4a 06 	lds	r27, 0x064A
     bba:	a6 01       	movw	r20, r12
     bbc:	95 01       	movw	r18, r10
     bbe:	bc 01       	movw	r22, r24
     bc0:	cd 01       	movw	r24, r26
     bc2:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	e0 90 a3 05 	lds	r14, 0x05A3
     bce:	f0 90 a4 05 	lds	r15, 0x05A4
     bd2:	00 91 a5 05 	lds	r16, 0x05A5
     bd6:	10 91 a6 05 	lds	r17, 0x05A6
     bda:	9c 01       	movw	r18, r24
     bdc:	ad 01       	movw	r20, r26
     bde:	c8 01       	movw	r24, r16
     be0:	b7 01       	movw	r22, r14
     be2:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
     be6:	dc 01       	movw	r26, r24
     be8:	cb 01       	movw	r24, r22
     bea:	80 93 a3 05 	sts	0x05A3, r24
     bee:	90 93 a4 05 	sts	0x05A4, r25
     bf2:	a0 93 a5 05 	sts	0x05A5, r26
     bf6:	b0 93 a6 05 	sts	0x05A6, r27
     bfa:	80 91 3b 06 	lds	r24, 0x063B
     bfe:	90 91 3c 06 	lds	r25, 0x063C
     c02:	a0 91 3d 06 	lds	r26, 0x063D
     c06:	b0 91 3e 06 	lds	r27, 0x063E
     c0a:	a6 01       	movw	r20, r12
     c0c:	95 01       	movw	r18, r10
     c0e:	bc 01       	movw	r22, r24
     c10:	cd 01       	movw	r24, r26
     c12:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
     c16:	dc 01       	movw	r26, r24
     c18:	cb 01       	movw	r24, r22
     c1a:	e0 90 a7 05 	lds	r14, 0x05A7
     c1e:	f0 90 a8 05 	lds	r15, 0x05A8
     c22:	00 91 a9 05 	lds	r16, 0x05A9
     c26:	10 91 aa 05 	lds	r17, 0x05AA
     c2a:	9c 01       	movw	r18, r24
     c2c:	ad 01       	movw	r20, r26
     c2e:	c8 01       	movw	r24, r16
     c30:	b7 01       	movw	r22, r14
     c32:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
     c36:	dc 01       	movw	r26, r24
     c38:	cb 01       	movw	r24, r22
     c3a:	80 93 a7 05 	sts	0x05A7, r24
     c3e:	90 93 a8 05 	sts	0x05A8, r25
     c42:	a0 93 a9 05 	sts	0x05A9, r26
     c46:	b0 93 aa 05 	sts	0x05AA, r27
     c4a:	80 91 4f 06 	lds	r24, 0x064F
     c4e:	90 91 50 06 	lds	r25, 0x0650
     c52:	a0 91 51 06 	lds	r26, 0x0651
     c56:	b0 91 52 06 	lds	r27, 0x0652
     c5a:	a6 01       	movw	r20, r12
     c5c:	95 01       	movw	r18, r10
     c5e:	bc 01       	movw	r22, r24
     c60:	cd 01       	movw	r24, r26
     c62:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
     c66:	dc 01       	movw	r26, r24
     c68:	cb 01       	movw	r24, r22
     c6a:	e0 90 ab 05 	lds	r14, 0x05AB
     c6e:	f0 90 ac 05 	lds	r15, 0x05AC
     c72:	00 91 ad 05 	lds	r16, 0x05AD
     c76:	10 91 ae 05 	lds	r17, 0x05AE
     c7a:	9c 01       	movw	r18, r24
     c7c:	ad 01       	movw	r20, r26
     c7e:	c8 01       	movw	r24, r16
     c80:	b7 01       	movw	r22, r14
     c82:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
     c86:	dc 01       	movw	r26, r24
     c88:	cb 01       	movw	r24, r22
     c8a:	80 93 ab 05 	sts	0x05AB, r24
     c8e:	90 93 ac 05 	sts	0x05AC, r25
     c92:	a0 93 ad 05 	sts	0x05AD, r26
     c96:	b0 93 ae 05 	sts	0x05AE, r27
     c9a:	80 91 33 06 	lds	r24, 0x0633
     c9e:	90 91 34 06 	lds	r25, 0x0634
     ca2:	a0 91 35 06 	lds	r26, 0x0635
     ca6:	b0 91 36 06 	lds	r27, 0x0636
     caa:	9c 01       	movw	r18, r24
     cac:	ad 01       	movw	r20, r26
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	80 e8       	ldi	r24, 0x80	; 128
     cb4:	9f e3       	ldi	r25, 0x3F	; 63
     cb6:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__divsf3>
     cba:	dc 01       	movw	r26, r24
     cbc:	cb 01       	movw	r24, r22
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	40 e8       	ldi	r20, 0x80	; 128
     cc4:	5f e3       	ldi	r21, 0x3F	; 63
     cc6:	bc 01       	movw	r22, r24
     cc8:	cd 01       	movw	r24, r26
     cca:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
     cce:	dc 01       	movw	r26, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	a6 01       	movw	r20, r12
     cd4:	95 01       	movw	r18, r10
     cd6:	bc 01       	movw	r22, r24
     cd8:	cd 01       	movw	r24, r26
     cda:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
     cde:	dc 01       	movw	r26, r24
     ce0:	cb 01       	movw	r24, r22
     ce2:	e0 90 af 05 	lds	r14, 0x05AF
     ce6:	f0 90 b0 05 	lds	r15, 0x05B0
     cea:	00 91 b1 05 	lds	r16, 0x05B1
     cee:	10 91 b2 05 	lds	r17, 0x05B2
     cf2:	9c 01       	movw	r18, r24
     cf4:	ad 01       	movw	r20, r26
     cf6:	c8 01       	movw	r24, r16
     cf8:	b7 01       	movw	r22, r14
     cfa:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	80 93 af 05 	sts	0x05AF, r24
     d06:	90 93 b0 05 	sts	0x05B0, r25
     d0a:	a0 93 b1 05 	sts	0x05B1, r26
     d0e:	b0 93 b2 05 	sts	0x05B2, r27
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	df 90       	pop	r13
     d1c:	cf 90       	pop	r12
     d1e:	bf 90       	pop	r11
     d20:	af 90       	pop	r10
     d22:	08 95       	ret

00000d24 <bal_hwadj_validate>:
     d24:	ef 92       	push	r14
     d26:	ff 92       	push	r15
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	ec 01       	movw	r28, r24
     d32:	e8 80       	ld	r14, Y
     d34:	f9 80       	ldd	r15, Y+1	; 0x01
     d36:	0a 81       	ldd	r16, Y+2	; 0x02
     d38:	1b 81       	ldd	r17, Y+3	; 0x03
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	40 e0       	ldi	r20, 0x00	; 0
     d40:	50 ec       	ldi	r21, 0xC0	; 192
     d42:	c8 01       	movw	r24, r16
     d44:	b7 01       	movw	r22, r14
     d46:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
     d4a:	87 fd       	sbrc	r24, 7
     d4c:	0a c0       	rjmp	.+20     	; 0xd62 <bal_hwadj_validate+0x3e>
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	50 e4       	ldi	r21, 0x40	; 64
     d56:	c8 01       	movw	r24, r16
     d58:	b7 01       	movw	r22, r14
     d5a:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
     d5e:	18 16       	cp	r1, r24
     d60:	1c f4       	brge	.+6      	; 0xd68 <bal_hwadj_validate+0x44>
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	64 c0       	rjmp	.+200    	; 0xe30 <bal_hwadj_validate+0x10c>
     d68:	ec 80       	ldd	r14, Y+4	; 0x04
     d6a:	fd 80       	ldd	r15, Y+5	; 0x05
     d6c:	0e 81       	ldd	r16, Y+6	; 0x06
     d6e:	1f 81       	ldd	r17, Y+7	; 0x07
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	40 e0       	ldi	r20, 0x00	; 0
     d76:	50 ec       	ldi	r21, 0xC0	; 192
     d78:	c8 01       	movw	r24, r16
     d7a:	b7 01       	movw	r22, r14
     d7c:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
     d80:	87 fd       	sbrc	r24, 7
     d82:	ef cf       	rjmp	.-34     	; 0xd62 <bal_hwadj_validate+0x3e>
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e0       	ldi	r20, 0x00	; 0
     d8a:	50 e4       	ldi	r21, 0x40	; 64
     d8c:	c8 01       	movw	r24, r16
     d8e:	b7 01       	movw	r22, r14
     d90:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
     d94:	18 16       	cp	r1, r24
     d96:	2c f3       	brlt	.-54     	; 0xd62 <bal_hwadj_validate+0x3e>
     d98:	e8 84       	ldd	r14, Y+8	; 0x08
     d9a:	f9 84       	ldd	r15, Y+9	; 0x09
     d9c:	0a 85       	ldd	r16, Y+10	; 0x0a
     d9e:	1b 85       	ldd	r17, Y+11	; 0x0b
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	40 ea       	ldi	r20, 0xA0	; 160
     da6:	50 ec       	ldi	r21, 0xC0	; 192
     da8:	c8 01       	movw	r24, r16
     daa:	b7 01       	movw	r22, r14
     dac:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
     db0:	87 fd       	sbrc	r24, 7
     db2:	d7 cf       	rjmp	.-82     	; 0xd62 <bal_hwadj_validate+0x3e>
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 ea       	ldi	r20, 0xA0	; 160
     dba:	50 e4       	ldi	r21, 0x40	; 64
     dbc:	c8 01       	movw	r24, r16
     dbe:	b7 01       	movw	r22, r14
     dc0:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
     dc4:	18 16       	cp	r1, r24
     dc6:	6c f2       	brlt	.-102    	; 0xd62 <bal_hwadj_validate+0x3e>
     dc8:	ec 84       	ldd	r14, Y+12	; 0x0c
     dca:	fd 84       	ldd	r15, Y+13	; 0x0d
     dcc:	0e 85       	ldd	r16, Y+14	; 0x0e
     dce:	1f 85       	ldd	r17, Y+15	; 0x0f
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	40 ea       	ldi	r20, 0xA0	; 160
     dd6:	50 ec       	ldi	r21, 0xC0	; 192
     dd8:	c8 01       	movw	r24, r16
     dda:	b7 01       	movw	r22, r14
     ddc:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
     de0:	87 fd       	sbrc	r24, 7
     de2:	bf cf       	rjmp	.-130    	; 0xd62 <bal_hwadj_validate+0x3e>
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	40 ea       	ldi	r20, 0xA0	; 160
     dea:	50 e4       	ldi	r21, 0x40	; 64
     dec:	c8 01       	movw	r24, r16
     dee:	b7 01       	movw	r22, r14
     df0:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
     df4:	18 16       	cp	r1, r24
     df6:	0c f4       	brge	.+2      	; 0xdfa <bal_hwadj_validate+0xd6>
     df8:	b4 cf       	rjmp	.-152    	; 0xd62 <bal_hwadj_validate+0x3e>
     dfa:	e8 88       	ldd	r14, Y+16	; 0x10
     dfc:	f9 88       	ldd	r15, Y+17	; 0x11
     dfe:	0a 89       	ldd	r16, Y+18	; 0x12
     e00:	1b 89       	ldd	r17, Y+19	; 0x13
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e8       	ldi	r20, 0x80	; 128
     e08:	5f e3       	ldi	r21, 0x3F	; 63
     e0a:	c8 01       	movw	r24, r16
     e0c:	b7 01       	movw	r22, r14
     e0e:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
     e12:	87 fd       	sbrc	r24, 7
     e14:	a6 cf       	rjmp	.-180    	; 0xd62 <bal_hwadj_validate+0x3e>
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	40 ea       	ldi	r20, 0xA0	; 160
     e1c:	50 e4       	ldi	r21, 0x40	; 64
     e1e:	c8 01       	movw	r24, r16
     e20:	b7 01       	movw	r22, r14
     e22:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
     e26:	18 16       	cp	r1, r24
     e28:	0c f4       	brge	.+2      	; 0xe2c <bal_hwadj_validate+0x108>
     e2a:	9b cf       	rjmp	.-202    	; 0xd62 <bal_hwadj_validate+0x3e>
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	1f 91       	pop	r17
     e36:	0f 91       	pop	r16
     e38:	ff 90       	pop	r15
     e3a:	ef 90       	pop	r14
     e3c:	08 95       	ret

00000e3e <bal_config_validate>:
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	ec 01       	movw	r28, r24
     e4c:	e8 80       	ld	r14, Y
     e4e:	f9 80       	ldd	r15, Y+1	; 0x01
     e50:	0a 81       	ldd	r16, Y+2	; 0x02
     e52:	1b 81       	ldd	r17, Y+3	; 0x03
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	c8 01       	movw	r24, r16
     e5e:	b7 01       	movw	r22, r14
     e60:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
     e64:	87 fd       	sbrc	r24, 7
     e66:	0a c0       	rjmp	.+20     	; 0xe7c <bal_config_validate+0x3e>
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	48 ec       	ldi	r20, 0xC8	; 200
     e6e:	52 e4       	ldi	r21, 0x42	; 66
     e70:	c8 01       	movw	r24, r16
     e72:	b7 01       	movw	r22, r14
     e74:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
     e78:	18 16       	cp	r1, r24
     e7a:	1c f4       	brge	.+6      	; 0xe82 <bal_config_validate+0x44>
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	7d c0       	rjmp	.+250    	; 0xf7c <bal_config_validate+0x13e>
     e82:	ec 80       	ldd	r14, Y+4	; 0x04
     e84:	fd 80       	ldd	r15, Y+5	; 0x05
     e86:	0e 81       	ldd	r16, Y+6	; 0x06
     e88:	1f 81       	ldd	r17, Y+7	; 0x07
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	40 e0       	ldi	r20, 0x00	; 0
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	c8 01       	movw	r24, r16
     e94:	b7 01       	movw	r22, r14
     e96:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
     e9a:	87 fd       	sbrc	r24, 7
     e9c:	ef cf       	rjmp	.-34     	; 0xe7c <bal_config_validate+0x3e>
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 ef       	ldi	r20, 0xF0	; 240
     ea4:	51 e4       	ldi	r21, 0x41	; 65
     ea6:	c8 01       	movw	r24, r16
     ea8:	b7 01       	movw	r22, r14
     eaa:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
     eae:	18 16       	cp	r1, r24
     eb0:	2c f3       	brlt	.-54     	; 0xe7c <bal_config_validate+0x3e>
     eb2:	e8 84       	ldd	r14, Y+8	; 0x08
     eb4:	f9 84       	ldd	r15, Y+9	; 0x09
     eb6:	0a 85       	ldd	r16, Y+10	; 0x0a
     eb8:	1b 85       	ldd	r17, Y+11	; 0x0b
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	40 e0       	ldi	r20, 0x00	; 0
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	c8 01       	movw	r24, r16
     ec4:	b7 01       	movw	r22, r14
     ec6:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
     eca:	87 fd       	sbrc	r24, 7
     ecc:	d7 cf       	rjmp	.-82     	; 0xe7c <bal_config_validate+0x3e>
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	48 ec       	ldi	r20, 0xC8	; 200
     ed4:	52 e4       	ldi	r21, 0x42	; 66
     ed6:	c8 01       	movw	r24, r16
     ed8:	b7 01       	movw	r22, r14
     eda:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
     ede:	18 16       	cp	r1, r24
     ee0:	6c f2       	brlt	.-102    	; 0xe7c <bal_config_validate+0x3e>
     ee2:	ec 88       	ldd	r14, Y+20	; 0x14
     ee4:	fd 88       	ldd	r15, Y+21	; 0x15
     ee6:	0e 89       	ldd	r16, Y+22	; 0x16
     ee8:	1f 89       	ldd	r17, Y+23	; 0x17
     eea:	2a e0       	ldi	r18, 0x0A	; 10
     eec:	37 ed       	ldi	r19, 0xD7	; 215
     eee:	43 e2       	ldi	r20, 0x23	; 35
     ef0:	5c e3       	ldi	r21, 0x3C	; 60
     ef2:	c8 01       	movw	r24, r16
     ef4:	b7 01       	movw	r22, r14
     ef6:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
     efa:	87 fd       	sbrc	r24, 7
     efc:	bf cf       	rjmp	.-130    	; 0xe7c <bal_config_validate+0x3e>
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 ea       	ldi	r20, 0xA0	; 160
     f04:	50 e4       	ldi	r21, 0x40	; 64
     f06:	c8 01       	movw	r24, r16
     f08:	b7 01       	movw	r22, r14
     f0a:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
     f0e:	18 16       	cp	r1, r24
     f10:	0c f4       	brge	.+2      	; 0xf14 <bal_config_validate+0xd6>
     f12:	b4 cf       	rjmp	.-152    	; 0xe7c <bal_config_validate+0x3e>
     f14:	e8 8c       	ldd	r14, Y+24	; 0x18
     f16:	f9 8c       	ldd	r15, Y+25	; 0x19
     f18:	0a 8d       	ldd	r16, Y+26	; 0x1a
     f1a:	1b 8d       	ldd	r17, Y+27	; 0x1b
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	c8 01       	movw	r24, r16
     f26:	b7 01       	movw	r22, r14
     f28:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
     f2c:	87 fd       	sbrc	r24, 7
     f2e:	a6 cf       	rjmp	.-180    	; 0xe7c <bal_config_validate+0x3e>
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e0       	ldi	r20, 0x00	; 0
     f36:	50 e4       	ldi	r21, 0x40	; 64
     f38:	c8 01       	movw	r24, r16
     f3a:	b7 01       	movw	r22, r14
     f3c:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
     f40:	18 16       	cp	r1, r24
     f42:	0c f4       	brge	.+2      	; 0xf46 <bal_config_validate+0x108>
     f44:	9b cf       	rjmp	.-202    	; 0xe7c <bal_config_validate+0x3e>
     f46:	ec 8c       	ldd	r14, Y+28	; 0x1c
     f48:	fd 8c       	ldd	r15, Y+29	; 0x1d
     f4a:	0e 8d       	ldd	r16, Y+30	; 0x1e
     f4c:	1f 8d       	ldd	r17, Y+31	; 0x1f
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	c8 01       	movw	r24, r16
     f58:	b7 01       	movw	r22, r14
     f5a:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
     f5e:	87 fd       	sbrc	r24, 7
     f60:	8d cf       	rjmp	.-230    	; 0xe7c <bal_config_validate+0x3e>
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	50 e4       	ldi	r21, 0x40	; 64
     f6a:	c8 01       	movw	r24, r16
     f6c:	b7 01       	movw	r22, r14
     f6e:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
     f72:	18 16       	cp	r1, r24
     f74:	0c f4       	brge	.+2      	; 0xf78 <bal_config_validate+0x13a>
     f76:	82 cf       	rjmp	.-252    	; 0xe7c <bal_config_validate+0x3e>
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	1f 91       	pop	r17
     f82:	0f 91       	pop	r16
     f84:	ff 90       	pop	r15
     f86:	ef 90       	pop	r14
     f88:	08 95       	ret

00000f8a <bal_drive_validate>:
     f8a:	ef 92       	push	r14
     f8c:	ff 92       	push	r15
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	ec 01       	movw	r28, r24
     f98:	e8 80       	ld	r14, Y
     f9a:	f9 80       	ldd	r15, Y+1	; 0x01
     f9c:	0a 81       	ldd	r16, Y+2	; 0x02
     f9e:	1b 81       	ldd	r17, Y+3	; 0x03
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	5f eb       	ldi	r21, 0xBF	; 191
     fa8:	c8 01       	movw	r24, r16
     faa:	b7 01       	movw	r22, r14
     fac:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
     fb0:	87 fd       	sbrc	r24, 7
     fb2:	0a c0       	rjmp	.+20     	; 0xfc8 <bal_drive_validate+0x3e>
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	40 e0       	ldi	r20, 0x00	; 0
     fba:	5f e3       	ldi	r21, 0x3F	; 63
     fbc:	c8 01       	movw	r24, r16
     fbe:	b7 01       	movw	r22, r14
     fc0:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
     fc4:	18 16       	cp	r1, r24
     fc6:	1c f4       	brge	.+6      	; 0xfce <bal_drive_validate+0x44>
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	1a c0       	rjmp	.+52     	; 0x1002 <bal_drive_validate+0x78>
     fce:	ec 80       	ldd	r14, Y+4	; 0x04
     fd0:	fd 80       	ldd	r15, Y+5	; 0x05
     fd2:	0e 81       	ldd	r16, Y+6	; 0x06
     fd4:	1f 81       	ldd	r17, Y+7	; 0x07
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e8       	ldi	r20, 0x80	; 128
     fdc:	5f eb       	ldi	r21, 0xBF	; 191
     fde:	c8 01       	movw	r24, r16
     fe0:	b7 01       	movw	r22, r14
     fe2:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
     fe6:	87 fd       	sbrc	r24, 7
     fe8:	ef cf       	rjmp	.-34     	; 0xfc8 <bal_drive_validate+0x3e>
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e8       	ldi	r20, 0x80	; 128
     ff0:	5f e3       	ldi	r21, 0x3F	; 63
     ff2:	c8 01       	movw	r24, r16
     ff4:	b7 01       	movw	r22, r14
     ff6:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
     ffa:	18 16       	cp	r1, r24
     ffc:	2c f3       	brlt	.-54     	; 0xfc8 <bal_drive_validate+0x3e>
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	ff 90       	pop	r15
    100c:	ef 90       	pop	r14
    100e:	08 95       	ret

00001010 <balance_configure>:
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	a0 ec       	ldi	r26, 0xC0	; 192
    1016:	b0 e4       	ldi	r27, 0x40	; 64
    1018:	80 93 df 05 	sts	0x05DF, r24
    101c:	90 93 e0 05 	sts	0x05E0, r25
    1020:	a0 93 e1 05 	sts	0x05E1, r26
    1024:	b0 93 e2 05 	sts	0x05E2, r27
    1028:	86 e6       	ldi	r24, 0x66	; 102
    102a:	96 e6       	ldi	r25, 0x66	; 102
    102c:	a6 ee       	ldi	r26, 0xE6	; 230
    102e:	be e3       	ldi	r27, 0x3E	; 62
    1030:	80 93 e3 05 	sts	0x05E3, r24
    1034:	90 93 e4 05 	sts	0x05E4, r25
    1038:	a0 93 e5 05 	sts	0x05E5, r26
    103c:	b0 93 e6 05 	sts	0x05E6, r27
    1040:	8a e9       	ldi	r24, 0x9A	; 154
    1042:	99 e9       	ldi	r25, 0x99	; 153
    1044:	a9 e7       	ldi	r26, 0x79	; 121
    1046:	b0 e4       	ldi	r27, 0x40	; 64
    1048:	80 93 e7 05 	sts	0x05E7, r24
    104c:	90 93 e8 05 	sts	0x05E8, r25
    1050:	a0 93 e9 05 	sts	0x05E9, r26
    1054:	b0 93 ea 05 	sts	0x05EA, r27
    1058:	8d ec       	ldi	r24, 0xCD	; 205
    105a:	9c ec       	ldi	r25, 0xCC	; 204
    105c:	ac e0       	ldi	r26, 0x0C	; 12
    105e:	bf e3       	ldi	r27, 0x3F	; 63
    1060:	80 93 1b 06 	sts	0x061B, r24
    1064:	90 93 1c 06 	sts	0x061C, r25
    1068:	a0 93 1d 06 	sts	0x061D, r26
    106c:	b0 93 1e 06 	sts	0x061E, r27
    1070:	8d ec       	ldi	r24, 0xCD	; 205
    1072:	9c ec       	ldi	r25, 0xCC	; 204
    1074:	ac e4       	ldi	r26, 0x4C	; 76
    1076:	bd e3       	ldi	r27, 0x3D	; 61
    1078:	80 93 eb 05 	sts	0x05EB, r24
    107c:	90 93 ec 05 	sts	0x05EC, r25
    1080:	a0 93 ed 05 	sts	0x05ED, r26
    1084:	b0 93 ee 05 	sts	0x05EE, r27
    1088:	2d ec       	ldi	r18, 0xCD	; 205
    108a:	3c ec       	ldi	r19, 0xCC	; 204
    108c:	4c ec       	ldi	r20, 0xCC	; 204
    108e:	5d e3       	ldi	r21, 0x3D	; 61
    1090:	20 93 ef 05 	sts	0x05EF, r18
    1094:	30 93 f0 05 	sts	0x05F0, r19
    1098:	40 93 f1 05 	sts	0x05F1, r20
    109c:	50 93 f2 05 	sts	0x05F2, r21
    10a0:	84 ea       	ldi	r24, 0xA4	; 164
    10a2:	90 e7       	ldi	r25, 0x70	; 112
    10a4:	ad e7       	ldi	r26, 0x7D	; 125
    10a6:	bf e3       	ldi	r27, 0x3F	; 63
    10a8:	80 93 f3 05 	sts	0x05F3, r24
    10ac:	90 93 f4 05 	sts	0x05F4, r25
    10b0:	a0 93 f5 05 	sts	0x05F5, r26
    10b4:	b0 93 f6 05 	sts	0x05F6, r27
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	a0 e4       	ldi	r26, 0x40	; 64
    10be:	bf e3       	ldi	r27, 0x3F	; 63
    10c0:	80 93 f7 05 	sts	0x05F7, r24
    10c4:	90 93 f8 05 	sts	0x05F8, r25
    10c8:	a0 93 f9 05 	sts	0x05F9, r26
    10cc:	b0 93 fa 05 	sts	0x05FA, r27
    10d0:	8a e9       	ldi	r24, 0x9A	; 154
    10d2:	99 e9       	ldi	r25, 0x99	; 153
    10d4:	a9 e1       	ldi	r26, 0x19	; 25
    10d6:	bf e3       	ldi	r27, 0x3F	; 63
    10d8:	80 93 fb 05 	sts	0x05FB, r24
    10dc:	90 93 fc 05 	sts	0x05FC, r25
    10e0:	a0 93 fd 05 	sts	0x05FD, r26
    10e4:	b0 93 fe 05 	sts	0x05FE, r27
    10e8:	8e ea       	ldi	r24, 0xAE	; 174
    10ea:	97 e4       	ldi	r25, 0x47	; 71
    10ec:	a1 e6       	ldi	r26, 0x61	; 97
    10ee:	bf e3       	ldi	r27, 0x3F	; 63
    10f0:	80 93 ff 05 	sts	0x05FF, r24
    10f4:	90 93 00 06 	sts	0x0600, r25
    10f8:	a0 93 01 06 	sts	0x0601, r26
    10fc:	b0 93 02 06 	sts	0x0602, r27
    1100:	8d ec       	ldi	r24, 0xCD	; 205
    1102:	9c ec       	ldi	r25, 0xCC	; 204
    1104:	ac ec       	ldi	r26, 0xCC	; 204
    1106:	be e3       	ldi	r27, 0x3E	; 62
    1108:	80 93 03 06 	sts	0x0603, r24
    110c:	90 93 04 06 	sts	0x0604, r25
    1110:	a0 93 05 06 	sts	0x0605, r26
    1114:	b0 93 06 06 	sts	0x0606, r27
    1118:	20 93 07 06 	sts	0x0607, r18
    111c:	30 93 08 06 	sts	0x0608, r19
    1120:	40 93 09 06 	sts	0x0609, r20
    1124:	50 93 0a 06 	sts	0x060A, r21
    1128:	8d ec       	ldi	r24, 0xCD	; 205
    112a:	9c ec       	ldi	r25, 0xCC	; 204
    112c:	ac e4       	ldi	r26, 0x4C	; 76
    112e:	be e3       	ldi	r27, 0x3E	; 62
    1130:	80 93 0b 06 	sts	0x060B, r24
    1134:	90 93 0c 06 	sts	0x060C, r25
    1138:	a0 93 0d 06 	sts	0x060D, r26
    113c:	b0 93 0e 06 	sts	0x060E, r27
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	a0 ee       	ldi	r26, 0xE0	; 224
    1146:	b0 e4       	ldi	r27, 0x40	; 64
    1148:	80 93 13 06 	sts	0x0613, r24
    114c:	90 93 14 06 	sts	0x0614, r25
    1150:	a0 93 15 06 	sts	0x0615, r26
    1154:	b0 93 16 06 	sts	0x0616, r27
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	a0 e8       	ldi	r26, 0x80	; 128
    115e:	bf e3       	ldi	r27, 0x3F	; 63
    1160:	80 93 17 06 	sts	0x0617, r24
    1164:	90 93 18 06 	sts	0x0618, r25
    1168:	a0 93 19 06 	sts	0x0619, r26
    116c:	b0 93 1a 06 	sts	0x061A, r27
    1170:	83 e3       	ldi	r24, 0x33	; 51
    1172:	93 e3       	ldi	r25, 0x33	; 51
    1174:	a3 eb       	ldi	r26, 0xB3	; 179
    1176:	be e3       	ldi	r27, 0x3E	; 62
    1178:	80 93 1f 06 	sts	0x061F, r24
    117c:	90 93 20 06 	sts	0x0620, r25
    1180:	a0 93 21 06 	sts	0x0621, r26
    1184:	b0 93 22 06 	sts	0x0622, r27
    1188:	8a e0       	ldi	r24, 0x0A	; 10
    118a:	97 ed       	ldi	r25, 0xD7	; 215
    118c:	a3 e2       	ldi	r26, 0x23	; 35
    118e:	bc e3       	ldi	r27, 0x3C	; 60
    1190:	80 93 27 06 	sts	0x0627, r24
    1194:	90 93 28 06 	sts	0x0628, r25
    1198:	a0 93 29 06 	sts	0x0629, r26
    119c:	b0 93 2a 06 	sts	0x062A, r27
void 
eeprom_read_block (void *pointer_ram,
                   const void *pointer_eeprom,
                   size_t n)
{
    11a0:	ef e9       	ldi	r30, 0x9F	; 159
    11a2:	f5 e0       	ldi	r31, 0x05	; 5
    11a4:	a0 e0       	ldi	r26, 0x00	; 0
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 

      __asm__ __volatile__ ( 
            ".%=_start:" CR_TAB
            "sbiw %2,1" CR_TAB
            "brlt .%=_finished" CR_TAB
             XCALL " __eeprom_read_byte_" _REG_LOCATION_SUFFIX CR_TAB
            "st z+,__tmp_reg__" CR_TAB
            "rjmp .%=_start" CR_TAB
            ".%=_finished:" 
          : "=x" (pointer_eeprom),
            "=z" (pointer_ram),
            "+w" (size)
           : "x" (pointer_eeprom), 
             "z" (pointer_ram)
           : "memory");
    }
  else
    {
      if (n != 0)
        {
          if (n == 256)
            {
              __asm__ __volatile__ (
                  XCALL " __eeprom_read_block_" _REG_LOCATION_SUFFIX 
                : "+x" (pointer_eeprom),
                  "=z" (pointer_ram)
                : "z"  (pointer_ram)
                : "memory");
            }
          else
            {
              /* Needed in order to truncate to 8 bit.  */
              uint8_t len;
              len = (uint8_t) n; 
    11a8:	84 e1       	ldi	r24, 0x14	; 20

              __asm__ __volatile__ (
    11aa:	18 2e       	mov	r1, r24
    11ac:	0e 94 ab 20 	call	0x4156	; 0x4156 <__eeprom_read_block_1C1D1E>
   In a nutshell...
   
   We have two inputs, a measured angular rotation rate (degrees per second) and a
   forward-backward acceleration. We integrate the angular rate to get the angle. Except
   that the angular rate has a bias on it, simulating an apparent rotation all the time at
   a small rate that varies with temperature. So we have to correct it with the
   accelerometer. The accelerometer is a tiny mass on a spring that moves forward-backward
   in the frame of reference of the scooter. At rest, it will read positive if the scooter
   is tipped forward and negative if tipped backwards, since gravity pulls it forwards or
   backwards. However, it also moves a lot due to the scooter itself acclerating. So we
   use the accelerometer as a long-term correction and the rate gyro for short-term
   changes.

   This isn't really a Kalman filter, since that particular brand of filter dynamically
   estimates the noise on each signal. I initially did that but it didn't work well, since
   the noise is not independent, additive white Gaussian noise. Instead, how much we trust
   the acclerometer depends on how much we're accelerating.

   This isn't perfect; the scooter can wobble slowly by a couple degrees over several
   seconds, and especially after a sharp maneuver. But it's barely noticeable riding it;
   you get used to adjusting for it. 
*/
void gyro_sample_rate(struct gyro_filter *it, float in_rate, float interval)
{
  if (!it->rate_inited) {
    it->rate_bias = in_rate;
    it->rate_inited=1;
  }
  
  it->rate = in_rate - it->rate_bias;
  it->angle += it->rate * interval;

#ifdef __UNICYCLE2__
  it->rate_bias += it->rate * 0.1 * interval;
#else
  it->rate_bias += it->rate * 0.3 * interval;
#endif
}

void gyro_sample_angle(struct gyro_filter *it, float in_angle, float interval)
{
  float angle_err;

  if (!it->angle_inited) {
    it->angle = in_angle;
    it->angle_inited=1;
  }
  
  angle_err = in_angle - it->angle;

#ifdef __UNICYCLE2__
  it->angle += angle_err * 3.0 * interval / (2.0 + it->angle_noise);
#else
  it->angle += angle_err * interval / (2.0 + it->angle_noise);
#endif
}

/* 
   Set the PWM values for the motors. +1.0 is full forward, -1.0 is full reverse.
*/

void set_motors(float left
#ifdef DO_STEERING
                , float right
#endif
                )
{
  uint8_t debuglog=0;
  {
    static uint8_t dlc;
    dlc++;
    if (dlc==0) debuglog=1;
  }
  left=flim(L_MOTOR_POLARITY left, -1.0, 1.0);
  int16_t lefti = (int16_t)(left*(OCR1_MAX+0.9));
  if (lefti<-(OCR1_MAX-3)) lefti=-(OCR1_MAX-3);
  if (lefti>OCR1_MAX-3) lefti=OCR1_MAX-3;

#ifdef DO_STEERING
  right=flim(R_MOTOR_POLARITY right, -1.0, 1.0);
  int16_t righti = (int16_t)(right*(OCR1_MAX+0.9));
  if (righti<-(OCR1_MAX-3)) righti=-(OCR1_MAX-3);
  if (righti>OCR1_MAX-3) righti=OCR1_MAX-3;
#endif

  /* 
    It's OK to update these asynchronously with the PWM clock, because OCRn[AB] is double buffered 
    and only changes when the counter reaches TOP 
  */

  cli();
  // The OSMC1 port on the BAL2 board
  if (lefti<0) {
    ASMCOMMENT("left reverse");
    /* For reverse, set PWM_FWD=0, PWM_DISABLE=0, PWM_REV=1.
       The order here is carefully chosen to avoid glitches.
       Note also that we have interrupts disabled so there's no chance of dead time.
    */
    set0_l_pwm_fwd();
    set0_l_pwm_disable();
    set1_l_pwm_rev();
    set_l_pwm(-lefti);
    if (debuglog) {
      pkt_tx_start();
      pkt_tx_str_P(PSTR("!lr"));
      pkt_tx_uint16_hex(-lefti);
      pkt_tx_end();
    }
  } else {
    ASMCOMMENT("left forward");
    // For forward, set PWM_FWD=1, PWM_DISABLE=0, PWM_REV=0
    set0_l_pwm_rev();
    set0_l_pwm_disable();
    set1_l_pwm_fwd();
    set_l_pwm(lefti);
    if (debuglog) {
      pkt_tx_start();
      pkt_tx_str_P(PSTR("!lf"));
      pkt_tx_uint16_hex(lefti);
      pkt_tx_end();
    }
  }

#ifdef DO_STEERING
  // The OSMC2 port on the BAL2 board
  if (righti<0) {
    ASMCOMMENT("right reverse");
    set0_r_pwm_fwd();
    set0_r_pwm_disable();
    set1_r_pwm_rev();
    set_r_pwm(OCR1_MAX+righti);
    if (debuglog) {
      pkt_tx_start();
      pkt_tx_str_P(PSTR("!rr"));
      pkt_tx_uint16_hex(OCR1_MAX+righti);
      pkt_tx_end();
    }
  } else {
    set0_r_pwm_rev();
    set0_r_pwm_disable();
    set1_r_pwm_fwd();
    set_r_pwm(OCR1_MAX-righti);
    if (debuglog) {
      pkt_tx_start();
      pkt_tx_str_P(PSTR("!rf"));
      pkt_tx_uint16_hex(OCR1_MAX-righti);
      pkt_tx_end();
    }
  }
#endif

  sei();
}

/*
  Different from setting the motors to zero speed, this disables both legs of the H bridge
  so the motor can freewheel. This is a better thing to do in an emergency than locking
  the wheel by calling set_motors(0.0, 0.0). 
*/

void set_motor_idle()
{

#ifdef DO_STEERING
  set_r_pwm(0);
  set1_r_pwm_disable();
  set0_r_pwm_rev();
  set0_r_pwm_fwd();
#endif

  set_l_pwm(0);
  set1_l_pwm_disable();
  set0_l_pwm_rev();
  set0_l_pwm_fwd();
}

void
accum_88_32(uint8_t l, uint8_t h, uint32_t *out)
{
  uint8_t *outb = (uint8_t *)out;
  
  outb[0] = l;
  uint8_t oldh = outb[1];
  outb[1] = h;

  uint8_t dir=h-oldh;

  if ((dir&0x80) && !(oldh&0x80) && (h&0x80)) {
    outb[3]--;
    if (outb[3]==0xff) outb[4]--;
  }
  else if (!(dir&0x80) && (oldh&0x80) && !(h&0x80)) {
    outb[3]++;
    if (outb[3]==0) outb[4]++;
  }

}

#if defined(DO_ENCODERS)
void
read_encoders(uint32_t *enc1_r, uint32_t *enc2_r)
{
  set0_enc_sel1();
  set0_enc_oe1_not();
  _delay_loop_1(10);
  uint8_t enc1h = getpin_enc_data();
  set1_enc_oe1_not();
  set1_enc_sel1();
  set0_enc_oe1_not();
  _delay_loop_1(10);
  uint8_t enc1l = getpin_enc_data();
  set1_enc_oe1_not();

  accum_88_32(enc1l, enc1h, enc1_r);

  set0_enc_sel2();
  set0_enc_oe2_not();
  _delay_loop_1(10);
  uint8_t enc2h = getpin_enc_data();
  set1_enc_oe2_not();
  set1_enc_sel2();
  set0_enc_oe2_not();
  _delay_loop_1(10);
  uint8_t enc2l = getpin_enc_data();
  set1_enc_oe2_not();

  accum_88_32(enc2l, enc2h, enc2_r);
}
#endif

/* 
   All the state and config variables are defined in balconf.h, so I can get at them externally.
*/
struct bal_config bc;
struct bal_state bs;
struct bal_hwadj bh;

/*
  Constants to convert integer ADC samples to numbers between 0 and 1, or -1 and 1.
  What the ADC system actually gives us is the sum of ADC_HIST (8) consecutive samples.
*/
static float sample_conv_bipolar = 1.0/512.0/(float)ADC_HIST;
static float sample_conv_unipolar = 1.0/1024.0/(float)ADC_HIST;

void
update_hwadj(float lpf)
{
#ifdef DO_STEERING
  bh.steering_bias -= lpf*bs.steering;
  bh.yaw_bias -= lpf*bs.yaw_rate;
#endif
  bh.fwd_accel_bias -= lpf*bs.fwd_accel;
#ifdef __BAL3__
  bh.right_accel_bias -= lpf*bs.right_accel;
#endif

  bh.bat_voltage_mult += lpf*(1.0/bs.bat_voltage - 1.0);
}

int bal_hwadj_validate(struct bal_hwadj *h)
{
#define R(X,L,H) if (h->X < L || h->X > H) return 0;
#ifdef DO_STEERING
  R(steering_bias, -2.0, 2.0);
  R(yaw_bias, -2.0, 2.0);
#endif
  R(fwd_accel_bias, -5.0, 5.0);
  R(right_accel_bias, -5.0, 5.0);
  R(bat_voltage_mult, 1.0, 5.0);
#undef R
  return 1;
}

int bal_config_validate(struct bal_config *c)
{
#define R(X,L,H) if (c->X < L || c->X > H) return 0;

  R(p_gain, 0.0, 100.0);
  R(d_gain, 0.0, 30.0);
  R(i_gain, 0.0, 100.0);
  R(hard_speed_lim, 0.01, 5.0);
  R(fwd_speed_lim, 0.0, 2.0);
  R(rev_speed_lim, 0.0, 2.0);
#undef R
  return 1;
}

int bal_drive_validate(struct bal_drive *c)
{
#define R(X,L,H) if (c->X < L || c->X > H) return 0;

  R(speed_targ, -0.5, 0.5);
  R(steering_targ, -1.0, 1.0);

#undef R
  return 1;
}


/*
  Reasonable parameter values. Tuners, this is what you're looking for.
  
  Actually, you should use the serial port interface and GUI application to adjust these
  on-line, then copy the values back here.

  Read the comments in balconf.h for intent, then look at the code to see what they
  actually do.
*/
void balance_configure(void)
{
#if defined(__SEGWELL2__)
  bc.p_gain = 6.0;
  bc.d_gain = 0.60;
  bc.i_gain = 2.40;
  bc.motor_torque_factor = 0.32;
#elif defined(__JORDANWAY__)
  bc.p_gain = 6.0;
  bc.d_gain = 0.45;
  bc.i_gain = 3.90;
  bc.motor_torque_factor = 0.55;
#elif defined(__ZOOMBOARD__)
  bc.p_gain = 2.5;
  bc.d_gain = 0.13;
  bc.i_gain = 3.0;
  bc.motor_torque_factor = 1.0;
#elif defined(__UNICYCLE2__)
  bc.p_gain = 3.2;
  bc.d_gain = 0.10;
  bc.i_gain = 0.0;
  bc.motor_torque_factor = 0.70;
  bc.fwd_accel_coupling = 0.6;
#else
#error "No HW"
#endif

#ifdef DO_STEERING
  bc.yaw_steer_gain = 0.05;
  bc.yaw_steer_speed_thresh = 0.1;
#endif

#if defined(__SEGWELL2__)
  bc.hard_speed_lim = 0.99;
  bc.fwd_speed_lim = 0.75;
  bc.rev_speed_lim = 0.60;
  bc.beep_speed_lim = 0.88;
  bc.fwd_accel_coupling = 0.3;
  bc.rev_stick_shake_speed_lim = 0.40;
#elif defined(__JORDANWAY__)
  bc.hard_speed_lim = 0.99;
  bc.fwd_speed_lim = 0.75;
  bc.rev_speed_lim = 0.60;
  bc.beep_speed_lim = 0.88;
  bc.rev_stick_shake_speed_lim = 0.40;
#elif defined(__ZOOMBOARD__)
  bc.hard_speed_lim = 0.99;
  bc.fwd_speed_lim = 0.70;
  bc.rev_speed_lim = 0.60;
  bc.beep_speed_lim = 0.80;
  bc.rev_stick_shake_speed_lim = 0.40;
#elif defined(__UNICYCLE2__)
  bc.hard_speed_lim = 0.99;
  bc.fwd_speed_lim = 0.75;
  bc.rev_speed_lim = 0.75;
  bc.beep_speed_lim = 0.88;
  bc.rev_stick_shake_speed_lim = 10.00;
#else
#error "No HW"
#endif

#ifdef DO_STEERING
  bc.steer_rate_num = 0.100;
  bc.steer_rate_den = 0.200;
  bc.yaw_target_mult = 7.0;
#endif

  bc.balance_torque_lim = 1.0;

  bc.fuse_alarm_thresh = 0.35; // 35 amps. We have 40 amp fuses

#if defined(__BAL3__) || defined(__BAL4__)
  bc.crossover_boost = 0.01;
#else
  bc.crossover_boost = 0.015;
#endif

  eeprom_read_block(&bh, 0, sizeof(bh));
  if (1 || (((uint8_t *)&bh)[0]==0xff && ((uint8_t *)&bh)[1]==0xff && ((uint8_t *)&bh)[2]==0xff  && ((uint8_t *)&bh)[3]==0xff) ||
      !bal_hwadj_validate(&bh)) {

    memset(&bh, 0, sizeof(bh));
    11b0:	ef e9       	ldi	r30, 0x9F	; 159
    11b2:	f5 e0       	ldi	r31, 0x05	; 5
    11b4:	11 92       	st	Z+, r1
    11b6:	8a 95       	dec	r24
    11b8:	e9 f7       	brne	.-6      	; 0x11b4 <__stack+0xb5>

#if defined(__SEGWELL2__)
    bh.steering_bias = +0.305;
    bh.yaw_bias = -0.035;
    bh.fwd_accel_bias = 1.65;
    bh.right_accel_bias = 0.0;
    bh.bat_voltage_mult = 1.5625;
#elif defined(__JORDANWAY__)
    bh.steering_bias = -0.078;
    11ba:	87 e7       	ldi	r24, 0x77	; 119
    11bc:	9e eb       	ldi	r25, 0xBE	; 190
    11be:	af e9       	ldi	r26, 0x9F	; 159
    11c0:	bd eb       	ldi	r27, 0xBD	; 189
    11c2:	80 93 9f 05 	sts	0x059F, r24
    11c6:	90 93 a0 05 	sts	0x05A0, r25
    11ca:	a0 93 a1 05 	sts	0x05A1, r26
    11ce:	b0 93 a2 05 	sts	0x05A2, r27
    bh.yaw_bias = +0.0;
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e0       	ldi	r20, 0x00	; 0
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	20 93 a3 05 	sts	0x05A3, r18
    11de:	30 93 a4 05 	sts	0x05A4, r19
    11e2:	40 93 a5 05 	sts	0x05A5, r20
    11e6:	50 93 a6 05 	sts	0x05A6, r21
    bh.fwd_accel_bias = -1.07;    // more positive means more backwards
    11ea:	83 ec       	ldi	r24, 0xC3	; 195
    11ec:	95 ef       	ldi	r25, 0xF5	; 245
    11ee:	a8 e8       	ldi	r26, 0x88	; 136
    11f0:	bf eb       	ldi	r27, 0xBF	; 191
    11f2:	80 93 a7 05 	sts	0x05A7, r24
    11f6:	90 93 a8 05 	sts	0x05A8, r25
    11fa:	a0 93 a9 05 	sts	0x05A9, r26
    11fe:	b0 93 aa 05 	sts	0x05AA, r27
    bh.right_accel_bias = 0.0;
    1202:	20 93 ab 05 	sts	0x05AB, r18
    1206:	30 93 ac 05 	sts	0x05AC, r19
    120a:	40 93 ad 05 	sts	0x05AD, r20
    120e:	50 93 ae 05 	sts	0x05AE, r21
    bh.bat_voltage_mult = 3.47;
    1212:	8b e7       	ldi	r24, 0x7B	; 123
    1214:	94 e1       	ldi	r25, 0x14	; 20
    1216:	ae e5       	ldi	r26, 0x5E	; 94
    1218:	b0 e4       	ldi	r27, 0x40	; 64
    121a:	80 93 af 05 	sts	0x05AF, r24
    121e:	90 93 b0 05 	sts	0x05B0, r25
    1222:	a0 93 b1 05 	sts	0x05B1, r26
    1226:	b0 93 b2 05 	sts	0x05B2, r27
    122a:	08 95       	ret

0000122c <balance_init>:
#elif defined(__ZOOMBOARD__)
    bh.fwd_accel_bias = -0.3;
    bh.right_accel_bias = 0.0;
    bh.bat_voltage_mult = 2.0;
#elif defined(__UNICYCLE2__)
    bh.fwd_accel_bias = 0.05;
    bh.right_accel_bias = 0.0;
    bh.bat_voltage_mult = 3.2;  // correct for 33v nominal battery voltage
#else
#error "No HW"
#endif
  }
}

static uint16_t last_balance_tcnt3;
static uint8_t last_balance_s0;

void balance_init(void)
{
  balance_configure();
    122c:	0e 94 08 08 	call	0x1010	; 0x1010 <balance_configure>
  if (!bal_config_validate(&bc)) {
    1230:	8f ed       	ldi	r24, 0xDF	; 223
    1232:	95 e0       	ldi	r25, 0x05	; 5
    1234:	0e 94 1f 07 	call	0xe3e	; 0xe3e <bal_config_validate>
    1238:	89 2b       	or	r24, r25
    123a:	41 f4       	brne	.+16     	; 0x124c <balance_init+0x20>
    pkt_tx_start();
    123c:	0e 94 ca 1a 	call	0x3594	; 0x3594 <pkt_tx_start>
    pkt_tx_str_P(PSTR("!balance_validate fails\n"));
    1240:	8c e9       	ldi	r24, 0x9C	; 156
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <pkt_tx_str_P>
    pkt_tx_end();
    1248:	0e 94 33 1c 	call	0x3866	; 0x3866 <pkt_tx_end>
  }

  last_balance_tcnt3=TCNT3;
    124c:	80 91 88 00 	lds	r24, 0x0088
    1250:	90 91 89 00 	lds	r25, 0x0089
    1254:	90 93 0e 01 	sts	0x010E, r25
    1258:	80 93 0d 01 	sts	0x010D, r24

  bs.mode = MODE_INITIAL;
    125c:	10 92 f3 06 	sts	0x06F3, r1
  bs.balance_torque=0.0;
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a0 e0       	ldi	r26, 0x00	; 0
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	80 93 a3 06 	sts	0x06A3, r24
    126c:	90 93 a4 06 	sts	0x06A4, r25
    1270:	a0 93 a5 06 	sts	0x06A5, r26
    1274:	b0 93 a6 06 	sts	0x06A6, r27
#ifdef DO_DRIVE
  bs.drive_age = 1000.0;
#endif
#ifdef DO_BAT
  bs.bat_speed_lim = 0.5;
  bs.bat.fullloadvoltage = 0.7;
#endif

  set_motor_idle();
    1278:	0e 94 71 05 	call	0xae2	; 0xae2 <set_motor_idle>
    127c:	ac 98       	cbi	0x15, 4	; 21
    127e:	08 95       	ret

00001280 <do_crossover>:
  set0_accel_st();
}

void do_crossover(float *x, float boost, float factor)
{
    1280:	6f 92       	push	r6
    1282:	7f 92       	push	r7
    1284:	8f 92       	push	r8
    1286:	9f 92       	push	r9
    1288:	af 92       	push	r10
    128a:	bf 92       	push	r11
    128c:	cf 92       	push	r12
    128e:	df 92       	push	r13
    1290:	ef 92       	push	r14
    1292:	ff 92       	push	r15
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	ec 01       	movw	r28, r24
    129e:	3a 01       	movw	r6, r20
    12a0:	4b 01       	movw	r8, r22
    12a2:	58 01       	movw	r10, r16
    12a4:	69 01       	movw	r12, r18
  if (*x>=0.0) {
    12a6:	e8 80       	ld	r14, Y
    12a8:	f9 80       	ldd	r15, Y+1	; 0x01
    12aa:	0a 81       	ldd	r16, Y+2	; 0x02
    12ac:	1b 81       	ldd	r17, Y+3	; 0x03
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e0       	ldi	r20, 0x00	; 0
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	c8 01       	movw	r24, r16
    12b8:	b7 01       	movw	r22, r14
    12ba:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
    12be:	88 23       	and	r24, r24
    12c0:	bc f0       	brlt	.+46     	; 0x12f0 <do_crossover+0x70>
    *x += fmin(boost, *x * factor);
    12c2:	a6 01       	movw	r20, r12
    12c4:	95 01       	movw	r18, r10
    12c6:	c8 01       	movw	r24, r16
    12c8:	b7 01       	movw	r22, r14
    12ca:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	9c 01       	movw	r18, r24
    12d4:	ad 01       	movw	r20, r26
    12d6:	c4 01       	movw	r24, r8
    12d8:	b3 01       	movw	r22, r6
    12da:	0e 94 81 03 	call	0x702	; 0x702 <fmin>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	9c 01       	movw	r18, r24
    12e4:	ad 01       	movw	r20, r26
    12e6:	c8 01       	movw	r24, r16
    12e8:	b7 01       	movw	r22, r14
    12ea:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    12ee:	19 c0       	rjmp	.+50     	; 0x1322 <do_crossover+0xa2>
  } else {
    *x -= fmin(boost, - *x * factor);
    12f0:	d8 01       	movw	r26, r16
    12f2:	c7 01       	movw	r24, r14
    12f4:	b0 58       	subi	r27, 0x80	; 128
    12f6:	a6 01       	movw	r20, r12
    12f8:	95 01       	movw	r18, r10
    12fa:	bc 01       	movw	r22, r24
    12fc:	cd 01       	movw	r24, r26
    12fe:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	9c 01       	movw	r18, r24
    1308:	ad 01       	movw	r20, r26
    130a:	c4 01       	movw	r24, r8
    130c:	b3 01       	movw	r22, r6
    130e:	0e 94 81 03 	call	0x702	; 0x702 <fmin>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	9c 01       	movw	r18, r24
    1318:	ad 01       	movw	r20, r26
    131a:	c8 01       	movw	r24, r16
    131c:	b7 01       	movw	r22, r14
    131e:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	88 83       	st	Y, r24
    1328:	99 83       	std	Y+1, r25	; 0x01
    132a:	aa 83       	std	Y+2, r26	; 0x02
    132c:	bb 83       	std	Y+3, r27	; 0x03
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	ff 90       	pop	r15
    1338:	ef 90       	pop	r14
    133a:	df 90       	pop	r13
    133c:	cf 90       	pop	r12
    133e:	bf 90       	pop	r11
    1340:	af 90       	pop	r10
    1342:	9f 90       	pop	r9
    1344:	8f 90       	pop	r8
    1346:	7f 90       	pop	r7
    1348:	6f 90       	pop	r6
    134a:	08 95       	ret

0000134c <balance>:
  }
}


/*
  Speed : 

  Motors: 24 volts is 240 RPM. With a 20" diameter wheel, that's 14.3 mph

  bat_voltage is volts/50

  MotorVoltage = bat_voltage*50 * PWM

  MotorVoltage = 50/1.5625 * cur_speed_est
  MotorVoltage = 32.0 * cur_speed_est

  This is the speed at which it starts tilting, but it can go 0.08
  beyond before integral limiting kicks in.

  speed_lim=0.75 => 24.0 volts => 14.3 mph
  speed_lim=0.7 => 13.3 mph (14.9 at integral limit)
  speed_lim=0.6 => 11.5 mph (13.0 at integral limit)
  speed_lim=0.4 => 7.6 mph


  Assume CG is 3 feet above axle. So a angrate of 1 (radians/sec) corresponds to a speed difference of
  2.04 mph, which corresponds to a cmd change of 0.107

*/

#ifdef DO_MISSION_LOG
bal_mission_log_ent mission_accum;
float time_since_mission_save;
#endif

uint16_t samples[ADCNO_END];
uint8_t last_samplecount[ADCNO_END];
float time_since_bat_update;

uint8_t bal_tickno;            // Counter used to time stick shake oscillator and other things

void balance(void)
{
    134c:	2f 92       	push	r2
    134e:	3f 92       	push	r3
    1350:	4f 92       	push	r4
    1352:	5f 92       	push	r5
    1354:	6f 92       	push	r6
    1356:	7f 92       	push	r7
    1358:	8f 92       	push	r8
    135a:	9f 92       	push	r9
    135c:	af 92       	push	r10
    135e:	bf 92       	push	r11
    1360:	cf 92       	push	r12
    1362:	df 92       	push	r13
    1364:	ef 92       	push	r14
    1366:	ff 92       	push	r15
    1368:	0f 93       	push	r16
    136a:	1f 93       	push	r17
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	a9 97       	sbiw	r28, 0x29	; 41
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61

  bal_tickno++;
    1380:	30 90 84 05 	lds	r3, 0x0584
    1384:	33 94       	inc	r3
    1386:	30 92 84 05 	sts	0x0584, r3
  {
#if defined(DO_ENCODERS)
    uint32_t lastenc1=bs.enc1_pos;
    uint32_t lastenc2=bs.enc2_pos;
#endif

    // interval = time in seconds since we last updated things.
    uint16_t cur_tcnt3 = TCNT3;
    138a:	20 91 88 00 	lds	r18, 0x0088
    138e:	30 91 89 00 	lds	r19, 0x0089
    
#if defined(DO_ENCODERS)
    // Since we're taking derivatives, do this as close as possible to the time sample
    read_encoders(&bs.enc1_pos, &bs.enc2_pos);
#endif

    uint16_t ticks = cur_tcnt3 - last_balance_tcnt3;
    1392:	80 91 0d 01 	lds	r24, 0x010D
    1396:	90 91 0e 01 	lds	r25, 0x010E
    139a:	89 01       	movw	r16, r18
    139c:	08 1b       	sub	r16, r24
    139e:	19 0b       	sbc	r17, r25
    last_balance_tcnt3 = cur_tcnt3;
    13a0:	30 93 0e 01 	sts	0x010E, r19
    13a4:	20 93 0d 01 	sts	0x010D, r18

    // It's normally 3 mS. In case of a hiccup, we don't want to make too big a correction
    bs.interval = fmax(0.001, fmin(0.010, timer3_seconds_conv * (float)ticks));
    13a8:	c8 01       	movw	r24, r16
    13aa:	aa 27       	eor	r26, r26
    13ac:	97 fd       	sbrc	r25, 7
    13ae:	a0 95       	com	r26
    13b0:	ba 2f       	mov	r27, r26
    13b2:	bc 01       	movw	r22, r24
    13b4:	cd 01       	movw	r24, r26
    13b6:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__floatsisf>
    13ba:	6b 01       	movw	r12, r22
    13bc:	7c 01       	movw	r14, r24
    13be:	17 ff       	sbrs	r17, 7
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <balance+0x7a>
    13c2:	0c 94 69 15 	jmp	0x2ad2	; 0x2ad2 <balance+0x1786>
    13c6:	80 91 80 05 	lds	r24, 0x0580
    13ca:	90 91 81 05 	lds	r25, 0x0581
    13ce:	a0 91 82 05 	lds	r26, 0x0582
    13d2:	b0 91 83 05 	lds	r27, 0x0583
    13d6:	9c 01       	movw	r18, r24
    13d8:	ad 01       	movw	r20, r26
    13da:	c7 01       	movw	r24, r14
    13dc:	b6 01       	movw	r22, r12
    13de:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	9c 01       	movw	r18, r24
    13e8:	ad 01       	movw	r20, r26
    13ea:	6a e0       	ldi	r22, 0x0A	; 10
    13ec:	77 ed       	ldi	r23, 0xD7	; 215
    13ee:	83 e2       	ldi	r24, 0x23	; 35
    13f0:	9c e3       	ldi	r25, 0x3C	; 60
    13f2:	0e 94 81 03 	call	0x702	; 0x702 <fmin>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	9c 01       	movw	r18, r24
    13fc:	ad 01       	movw	r20, r26
    13fe:	6f e6       	ldi	r22, 0x6F	; 111
    1400:	72 e1       	ldi	r23, 0x12	; 18
    1402:	83 e8       	ldi	r24, 0x83	; 131
    1404:	9a e3       	ldi	r25, 0x3A	; 58
    1406:	0e 94 61 03 	call	0x6c2	; 0x6c2 <fmax>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	80 93 2f 06 	sts	0x062F, r24
    1412:	90 93 30 06 	sts	0x0630, r25
    1416:	a0 93 31 06 	sts	0x0631, r26
    141a:	b0 93 32 06 	sts	0x0632, r27


#if defined(DO_ENCODERS)
    bs.enc1_vel = (bs.enc1_pos - lastenc1) / bs.interval;
    bs.enc2_vel = (bs.enc2_pos - lastenc2) / bs.interval;
#endif
  }

  /* 
     Accumulate real time. This will lose precision after about 4 hours of operation. It's
     currently only used for timestamping log packets, but if we want to log for a long
     time maybe we should use an integer counter or take it modulo 1000 or something.
  */
  bs.realtime += bs.interval; 
    141e:	e0 90 2b 06 	lds	r14, 0x062B
    1422:	f0 90 2c 06 	lds	r15, 0x062C
    1426:	00 91 2d 06 	lds	r16, 0x062D
    142a:	10 91 2e 06 	lds	r17, 0x062E
    142e:	9c 01       	movw	r18, r24
    1430:	ad 01       	movw	r20, r26
    1432:	c8 01       	movw	r24, r16
    1434:	b7 01       	movw	r22, r14
    1436:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    143a:	69 83       	std	Y+1, r22	; 0x01
    143c:	7a 83       	std	Y+2, r23	; 0x02
    143e:	8b 83       	std	Y+3, r24	; 0x03
    1440:	9c 83       	std	Y+4, r25	; 0x04
    1442:	60 93 2b 06 	sts	0x062B, r22
    1446:	70 93 2c 06 	sts	0x062C, r23
    144a:	80 93 2d 06 	sts	0x062D, r24
    144e:	90 93 2e 06 	sts	0x062E, r25

  /*
    Convert the ADC inputs to relevant variables. If you wire up your
    controller differently, these will have to change.
  */

#if defined(__BAL2__)
  bs.bat_voltage = samples[ADCNO_BAT_VOLTAGE]*sample_conv_unipolar * bh.bat_voltage_mult;
  bs.pitch_rate = (samples[ADCNO_PITCH_RATE]*sample_conv_bipolar - 1.0) * -2.1817; // convert to 20 mv/deg/sec to radians/sec
  bs.steering = (samples[ADCNO_STEERING]*sample_conv_bipolar - 1.0) * -1.5 + bh.steering_bias;
  bs.yaw_rate = (samples[ADCNO_YAW_RATE]*sample_conv_bipolar - 1.0) * 2.1817 + bh.yaw_bias;  // convert to radians/sec
  bs.knob1 = samples[ADCNO_KNOB1]*sample_conv_unipolar;
  bs.lmis = (samples[ADCNO_LMIS]*sample_conv_bipolar - 1.0) * L_MOTOR_POLARITY(-1.875); // Units are 100A
  bs.rmis = (samples[ADCNO_RMIS]*sample_conv_bipolar - 1.0) * R_MOTOR_POLARITY(-1.875);
  bs.b1is = (samples[ADCNO_B1IS]*sample_conv_bipolar - 1.0) * 1.875;
  bs.b2is = (samples[ADCNO_B2IS]*sample_conv_bipolar - 1.0) * 1.875;
  bs.batis = bs.b1is + bs.b2is;
  bs.fwd_accel = ((samples[ADCNO_FWD_ACCEL]*sample_conv_bipolar - 1.0) * -10.0 + bh.fwd_accel_bias);  // convert from 250 mv/G

#elif defined(__BAL3__)
  bs.bat_voltage = samples[ADCNO_BAT_VOLTAGE]*sample_conv_unipolar * bh.bat_voltage_mult;
    1452:	00 91 b3 05 	lds	r16, 0x05B3
    1456:	10 91 b4 05 	lds	r17, 0x05B4
    145a:	c8 01       	movw	r24, r16
    145c:	aa 27       	eor	r26, r26
    145e:	97 fd       	sbrc	r25, 7
    1460:	a0 95       	com	r26
    1462:	ba 2f       	mov	r27, r26
    1464:	bc 01       	movw	r22, r24
    1466:	cd 01       	movw	r24, r26
    1468:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__floatsisf>
    146c:	17 ff       	sbrs	r17, 7
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <balance+0x128>
    1470:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <balance+0x1776>
    1474:	20 91 08 01 	lds	r18, 0x0108
    1478:	30 91 09 01 	lds	r19, 0x0109
    147c:	40 91 0a 01 	lds	r20, 0x010A
    1480:	50 91 0b 01 	lds	r21, 0x010B
    1484:	2a 8b       	std	Y+18, r18	; 0x12
    1486:	3b 8b       	std	Y+19, r19	; 0x13
    1488:	4c 8b       	std	Y+20, r20	; 0x14
    148a:	5d 8b       	std	Y+21, r21	; 0x15
    148c:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1490:	7b 01       	movw	r14, r22
    1492:	8c 01       	movw	r16, r24
    1494:	80 91 af 05 	lds	r24, 0x05AF
    1498:	90 91 b0 05 	lds	r25, 0x05B0
    149c:	a0 91 b1 05 	lds	r26, 0x05B1
    14a0:	b0 91 b2 05 	lds	r27, 0x05B2
    14a4:	9c 01       	movw	r18, r24
    14a6:	ad 01       	movw	r20, r26
    14a8:	c8 01       	movw	r24, r16
    14aa:	b7 01       	movw	r22, r14
    14ac:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	80 93 33 06 	sts	0x0633, r24
    14b8:	90 93 34 06 	sts	0x0634, r25
    14bc:	a0 93 35 06 	sts	0x0635, r26
    14c0:	b0 93 36 06 	sts	0x0636, r27
  bs.pitch_rate = (samples[ADCNO_PITCH_RATE]*sample_conv_bipolar - 1.0) * -2.1817; // convert to 20 mv/deg/sec to radians/sec
    14c4:	00 91 b5 05 	lds	r16, 0x05B5
    14c8:	10 91 b6 05 	lds	r17, 0x05B6
    14cc:	c8 01       	movw	r24, r16
    14ce:	aa 27       	eor	r26, r26
    14d0:	97 fd       	sbrc	r25, 7
    14d2:	a0 95       	com	r26
    14d4:	ba 2f       	mov	r27, r26
    14d6:	bc 01       	movw	r22, r24
    14d8:	cd 01       	movw	r24, r26
    14da:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__floatsisf>
    14de:	17 ff       	sbrs	r17, 7
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <balance+0x19a>
    14e2:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <balance+0x1766>
    14e6:	a0 90 04 01 	lds	r10, 0x0104
    14ea:	b0 90 05 01 	lds	r11, 0x0105
    14ee:	c0 90 06 01 	lds	r12, 0x0106
    14f2:	d0 90 07 01 	lds	r13, 0x0107
    14f6:	a6 01       	movw	r20, r12
    14f8:	95 01       	movw	r18, r10
    14fa:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e8       	ldi	r20, 0x80	; 128
    1508:	5f e3       	ldi	r21, 0x3F	; 63
    150a:	bc 01       	movw	r22, r24
    150c:	cd 01       	movw	r24, r26
    150e:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	29 ef       	ldi	r18, 0xF9	; 249
    1518:	30 ea       	ldi	r19, 0xA0	; 160
    151a:	4b e0       	ldi	r20, 0x0B	; 11
    151c:	50 ec       	ldi	r21, 0xC0	; 192
    151e:	bc 01       	movw	r22, r24
    1520:	cd 01       	movw	r24, r26
    1522:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	80 93 37 06 	sts	0x0637, r24
    152e:	90 93 38 06 	sts	0x0638, r25
    1532:	a0 93 39 06 	sts	0x0639, r26
    1536:	b0 93 3a 06 	sts	0x063A, r27
#ifdef DO_STEERING
#ifdef __JORDANWAY__
  bs.steering = (samples[ADCNO_STEERING]*sample_conv_bipolar - 1.0) * +1.5 + bh.steering_bias;
    153a:	00 91 d3 05 	lds	r16, 0x05D3
    153e:	10 91 d4 05 	lds	r17, 0x05D4
    1542:	c8 01       	movw	r24, r16
    1544:	aa 27       	eor	r26, r26
    1546:	97 fd       	sbrc	r25, 7
    1548:	a0 95       	com	r26
    154a:	ba 2f       	mov	r27, r26
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__floatsisf>
    1554:	17 ff       	sbrs	r17, 7
    1556:	02 c0       	rjmp	.+4      	; 0x155c <balance+0x210>
    1558:	0c 94 51 15 	jmp	0x2aa2	; 0x2aa2 <balance+0x1756>
    155c:	a6 01       	movw	r20, r12
    155e:	95 01       	movw	r18, r10
    1560:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e8       	ldi	r20, 0x80	; 128
    156e:	5f e3       	ldi	r21, 0x3F	; 63
    1570:	bc 01       	movw	r22, r24
    1572:	cd 01       	movw	r24, r26
    1574:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 ec       	ldi	r20, 0xC0	; 192
    1582:	5f e3       	ldi	r21, 0x3F	; 63
    1584:	bc 01       	movw	r22, r24
    1586:	cd 01       	movw	r24, r26
    1588:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    158c:	7b 01       	movw	r14, r22
    158e:	8c 01       	movw	r16, r24
    1590:	80 91 9f 05 	lds	r24, 0x059F
    1594:	90 91 a0 05 	lds	r25, 0x05A0
    1598:	a0 91 a1 05 	lds	r26, 0x05A1
    159c:	b0 91 a2 05 	lds	r27, 0x05A2
    15a0:	9c 01       	movw	r18, r24
    15a2:	ad 01       	movw	r20, r26
    15a4:	c8 01       	movw	r24, r16
    15a6:	b7 01       	movw	r22, r14
    15a8:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	80 93 43 06 	sts	0x0643, r24
    15b4:	90 93 44 06 	sts	0x0644, r25
    15b8:	a0 93 45 06 	sts	0x0645, r26
    15bc:	b0 93 46 06 	sts	0x0646, r27
#else
  bs.steering = (samples[ADCNO_STEERING]*sample_conv_bipolar - 1.0) * -1.5 + bh.steering_bias;
#endif
#ifdef __JORDANWAY__
  bs.yaw_rate = (samples[ADCNO_YAW_RATE]*sample_conv_bipolar - 1.0) * -2.1817 + bh.yaw_bias;  // convert to radians/sec
    15c0:	00 91 b7 05 	lds	r16, 0x05B7
    15c4:	10 91 b8 05 	lds	r17, 0x05B8
    15c8:	c8 01       	movw	r24, r16
    15ca:	aa 27       	eor	r26, r26
    15cc:	97 fd       	sbrc	r25, 7
    15ce:	a0 95       	com	r26
    15d0:	ba 2f       	mov	r27, r26
    15d2:	bc 01       	movw	r22, r24
    15d4:	cd 01       	movw	r24, r26
    15d6:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__floatsisf>
    15da:	17 ff       	sbrs	r17, 7
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <balance+0x296>
    15de:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <balance+0x1746>
    15e2:	a6 01       	movw	r20, r12
    15e4:	95 01       	movw	r18, r10
    15e6:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e8       	ldi	r20, 0x80	; 128
    15f4:	5f e3       	ldi	r21, 0x3F	; 63
    15f6:	bc 01       	movw	r22, r24
    15f8:	cd 01       	movw	r24, r26
    15fa:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	29 ef       	ldi	r18, 0xF9	; 249
    1604:	30 ea       	ldi	r19, 0xA0	; 160
    1606:	4b e0       	ldi	r20, 0x0B	; 11
    1608:	50 ec       	ldi	r21, 0xC0	; 192
    160a:	bc 01       	movw	r22, r24
    160c:	cd 01       	movw	r24, r26
    160e:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1612:	7b 01       	movw	r14, r22
    1614:	8c 01       	movw	r16, r24
    1616:	80 91 a3 05 	lds	r24, 0x05A3
    161a:	90 91 a4 05 	lds	r25, 0x05A4
    161e:	a0 91 a5 05 	lds	r26, 0x05A5
    1622:	b0 91 a6 05 	lds	r27, 0x05A6
    1626:	9c 01       	movw	r18, r24
    1628:	ad 01       	movw	r20, r26
    162a:	c8 01       	movw	r24, r16
    162c:	b7 01       	movw	r22, r14
    162e:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	80 93 47 06 	sts	0x0647, r24
    163a:	90 93 48 06 	sts	0x0648, r25
    163e:	a0 93 49 06 	sts	0x0649, r26
    1642:	b0 93 4a 06 	sts	0x064A, r27
#else
  bs.yaw_rate = (samples[ADCNO_YAW_RATE]*sample_conv_bipolar - 1.0) * 2.1817 + bh.yaw_bias;  // convert to radians/sec
#endif
#endif
  bs.knob1 = samples[ADCNO_KNOB1]*sample_conv_unipolar;
    1646:	00 91 dd 05 	lds	r16, 0x05DD
    164a:	10 91 de 05 	lds	r17, 0x05DE
    164e:	c8 01       	movw	r24, r16
    1650:	aa 27       	eor	r26, r26
    1652:	97 fd       	sbrc	r25, 7
    1654:	a0 95       	com	r26
    1656:	ba 2f       	mov	r27, r26
    1658:	bc 01       	movw	r22, r24
    165a:	cd 01       	movw	r24, r26
    165c:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__floatsisf>
    1660:	17 ff       	sbrs	r17, 7
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <balance+0x31c>
    1664:	0c 94 41 15 	jmp	0x2a82	; 0x2a82 <balance+0x1736>
    1668:	2a 89       	ldd	r18, Y+18	; 0x12
    166a:	3b 89       	ldd	r19, Y+19	; 0x13
    166c:	4c 89       	ldd	r20, Y+20	; 0x14
    166e:	5d 89       	ldd	r21, Y+21	; 0x15
    1670:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	80 93 53 06 	sts	0x0653, r24
    167c:	90 93 54 06 	sts	0x0654, r25
    1680:	a0 93 55 06 	sts	0x0655, r26
    1684:	b0 93 56 06 	sts	0x0656, r27
  bs.knob2 = samples[ADCNO_KNOB2]*sample_conv_unipolar;
    1688:	00 91 db 05 	lds	r16, 0x05DB
    168c:	10 91 dc 05 	lds	r17, 0x05DC
    1690:	c8 01       	movw	r24, r16
    1692:	aa 27       	eor	r26, r26
    1694:	97 fd       	sbrc	r25, 7
    1696:	a0 95       	com	r26
    1698:	ba 2f       	mov	r27, r26
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__floatsisf>
    16a2:	17 ff       	sbrs	r17, 7
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <balance+0x35e>
    16a6:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <balance+0x1726>
    16aa:	2a 89       	ldd	r18, Y+18	; 0x12
    16ac:	3b 89       	ldd	r19, Y+19	; 0x13
    16ae:	4c 89       	ldd	r20, Y+20	; 0x14
    16b0:	5d 89       	ldd	r21, Y+21	; 0x15
    16b2:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	80 93 57 06 	sts	0x0657, r24
    16be:	90 93 58 06 	sts	0x0658, r25
    16c2:	a0 93 59 06 	sts	0x0659, r26
    16c6:	b0 93 5a 06 	sts	0x065A, r27
  bs.knob3 = samples[ADCNO_KNOB3]*sample_conv_unipolar;
    16ca:	00 91 d5 05 	lds	r16, 0x05D5
    16ce:	10 91 d6 05 	lds	r17, 0x05D6
    16d2:	c8 01       	movw	r24, r16
    16d4:	aa 27       	eor	r26, r26
    16d6:	97 fd       	sbrc	r25, 7
    16d8:	a0 95       	com	r26
    16da:	ba 2f       	mov	r27, r26
    16dc:	bc 01       	movw	r22, r24
    16de:	cd 01       	movw	r24, r26
    16e0:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__floatsisf>
    16e4:	17 ff       	sbrs	r17, 7
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <balance+0x3a0>
    16e8:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <balance+0x1716>
    16ec:	2a 89       	ldd	r18, Y+18	; 0x12
    16ee:	3b 89       	ldd	r19, Y+19	; 0x13
    16f0:	4c 89       	ldd	r20, Y+20	; 0x14
    16f2:	5d 89       	ldd	r21, Y+21	; 0x15
    16f4:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	80 93 5b 06 	sts	0x065B, r24
    1700:	90 93 5c 06 	sts	0x065C, r25
    1704:	a0 93 5d 06 	sts	0x065D, r26
    1708:	b0 93 5e 06 	sts	0x065E, r27
  bs.lmis = (samples[ADCNO_LMIS]*sample_conv_bipolar - 1.0) * 0.625; // Units are 100A
    170c:	00 91 d9 05 	lds	r16, 0x05D9
    1710:	10 91 da 05 	lds	r17, 0x05DA
    1714:	c8 01       	movw	r24, r16
    1716:	aa 27       	eor	r26, r26
    1718:	97 fd       	sbrc	r25, 7
    171a:	a0 95       	com	r26
    171c:	ba 2f       	mov	r27, r26
    171e:	bc 01       	movw	r22, r24
    1720:	cd 01       	movw	r24, r26
    1722:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__floatsisf>
    1726:	17 ff       	sbrs	r17, 7
    1728:	02 c0       	rjmp	.+4      	; 0x172e <balance+0x3e2>
    172a:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <balance+0x1706>
    172e:	a6 01       	movw	r20, r12
    1730:	95 01       	movw	r18, r10
    1732:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e8       	ldi	r20, 0x80	; 128
    1740:	5f e3       	ldi	r21, 0x3F	; 63
    1742:	bc 01       	movw	r22, r24
    1744:	cd 01       	movw	r24, r26
    1746:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e2       	ldi	r20, 0x20	; 32
    1754:	5f e3       	ldi	r21, 0x3F	; 63
    1756:	bc 01       	movw	r22, r24
    1758:	cd 01       	movw	r24, r26
    175a:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	80 93 5f 06 	sts	0x065F, r24
    1766:	90 93 60 06 	sts	0x0660, r25
    176a:	a0 93 61 06 	sts	0x0661, r26
    176e:	b0 93 62 06 	sts	0x0662, r27
  bs.rmis = (samples[ADCNO_RMIS]*sample_conv_bipolar - 1.0) * 0.625;
    1772:	00 91 d7 05 	lds	r16, 0x05D7
    1776:	10 91 d8 05 	lds	r17, 0x05D8
    177a:	c8 01       	movw	r24, r16
    177c:	aa 27       	eor	r26, r26
    177e:	97 fd       	sbrc	r25, 7
    1780:	a0 95       	com	r26
    1782:	ba 2f       	mov	r27, r26
    1784:	bc 01       	movw	r22, r24
    1786:	cd 01       	movw	r24, r26
    1788:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__floatsisf>
    178c:	17 ff       	sbrs	r17, 7
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <balance+0x448>
    1790:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <balance+0x16f6>
    1794:	a6 01       	movw	r20, r12
    1796:	95 01       	movw	r18, r10
    1798:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e8       	ldi	r20, 0x80	; 128
    17a6:	5f e3       	ldi	r21, 0x3F	; 63
    17a8:	bc 01       	movw	r22, r24
    17aa:	cd 01       	movw	r24, r26
    17ac:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e2       	ldi	r20, 0x20	; 32
    17ba:	5f e3       	ldi	r21, 0x3F	; 63
    17bc:	bc 01       	movw	r22, r24
    17be:	cd 01       	movw	r24, r26
    17c0:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	80 93 63 06 	sts	0x0663, r24
    17cc:	90 93 64 06 	sts	0x0664, r25
    17d0:	a0 93 65 06 	sts	0x0665, r26
    17d4:	b0 93 66 06 	sts	0x0666, r27
  bs.batis = (samples[ADCNO_BATIS]*sample_conv_bipolar - 1.0) * 0.625;
    17d8:	00 91 cf 05 	lds	r16, 0x05CF
    17dc:	10 91 d0 05 	lds	r17, 0x05D0
    17e0:	c8 01       	movw	r24, r16
    17e2:	aa 27       	eor	r26, r26
    17e4:	97 fd       	sbrc	r25, 7
    17e6:	a0 95       	com	r26
    17e8:	ba 2f       	mov	r27, r26
    17ea:	bc 01       	movw	r22, r24
    17ec:	cd 01       	movw	r24, r26
    17ee:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__floatsisf>
    17f2:	17 ff       	sbrs	r17, 7
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <balance+0x4ae>
    17f6:	0c 94 19 15 	jmp	0x2a32	; 0x2a32 <balance+0x16e6>
    17fa:	a6 01       	movw	r20, r12
    17fc:	95 01       	movw	r18, r10
    17fe:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e8       	ldi	r20, 0x80	; 128
    180c:	5f e3       	ldi	r21, 0x3F	; 63
    180e:	bc 01       	movw	r22, r24
    1810:	cd 01       	movw	r24, r26
    1812:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e2       	ldi	r20, 0x20	; 32
    1820:	5f e3       	ldi	r21, 0x3F	; 63
    1822:	bc 01       	movw	r22, r24
    1824:	cd 01       	movw	r24, r26
    1826:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	80 93 67 06 	sts	0x0667, r24
    1832:	90 93 68 06 	sts	0x0668, r25
    1836:	a0 93 69 06 	sts	0x0669, r26
    183a:	b0 93 6a 06 	sts	0x066A, r27
  bs.roll_rate = (samples[ADCNO_RIGHT_ACCEL]*sample_conv_bipolar - 1.0) * 2.1817;
    183e:	80 90 bb 05 	lds	r8, 0x05BB
    1842:	90 90 bc 05 	lds	r9, 0x05BC
    1846:	24 01       	movw	r4, r8
    1848:	66 24       	eor	r6, r6
    184a:	57 fc       	sbrc	r5, 7
    184c:	60 94       	com	r6
    184e:	76 2c       	mov	r7, r6
    1850:	c3 01       	movw	r24, r6
    1852:	b2 01       	movw	r22, r4
    1854:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__floatsisf>
    1858:	97 fe       	sbrs	r9, 7
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <balance+0x514>
    185c:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <balance+0x16d6>
    1860:	a6 01       	movw	r20, r12
    1862:	95 01       	movw	r18, r10
    1864:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e8       	ldi	r20, 0x80	; 128
    1872:	5f e3       	ldi	r21, 0x3F	; 63
    1874:	bc 01       	movw	r22, r24
    1876:	cd 01       	movw	r24, r26
    1878:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	29 ef       	ldi	r18, 0xF9	; 249
    1882:	30 ea       	ldi	r19, 0xA0	; 160
    1884:	4b e0       	ldi	r20, 0x0B	; 11
    1886:	50 e4       	ldi	r21, 0x40	; 64
    1888:	bc 01       	movw	r22, r24
    188a:	cd 01       	movw	r24, r26
    188c:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	80 93 4b 06 	sts	0x064B, r24
    1898:	90 93 4c 06 	sts	0x064C, r25
    189c:	a0 93 4d 06 	sts	0x064D, r26
    18a0:	b0 93 4e 06 	sts	0x064E, r27

  // ADXL0311 accelerometer, with a gain of 3.
  // Convert from 312*3 mv/G into Gs
  bs.fwd_accel = (samples[ADCNO_FWD_ACCEL]*sample_conv_bipolar - 1.0) * 2.67 + bh.fwd_accel_bias;  
    18a4:	00 91 bd 05 	lds	r16, 0x05BD
    18a8:	10 91 be 05 	lds	r17, 0x05BE
    18ac:	c8 01       	movw	r24, r16
    18ae:	aa 27       	eor	r26, r26
    18b0:	97 fd       	sbrc	r25, 7
    18b2:	a0 95       	com	r26
    18b4:	ba 2f       	mov	r27, r26
    18b6:	bc 01       	movw	r22, r24
    18b8:	cd 01       	movw	r24, r26
    18ba:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__floatsisf>
    18be:	17 ff       	sbrs	r17, 7
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <balance+0x57a>
    18c2:	0c 94 09 15 	jmp	0x2a12	; 0x2a12 <balance+0x16c6>
    18c6:	a6 01       	movw	r20, r12
    18c8:	95 01       	movw	r18, r10
    18ca:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e8       	ldi	r20, 0x80	; 128
    18d8:	5f e3       	ldi	r21, 0x3F	; 63
    18da:	bc 01       	movw	r22, r24
    18dc:	cd 01       	movw	r24, r26
    18de:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	28 e4       	ldi	r18, 0x48	; 72
    18e8:	31 ee       	ldi	r19, 0xE1	; 225
    18ea:	4a e2       	ldi	r20, 0x2A	; 42
    18ec:	50 e4       	ldi	r21, 0x40	; 64
    18ee:	bc 01       	movw	r22, r24
    18f0:	cd 01       	movw	r24, r26
    18f2:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    18f6:	7b 01       	movw	r14, r22
    18f8:	8c 01       	movw	r16, r24
    18fa:	80 91 a7 05 	lds	r24, 0x05A7
    18fe:	90 91 a8 05 	lds	r25, 0x05A8
    1902:	a0 91 a9 05 	lds	r26, 0x05A9
    1906:	b0 91 aa 05 	lds	r27, 0x05AA
    190a:	9c 01       	movw	r18, r24
    190c:	ad 01       	movw	r20, r26
    190e:	c8 01       	movw	r24, r16
    1910:	b7 01       	movw	r22, r14
    1912:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    1916:	6d 83       	std	Y+5, r22	; 0x05
    1918:	7e 83       	std	Y+6, r23	; 0x06
    191a:	8f 83       	std	Y+7, r24	; 0x07
    191c:	98 87       	std	Y+8, r25	; 0x08
    191e:	60 93 3b 06 	sts	0x063B, r22
    1922:	70 93 3c 06 	sts	0x063C, r23
    1926:	80 93 3d 06 	sts	0x063D, r24
    192a:	90 93 3e 06 	sts	0x063E, r25
  bs.right_accel = (samples[ADCNO_RIGHT_ACCEL]*sample_conv_bipolar - 1.0) * 2.67 + bh.right_accel_bias;
    192e:	c3 01       	movw	r24, r6
    1930:	b2 01       	movw	r22, r4
    1932:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__floatsisf>
    1936:	97 fe       	sbrs	r9, 7
    1938:	02 c0       	rjmp	.+4      	; 0x193e <balance+0x5f2>
    193a:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <balance+0x16b6>
    193e:	a6 01       	movw	r20, r12
    1940:	95 01       	movw	r18, r10
    1942:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e8       	ldi	r20, 0x80	; 128
    1950:	5f e3       	ldi	r21, 0x3F	; 63
    1952:	bc 01       	movw	r22, r24
    1954:	cd 01       	movw	r24, r26
    1956:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	28 e4       	ldi	r18, 0x48	; 72
    1960:	31 ee       	ldi	r19, 0xE1	; 225
    1962:	4a e2       	ldi	r20, 0x2A	; 42
    1964:	50 e4       	ldi	r21, 0x40	; 64
    1966:	bc 01       	movw	r22, r24
    1968:	cd 01       	movw	r24, r26
    196a:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    196e:	7b 01       	movw	r14, r22
    1970:	8c 01       	movw	r16, r24
    1972:	80 91 ab 05 	lds	r24, 0x05AB
    1976:	90 91 ac 05 	lds	r25, 0x05AC
    197a:	a0 91 ad 05 	lds	r26, 0x05AD
    197e:	b0 91 ae 05 	lds	r27, 0x05AE
    1982:	9c 01       	movw	r18, r24
    1984:	ad 01       	movw	r20, r26
    1986:	c8 01       	movw	r24, r16
    1988:	b7 01       	movw	r22, r14
    198a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	80 93 4f 06 	sts	0x064F, r24
    1996:	90 93 50 06 	sts	0x0650, r25
    199a:	a0 93 51 06 	sts	0x0651, r26
    199e:	b0 93 52 06 	sts	0x0652, r27

  // LM61 temp sensors report 600 mv + 10 mv/C
  // Convert so 0=0C, 1=1C
  if ((bal_tickno & 0x0f)==0) {
    19a2:	83 2d       	mov	r24, r3
    19a4:	99 27       	eor	r25, r25
    19a6:	8f 70       	andi	r24, 0x0F	; 15
    19a8:	90 70       	andi	r25, 0x00	; 0
    19aa:	89 2b       	or	r24, r25
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <balance+0x664>
    19ae:	d4 c0       	rjmp	.+424    	; 0x1b58 <balance+0x80c>
    bs.pwmtempa = (samples[ADCNO_PWMTEMPA]*sample_conv_unipolar - 0.120) * 5.0;
    19b0:	00 91 c7 05 	lds	r16, 0x05C7
    19b4:	10 91 c8 05 	lds	r17, 0x05C8
    19b8:	c8 01       	movw	r24, r16
    19ba:	aa 27       	eor	r26, r26
    19bc:	97 fd       	sbrc	r25, 7
    19be:	a0 95       	com	r26
    19c0:	ba 2f       	mov	r27, r26
    19c2:	bc 01       	movw	r22, r24
    19c4:	cd 01       	movw	r24, r26
    19c6:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__floatsisf>
    19ca:	17 ff       	sbrs	r17, 7
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <balance+0x686>
    19ce:	0c 94 96 15 	jmp	0x2b2c	; 0x2b2c <balance+0x17e0>
    19d2:	2a 89       	ldd	r18, Y+18	; 0x12
    19d4:	3b 89       	ldd	r19, Y+19	; 0x13
    19d6:	4c 89       	ldd	r20, Y+20	; 0x14
    19d8:	5d 89       	ldd	r21, Y+21	; 0x15
    19da:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	2f e8       	ldi	r18, 0x8F	; 143
    19e4:	32 ec       	ldi	r19, 0xC2	; 194
    19e6:	45 ef       	ldi	r20, 0xF5	; 245
    19e8:	5d e3       	ldi	r21, 0x3D	; 61
    19ea:	bc 01       	movw	r22, r24
    19ec:	cd 01       	movw	r24, r26
    19ee:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 ea       	ldi	r20, 0xA0	; 160
    19fc:	50 e4       	ldi	r21, 0x40	; 64
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	80 93 cb 06 	sts	0x06CB, r24
    1a0e:	90 93 cc 06 	sts	0x06CC, r25
    1a12:	a0 93 cd 06 	sts	0x06CD, r26
    1a16:	b0 93 ce 06 	sts	0x06CE, r27
    bs.pwmtempb = (samples[ADCNO_PWMTEMPB]*sample_conv_unipolar - 0.120) * 5.0;
    1a1a:	00 91 c9 05 	lds	r16, 0x05C9
    1a1e:	10 91 ca 05 	lds	r17, 0x05CA
    1a22:	c8 01       	movw	r24, r16
    1a24:	aa 27       	eor	r26, r26
    1a26:	97 fd       	sbrc	r25, 7
    1a28:	a0 95       	com	r26
    1a2a:	ba 2f       	mov	r27, r26
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	cd 01       	movw	r24, r26
    1a30:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__floatsisf>
    1a34:	17 ff       	sbrs	r17, 7
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <balance+0x6f0>
    1a38:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <balance+0x197c>
    1a3c:	2a 89       	ldd	r18, Y+18	; 0x12
    1a3e:	3b 89       	ldd	r19, Y+19	; 0x13
    1a40:	4c 89       	ldd	r20, Y+20	; 0x14
    1a42:	5d 89       	ldd	r21, Y+21	; 0x15
    1a44:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	2f e8       	ldi	r18, 0x8F	; 143
    1a4e:	32 ec       	ldi	r19, 0xC2	; 194
    1a50:	45 ef       	ldi	r20, 0xF5	; 245
    1a52:	5d e3       	ldi	r21, 0x3D	; 61
    1a54:	bc 01       	movw	r22, r24
    1a56:	cd 01       	movw	r24, r26
    1a58:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 ea       	ldi	r20, 0xA0	; 160
    1a66:	50 e4       	ldi	r21, 0x40	; 64
    1a68:	bc 01       	movw	r22, r24
    1a6a:	cd 01       	movw	r24, r26
    1a6c:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	80 93 cf 06 	sts	0x06CF, r24
    1a78:	90 93 d0 06 	sts	0x06D0, r25
    1a7c:	a0 93 d1 06 	sts	0x06D1, r26
    1a80:	b0 93 d2 06 	sts	0x06D2, r27
    bs.pwmtempc = (samples[ADCNO_PWMTEMPC]*sample_conv_unipolar - 0.120) * 5.0;
    1a84:	00 91 cb 05 	lds	r16, 0x05CB
    1a88:	10 91 cc 05 	lds	r17, 0x05CC
    1a8c:	c8 01       	movw	r24, r16
    1a8e:	aa 27       	eor	r26, r26
    1a90:	97 fd       	sbrc	r25, 7
    1a92:	a0 95       	com	r26
    1a94:	ba 2f       	mov	r27, r26
    1a96:	bc 01       	movw	r22, r24
    1a98:	cd 01       	movw	r24, r26
    1a9a:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__floatsisf>
    1a9e:	17 ff       	sbrs	r17, 7
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <balance+0x75a>
    1aa2:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <balance+0x196c>
    1aa6:	2a 89       	ldd	r18, Y+18	; 0x12
    1aa8:	3b 89       	ldd	r19, Y+19	; 0x13
    1aaa:	4c 89       	ldd	r20, Y+20	; 0x14
    1aac:	5d 89       	ldd	r21, Y+21	; 0x15
    1aae:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	2f e8       	ldi	r18, 0x8F	; 143
    1ab8:	32 ec       	ldi	r19, 0xC2	; 194
    1aba:	45 ef       	ldi	r20, 0xF5	; 245
    1abc:	5d e3       	ldi	r21, 0x3D	; 61
    1abe:	bc 01       	movw	r22, r24
    1ac0:	cd 01       	movw	r24, r26
    1ac2:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 ea       	ldi	r20, 0xA0	; 160
    1ad0:	50 e4       	ldi	r21, 0x40	; 64
    1ad2:	bc 01       	movw	r22, r24
    1ad4:	cd 01       	movw	r24, r26
    1ad6:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	80 93 d3 06 	sts	0x06D3, r24
    1ae2:	90 93 d4 06 	sts	0x06D4, r25
    1ae6:	a0 93 d5 06 	sts	0x06D5, r26
    1aea:	b0 93 d6 06 	sts	0x06D6, r27
    bs.pwmtempd = (samples[ADCNO_PWMTEMPD]*sample_conv_unipolar - 0.120) * 5.0;
    1aee:	00 91 cd 05 	lds	r16, 0x05CD
    1af2:	10 91 ce 05 	lds	r17, 0x05CE
    1af6:	c8 01       	movw	r24, r16
    1af8:	aa 27       	eor	r26, r26
    1afa:	97 fd       	sbrc	r25, 7
    1afc:	a0 95       	com	r26
    1afe:	ba 2f       	mov	r27, r26
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <__floatsisf>
    1b08:	17 ff       	sbrs	r17, 7
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <balance+0x7c4>
    1b0c:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <balance+0x195c>
    1b10:	2a 89       	ldd	r18, Y+18	; 0x12
    1b12:	3b 89       	ldd	r19, Y+19	; 0x13
    1b14:	4c 89       	ldd	r20, Y+20	; 0x14
    1b16:	5d 89       	ldd	r21, Y+21	; 0x15
    1b18:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	2f e8       	ldi	r18, 0x8F	; 143
    1b22:	32 ec       	ldi	r19, 0xC2	; 194
    1b24:	45 ef       	ldi	r20, 0xF5	; 245
    1b26:	5d e3       	ldi	r21, 0x3D	; 61
    1b28:	bc 01       	movw	r22, r24
    1b2a:	cd 01       	movw	r24, r26
    1b2c:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 ea       	ldi	r20, 0xA0	; 160
    1b3a:	50 e4       	ldi	r21, 0x40	; 64
    1b3c:	bc 01       	movw	r22, r24
    1b3e:	cd 01       	movw	r24, r26
    1b40:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	80 93 d7 06 	sts	0x06D7, r24
    1b4c:	90 93 d8 06 	sts	0x06D8, r25
    1b50:	a0 93 d9 06 	sts	0x06D9, r26
    1b54:	b0 93 da 06 	sts	0x06DA, r27
  }

#elif defined(__BAL4__)
  bs.bat_voltage = samples[ADCNO_BAT_VOLTAGE]*sample_conv_unipolar * bh.bat_voltage_mult;
  bs.pitch_rate = (samples[ADCNO_PITCH_RATE]*sample_conv_bipolar - 1.0) * 3.491; // convert to 12.5 mv/deg/sec to radians/sec
  bs.knob1 = samples[ADCNO_KNOB1]*sample_conv_unipolar;
  bs.knob2 = samples[ADCNO_KNOB2]*sample_conv_unipolar;
  bs.knob3 = samples[ADCNO_KNOB3]*sample_conv_unipolar;
  bs.lmis = (samples[ADCNO_LMIS]*sample_conv_bipolar - 1.0) * 0.625; // Units are 100A
  bs.batis = (samples[ADCNO_BATIS]*sample_conv_bipolar - 1.0) * 0.625;

  // ADXL0311 accelerometer, with a gain of 3.
  // Convert from 312*3 mv/G into Gs
  bs.fwd_accel = (samples[ADCNO_FWD_ACCEL]*sample_conv_bipolar - 1.0) * 2.67 + bh.fwd_accel_bias;  

#else
#error "No hw defined"
#endif

  if (bs.mode==MODE_INITIAL) {
    1b58:	10 91 f3 06 	lds	r17, 0x06F3
    1b5c:	11 23       	and	r17, r17
    1b5e:	f1 f4       	brne	.+60     	; 0x1b9c <balance+0x850>
    if (0) {
    }
    else if (0 && bs.knob2 > 0.9) {
      bs.mode=MODE_HWADJ;
      update_hwadj(1.0);
    }
    else if (0 && bs.knob2 < 0.1) {
      bs.mode=MODE_TEST_MOTORS;
    }
    else {
      if (bs.fwd_accel < 0.2 && bs.fwd_accel > -0.2) {
    1b60:	2d ec       	ldi	r18, 0xCD	; 205
    1b62:	3c ec       	ldi	r19, 0xCC	; 204
    1b64:	4c e4       	ldi	r20, 0x4C	; 76
    1b66:	5e e3       	ldi	r21, 0x3E	; 62
    1b68:	6d 81       	ldd	r22, Y+5	; 0x05
    1b6a:	7e 81       	ldd	r23, Y+6	; 0x06
    1b6c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b6e:	98 85       	ldd	r25, Y+8	; 0x08
    1b70:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
    1b74:	88 23       	and	r24, r24
    1b76:	0c f0       	brlt	.+2      	; 0x1b7a <balance+0x82e>
    1b78:	dc c2       	rjmp	.+1464   	; 0x2132 <balance+0xde6>
    1b7a:	2d ec       	ldi	r18, 0xCD	; 205
    1b7c:	3c ec       	ldi	r19, 0xCC	; 204
    1b7e:	4c e4       	ldi	r20, 0x4C	; 76
    1b80:	5e eb       	ldi	r21, 0xBE	; 190
    1b82:	6d 81       	ldd	r22, Y+5	; 0x05
    1b84:	7e 81       	ldd	r23, Y+6	; 0x06
    1b86:	8f 81       	ldd	r24, Y+7	; 0x07
    1b88:	98 85       	ldd	r25, Y+8	; 0x08
    1b8a:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
    1b8e:	18 16       	cp	r1, r24
    1b90:	0c f0       	brlt	.+2      	; 0x1b94 <balance+0x848>
    1b92:	cf c2       	rjmp	.+1438   	; 0x2132 <balance+0xde6>
        bs.mode=MODE_RUNNING;
    1b94:	11 e0       	ldi	r17, 0x01	; 1
    1b96:	10 93 f3 06 	sts	0x06F3, r17
    1b9a:	0b c0       	rjmp	.+22     	; 0x1bb2 <balance+0x866>
      } else {
        bs.mode=MODE_TIPPED;
        bs.mode_reason=1;
      }
    }
  }

  if (bs.mode==MODE_TEST_MOTORS) {
    1b9c:	15 30       	cpi	r17, 0x05	; 5
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <balance+0x856>
    1ba0:	cd c7       	rjmp	.+3994   	; 0x2b3c <balance+0x17f0>

    bs.left_pwm = fmin(0.3, bs.realtime / 20.0);
#ifdef DO_STEERING
    bs.right_pwm = bs.left_pwm*0.5;
    set_motors(bs.left_pwm, bs.right_pwm);
#else
    set_motors(bs.left_pwm);
#endif

    return;
  }
  else if (bs.mode==MODE_HWADJ_DONE) {
    1ba2:	14 30       	cpi	r17, 0x04	; 4
    1ba4:	11 f4       	brne	.+4      	; 0x1baa <balance+0x85e>
    1ba6:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <balance+0x1958>
    set1_beeper();
    return;
  }
  else if (bs.mode==MODE_HWADJ) {
    1baa:	13 30       	cpi	r17, 0x03	; 3
    1bac:	11 f4       	brne	.+4      	; 0x1bb2 <balance+0x866>
    1bae:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <balance+0x1bd4>
    update_hwadj(0.01);
    if (bs.realtime > 2.0) {
      set0_beeper();
      cli();
      eeprom_write_block(&bh, 0, sizeof(bh));
      sei(); // Ugh. eeprom_write does cli but no corresponding sei.
      bs.mode=MODE_HWADJ_DONE;
    }
    return;
  }
  
  bs.fwd_accel_net = bs.fwd_accel + bs.balance_torque*bc.fwd_accel_coupling;
    1bb2:	e0 90 a3 06 	lds	r14, 0x06A3
    1bb6:	f0 90 a4 06 	lds	r15, 0x06A4
    1bba:	00 91 a5 06 	lds	r16, 0x06A5
    1bbe:	10 91 a6 06 	lds	r17, 0x06A6
    1bc2:	80 91 23 06 	lds	r24, 0x0623
    1bc6:	90 91 24 06 	lds	r25, 0x0624
    1bca:	a0 91 25 06 	lds	r26, 0x0625
    1bce:	b0 91 26 06 	lds	r27, 0x0626
    1bd2:	9c 01       	movw	r18, r24
    1bd4:	ad 01       	movw	r20, r26
    1bd6:	c8 01       	movw	r24, r16
    1bd8:	b7 01       	movw	r22, r14
    1bda:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	9c 01       	movw	r18, r24
    1be4:	ad 01       	movw	r20, r26
    1be6:	6d 81       	ldd	r22, Y+5	; 0x05
    1be8:	7e 81       	ldd	r23, Y+6	; 0x06
    1bea:	8f 81       	ldd	r24, Y+7	; 0x07
    1bec:	98 85       	ldd	r25, Y+8	; 0x08
    1bee:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	80 93 3f 06 	sts	0x063F, r24
    1bfa:	90 93 40 06 	sts	0x0640, r25
    1bfe:	a0 93 41 06 	sts	0x0641, r26
    1c02:	b0 93 42 06 	sts	0x0642, r27

  gyro_sample_rate(&bs.pitch_filter, bs.pitch_rate, bs.interval);
    1c06:	00 91 2f 06 	lds	r16, 0x062F
    1c0a:	10 91 30 06 	lds	r17, 0x0630
    1c0e:	20 91 31 06 	lds	r18, 0x0631
    1c12:	30 91 32 06 	lds	r19, 0x0632
    1c16:	40 91 37 06 	lds	r20, 0x0637
    1c1a:	50 91 38 06 	lds	r21, 0x0638
    1c1e:	60 91 39 06 	lds	r22, 0x0639
    1c22:	70 91 3a 06 	lds	r23, 0x063A
    1c26:	8b ed       	ldi	r24, 0xDB	; 219
    1c28:	96 e0       	ldi	r25, 0x06	; 6
    1c2a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <gyro_sample_rate>
  gyro_sample_angle(&bs.pitch_filter, bs.fwd_accel_net, bs.interval);
    1c2e:	00 91 2f 06 	lds	r16, 0x062F
    1c32:	10 91 30 06 	lds	r17, 0x0630
    1c36:	20 91 31 06 	lds	r18, 0x0631
    1c3a:	30 91 32 06 	lds	r19, 0x0632
    1c3e:	40 91 3f 06 	lds	r20, 0x063F
    1c42:	50 91 40 06 	lds	r21, 0x0640
    1c46:	60 91 41 06 	lds	r22, 0x0641
    1c4a:	70 91 42 06 	lds	r23, 0x0642
    1c4e:	8b ed       	ldi	r24, 0xDB	; 219
    1c50:	96 e0       	ldi	r25, 0x06	; 6
    1c52:	0e 94 39 04 	call	0x872	; 0x872 <gyro_sample_angle>

  bs.gain_reduction=1.0;
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	a0 e8       	ldi	r26, 0x80	; 128
    1c5c:	bf e3       	ldi	r27, 0x3F	; 63
    1c5e:	80 93 b3 06 	sts	0x06B3, r24
    1c62:	90 93 b4 06 	sts	0x06B4, r25
    1c66:	a0 93 b5 06 	sts	0x06B5, r26
    1c6a:	b0 93 b6 06 	sts	0x06B6, r27

#ifdef DO_DRIVE
  if (bs.drive_age < 1.0) {
    bs.drive_age += bs.interval;

    lpf_update(&bs.drive_tilt, 0.3, bs.interval, 2.0 * (bs.drive.speed_targ - bs.cur_speed_est) + 0.1);
    lpf_update(&bs.drive_steer, 0.3, bs.interval, bs.drive.steering_targ); // wrong
    bs.gain_reduction = 0.2;
  }
  else if (bs.drive_age < 2.0) {
    bs.drive_age += bs.interval;

    lpf_update(&bs.drive_steer, 0.3, bs.interval, 0.0);
    lpf_update(&bs.drive_tilt, 0.3, bs.interval, 0.0);

    bs.gain_reduction = 0.4;
  } 
  else {
    bs.drive_tilt=0.0;
    bs.drive_steer=0.0;
  }
#endif


  lpf_update(&bs.lpf_angle, 0.04, bs.interval, bs.pitch_filter.angle
    1c6e:	c0 90 db 06 	lds	r12, 0x06DB
    1c72:	d0 90 dc 06 	lds	r13, 0x06DC
    1c76:	e0 90 dd 06 	lds	r14, 0x06DD
    1c7a:	f0 90 de 06 	lds	r15, 0x06DE
    1c7e:	00 91 2f 06 	lds	r16, 0x062F
    1c82:	10 91 30 06 	lds	r17, 0x0630
    1c86:	20 91 31 06 	lds	r18, 0x0631
    1c8a:	30 91 32 06 	lds	r19, 0x0632
    1c8e:	4a e0       	ldi	r20, 0x0A	; 10
    1c90:	57 ed       	ldi	r21, 0xD7	; 215
    1c92:	63 e2       	ldi	r22, 0x23	; 35
    1c94:	7d e3       	ldi	r23, 0x3D	; 61
    1c96:	83 e7       	ldi	r24, 0x73	; 115
    1c98:	96 e0       	ldi	r25, 0x06	; 6
    1c9a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <lpf_update>
#ifdef DO_DRIVE
             + bs.drive_tilt
#endif
             );
#ifdef __BAL4__
  lpf_update(&bs.lpf_angrate, 0.050, bs.interval, bs.pitch_filter.rate);
#else
  lpf_update(&bs.lpf_angrate, 0.015, bs.interval, bs.pitch_filter.rate);
    1c9e:	c0 90 e3 06 	lds	r12, 0x06E3
    1ca2:	d0 90 e4 06 	lds	r13, 0x06E4
    1ca6:	e0 90 e5 06 	lds	r14, 0x06E5
    1caa:	f0 90 e6 06 	lds	r15, 0x06E6
    1cae:	00 91 2f 06 	lds	r16, 0x062F
    1cb2:	10 91 30 06 	lds	r17, 0x0630
    1cb6:	20 91 31 06 	lds	r18, 0x0631
    1cba:	30 91 32 06 	lds	r19, 0x0632
    1cbe:	4f e8       	ldi	r20, 0x8F	; 143
    1cc0:	52 ec       	ldi	r21, 0xC2	; 194
    1cc2:	65 e7       	ldi	r22, 0x75	; 117
    1cc4:	7c e3       	ldi	r23, 0x3C	; 60
    1cc6:	8b e7       	ldi	r24, 0x7B	; 123
    1cc8:	96 e0       	ldi	r25, 0x06	; 6
    1cca:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <lpf_update>
#endif
#ifdef DO_STEERING
  lpf_update(&bs.lpf_steering, 0.1, bs.interval, bs.steering 
    1cce:	c0 90 43 06 	lds	r12, 0x0643
    1cd2:	d0 90 44 06 	lds	r13, 0x0644
    1cd6:	e0 90 45 06 	lds	r14, 0x0645
    1cda:	f0 90 46 06 	lds	r15, 0x0646
    1cde:	00 91 2f 06 	lds	r16, 0x062F
    1ce2:	10 91 30 06 	lds	r17, 0x0630
    1ce6:	20 91 31 06 	lds	r18, 0x0631
    1cea:	30 91 32 06 	lds	r19, 0x0632
    1cee:	4d ec       	ldi	r20, 0xCD	; 205
    1cf0:	5c ec       	ldi	r21, 0xCC	; 204
    1cf2:	6c ec       	ldi	r22, 0xCC	; 204
    1cf4:	7d e3       	ldi	r23, 0x3D	; 61
    1cf6:	83 e8       	ldi	r24, 0x83	; 131
    1cf8:	96 e0       	ldi	r25, 0x06	; 6
    1cfa:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <lpf_update>
#ifdef DO_DRIVE
             + bs.drive_steer
#endif
             );

  lpf_update(&bs.lpf_yaw_rate, 0.05, bs.interval, bs.yaw_rate);
    1cfe:	c0 90 47 06 	lds	r12, 0x0647
    1d02:	d0 90 48 06 	lds	r13, 0x0648
    1d06:	e0 90 49 06 	lds	r14, 0x0649
    1d0a:	f0 90 4a 06 	lds	r15, 0x064A
    1d0e:	00 91 2f 06 	lds	r16, 0x062F
    1d12:	10 91 30 06 	lds	r17, 0x0630
    1d16:	20 91 31 06 	lds	r18, 0x0631
    1d1a:	30 91 32 06 	lds	r19, 0x0632
    1d1e:	4d ec       	ldi	r20, 0xCD	; 205
    1d20:	5c ec       	ldi	r21, 0xCC	; 204
    1d22:	6c e4       	ldi	r22, 0x4C	; 76
    1d24:	7d e3       	ldi	r23, 0x3D	; 61
    1d26:	87 e8       	ldi	r24, 0x87	; 135
    1d28:	96 e0       	ldi	r25, 0x06	; 6
    1d2a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <lpf_update>

  /* Since we can dial down the speed limit, we don't want this changing too fast */
  lpf_update(&bs.lpf_knob1, 0.5, bs.interval, bs.knob1);
    1d2e:	c0 90 53 06 	lds	r12, 0x0653
    1d32:	d0 90 54 06 	lds	r13, 0x0654
    1d36:	e0 90 55 06 	lds	r14, 0x0655
    1d3a:	f0 90 56 06 	lds	r15, 0x0656
    1d3e:	00 91 2f 06 	lds	r16, 0x062F
    1d42:	10 91 30 06 	lds	r17, 0x0630
    1d46:	20 91 31 06 	lds	r18, 0x0631
    1d4a:	30 91 32 06 	lds	r19, 0x0632
    1d4e:	40 e0       	ldi	r20, 0x00	; 0
    1d50:	50 e0       	ldi	r21, 0x00	; 0
    1d52:	60 e0       	ldi	r22, 0x00	; 0
    1d54:	7f e3       	ldi	r23, 0x3F	; 63
    1d56:	8f e8       	ldi	r24, 0x8F	; 143
    1d58:	96 e0       	ldi	r25, 0x06	; 6
    1d5a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <lpf_update>

#endif

  bs.cur_cg_speed_est = bs.cur_speed_est;
    1d5e:	80 91 a7 06 	lds	r24, 0x06A7
    1d62:	90 91 a8 06 	lds	r25, 0x06A8
    1d66:	a0 91 a9 06 	lds	r26, 0x06A9
    1d6a:	b0 91 aa 06 	lds	r27, 0x06AA
    1d6e:	8a a3       	std	Y+34, r24	; 0x22
    1d70:	9b a3       	std	Y+35, r25	; 0x23
    1d72:	ac a3       	std	Y+36, r26	; 0x24
    1d74:	bd a3       	std	Y+37, r27	; 0x25
    1d76:	80 93 ab 06 	sts	0x06AB, r24
    1d7a:	90 93 ac 06 	sts	0x06AC, r25
    1d7e:	a0 93 ad 06 	sts	0x06AD, r26
    1d82:	b0 93 ae 06 	sts	0x06AE, r27

  bs.overspeed=0.0;
    1d86:	0f 2e       	mov	r0, r31
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	2f 2e       	mov	r2, r31
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	3f 2e       	mov	r3, r31
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	4f 2e       	mov	r4, r31
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	5f 2e       	mov	r5, r31
    1d98:	f0 2d       	mov	r31, r0

#ifdef DO_BAT
  float fsl = fmin(bc.fwd_speed_lim, bs.bat_speed_lim);
  float rsl = fmin(bc.rev_speed_lim, bs.bat_speed_lim);
#else
  float fsl = bc.fwd_speed_lim;
    1d9a:	a0 90 f7 05 	lds	r10, 0x05F7
    1d9e:	b0 90 f8 05 	lds	r11, 0x05F8
    1da2:	c0 90 f9 05 	lds	r12, 0x05F9
    1da6:	d0 90 fa 05 	lds	r13, 0x05FA
  float rsl = bc.rev_speed_lim;
    1daa:	60 90 fb 05 	lds	r6, 0x05FB
    1dae:	70 90 fc 05 	lds	r7, 0x05FC
    1db2:	80 90 fd 05 	lds	r8, 0x05FD
    1db6:	90 90 fe 05 	lds	r9, 0x05FE
#endif

#if !defined(__UNICYCLE2__)
  // Adjust speed limits down to 25% of maximum with knob
  fsl *= (0.5 + 0.5*bs.lpf_knob1);
    1dba:	20 91 8f 06 	lds	r18, 0x068F
    1dbe:	30 91 90 06 	lds	r19, 0x0690
    1dc2:	40 91 91 06 	lds	r20, 0x0691
    1dc6:	50 91 92 06 	lds	r21, 0x0692
    1dca:	2a 8f       	std	Y+26, r18	; 0x1a
    1dcc:	3b 8f       	std	Y+27, r19	; 0x1b
    1dce:	4c 8f       	std	Y+28, r20	; 0x1c
    1dd0:	5d 8f       	std	Y+29, r21	; 0x1d
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e0       	ldi	r20, 0x00	; 0
    1dd8:	5f e3       	ldi	r21, 0x3F	; 63
    1dda:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ddc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1dde:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1de0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1de2:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e0       	ldi	r20, 0x00	; 0
    1df0:	5f e3       	ldi	r21, 0x3F	; 63
    1df2:	bc 01       	movw	r22, r24
    1df4:	cd 01       	movw	r24, r26
    1df6:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    1dfa:	7b 01       	movw	r14, r22
    1dfc:	8c 01       	movw	r16, r24
    1dfe:	9b 01       	movw	r18, r22
    1e00:	ac 01       	movw	r20, r24
    1e02:	c6 01       	movw	r24, r12
    1e04:	b5 01       	movw	r22, r10
    1e06:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1e0a:	5b 01       	movw	r10, r22
    1e0c:	6c 01       	movw	r12, r24
  rsl *= (0.5 + 0.5*bs.lpf_knob1);
    1e0e:	a8 01       	movw	r20, r16
    1e10:	97 01       	movw	r18, r14
    1e12:	c4 01       	movw	r24, r8
    1e14:	b3 01       	movw	r22, r6
    1e16:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1e1a:	3b 01       	movw	r6, r22
    1e1c:	4c 01       	movw	r8, r24
#endif

  /* Check if we're over speed and arrange to tilt back. This is a bit convoluted. */
  if (bs.cur_cg_speed_est > fsl) {
    1e1e:	a6 01       	movw	r20, r12
    1e20:	95 01       	movw	r18, r10
    1e22:	6a a1       	ldd	r22, Y+34	; 0x22
    1e24:	7b a1       	ldd	r23, Y+35	; 0x23
    1e26:	8c a1       	ldd	r24, Y+36	; 0x24
    1e28:	9d a1       	ldd	r25, Y+37	; 0x25
    1e2a:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
    1e2e:	18 16       	cp	r1, r24
    1e30:	0c f0       	brlt	.+2      	; 0x1e34 <balance+0xae8>
    1e32:	55 c5       	rjmp	.+2730   	; 0x28de <balance+0x1592>
    bs.overspeed = (bs.cur_cg_speed_est - fsl); // positive
    1e34:	a6 01       	movw	r20, r12
    1e36:	95 01       	movw	r18, r10
    1e38:	6a a1       	ldd	r22, Y+34	; 0x22
    1e3a:	7b a1       	ldd	r23, Y+35	; 0x23
    1e3c:	8c a1       	ldd	r24, Y+36	; 0x24
    1e3e:	9d a1       	ldd	r25, Y+37	; 0x25
    1e40:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    1e44:	1b 01       	movw	r2, r22
    1e46:	2c 01       	movw	r4, r24
    1e48:	60 93 9b 06 	sts	0x069B, r22
    1e4c:	70 93 9c 06 	sts	0x069C, r23
    1e50:	80 93 9d 06 	sts	0x069D, r24
    1e54:	90 93 9e 06 	sts	0x069E, r25
    bs.overspeed_integral += 2.0 * bs.interval * fmax(0.0, bs.overspeed-0.08);
    1e58:	2a e0       	ldi	r18, 0x0A	; 10
    1e5a:	37 ed       	ldi	r19, 0xD7	; 215
    1e5c:	43 ea       	ldi	r20, 0xA3	; 163
    1e5e:	5d e3       	ldi	r21, 0x3D	; 61
    1e60:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	9c 01       	movw	r18, r24
    1e6a:	ad 01       	movw	r20, r26
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	70 e0       	ldi	r23, 0x00	; 0
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	0e 94 61 03 	call	0x6c2	; 0x6c2 <fmax>
  }
  else if (bs.cur_cg_speed_est < -rsl) {
    bs.overspeed = (bs.cur_cg_speed_est + rsl); // negative
    bs.overspeed_integral += 2.0 * bs.interval * fmin(0.0, bs.overspeed+0.08);
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	e0 90 2f 06 	lds	r14, 0x062F
    1e80:	f0 90 30 06 	lds	r15, 0x0630
    1e84:	00 91 31 06 	lds	r16, 0x0631
    1e88:	10 91 32 06 	lds	r17, 0x0632
    1e8c:	9c 01       	movw	r18, r24
    1e8e:	ad 01       	movw	r20, r26
    1e90:	c8 01       	movw	r24, r16
    1e92:	b7 01       	movw	r22, r14
    1e94:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	9c 01       	movw	r18, r24
    1e9e:	ad 01       	movw	r20, r26
    1ea0:	bc 01       	movw	r22, r24
    1ea2:	cd 01       	movw	r24, r26
    1ea4:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	e0 90 9f 06 	lds	r14, 0x069F
    1eb0:	f0 90 a0 06 	lds	r15, 0x06A0
    1eb4:	00 91 a1 06 	lds	r16, 0x06A1
    1eb8:	10 91 a2 06 	lds	r17, 0x06A2
    1ebc:	9c 01       	movw	r18, r24
    1ebe:	ad 01       	movw	r20, r26
    1ec0:	c8 01       	movw	r24, r16
    1ec2:	b7 01       	movw	r22, r14
    1ec4:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    1ec8:	7b 01       	movw	r14, r22
    1eca:	8c 01       	movw	r16, r24
    1ecc:	e0 92 9f 06 	sts	0x069F, r14
    1ed0:	f0 92 a0 06 	sts	0x06A0, r15
    1ed4:	00 93 a1 06 	sts	0x06A1, r16
    1ed8:	10 93 a2 06 	sts	0x06A2, r17
  }
  else if (bs.overspeed_integral>0.0) {
    float not_overspeed = fmin(0.0, (bs.cur_cg_speed_est - fsl)); // should be negative
    bs.overspeed_integral += 4.0 * bs.interval * fmin(-0.02, not_overspeed);
    if (bs.overspeed_integral<0.0) bs.overspeed_integral=0.0;
  }
  else if (bs.overspeed_integral<0.0) {
    float not_overspeed = fmax(0.0, (bs.cur_cg_speed_est + rsl)); // should be positive
    bs.overspeed_integral += 4.0 * bs.interval * fmax(0.02, not_overspeed);
    if (bs.overspeed_integral>0.0) bs.overspeed_integral=0.0;
  }
  bs.overspeed_integral=flim(bs.overspeed_integral, -0.5, 0.5);
    1edc:	0f 2e       	mov	r0, r31
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	ef 2e       	mov	r14, r31
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	ff 2e       	mov	r15, r31
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	0f 2f       	mov	r16, r31
    1eea:	ff e3       	ldi	r31, 0x3F	; 63
    1eec:	1f 2f       	mov	r17, r31
    1eee:	f0 2d       	mov	r31, r0
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e0       	ldi	r20, 0x00	; 0
    1ef6:	5f eb       	ldi	r21, 0xBF	; 191
    1ef8:	60 91 9f 06 	lds	r22, 0x069F
    1efc:	70 91 a0 06 	lds	r23, 0x06A0
    1f00:	80 91 a1 06 	lds	r24, 0x06A1
    1f04:	90 91 a2 06 	lds	r25, 0x06A2
    1f08:	0e 94 a1 03 	call	0x742	; 0x742 <flim>
    1f0c:	5b 01       	movw	r10, r22
    1f0e:	6c 01       	movw	r12, r24
    1f10:	60 93 9f 06 	sts	0x069F, r22
    1f14:	70 93 a0 06 	sts	0x06A0, r23
    1f18:	80 93 a1 06 	sts	0x06A1, r24
    1f1c:	90 93 a2 06 	sts	0x06A2, r25

  bs.stick_shake=0.0;
  if (bs.cur_cg_speed_est < -bc.rev_stick_shake_speed_lim*(0.5+0.5*bs.lpf_knob1)) {
    1f20:	80 91 03 06 	lds	r24, 0x0603
    1f24:	90 91 04 06 	lds	r25, 0x0604
    1f28:	a0 91 05 06 	lds	r26, 0x0605
    1f2c:	b0 91 06 06 	lds	r27, 0x0606
    1f30:	7c 01       	movw	r14, r24
    1f32:	8d 01       	movw	r16, r26
    1f34:	17 fb       	bst	r17, 7
    1f36:	10 95       	com	r17
    1f38:	17 f9       	bld	r17, 7
    1f3a:	10 95       	com	r17
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	40 e0       	ldi	r20, 0x00	; 0
    1f42:	5f e3       	ldi	r21, 0x3F	; 63
    1f44:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f46:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f48:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f4a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f4c:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	5f e3       	ldi	r21, 0x3F	; 63
    1f5c:	bc 01       	movw	r22, r24
    1f5e:	cd 01       	movw	r24, r26
    1f60:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	9c 01       	movw	r18, r24
    1f6a:	ad 01       	movw	r20, r26
    1f6c:	c8 01       	movw	r24, r16
    1f6e:	b7 01       	movw	r22, r14
    1f70:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9c 01       	movw	r18, r24
    1f7a:	ad 01       	movw	r20, r26
    1f7c:	6a a1       	ldd	r22, Y+34	; 0x22
    1f7e:	7b a1       	ldd	r23, Y+35	; 0x23
    1f80:	8c a1       	ldd	r24, Y+36	; 0x24
    1f82:	9d a1       	ldd	r25, Y+37	; 0x25
    1f84:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
    1f88:	88 23       	and	r24, r24
    1f8a:	0c f0       	brlt	.+2      	; 0x1f8e <balance+0xc42>
    1f8c:	23 c5       	rjmp	.+2630   	; 0x29d4 <balance+0x1688>
    bs.stick_shake=0.03;
    1f8e:	8f e8       	ldi	r24, 0x8F	; 143
    1f90:	92 ec       	ldi	r25, 0xC2	; 194
    1f92:	a5 ef       	ldi	r26, 0xF5	; 245
    1f94:	bc e3       	ldi	r27, 0x3C	; 60
    1f96:	80 93 af 06 	sts	0x06AF, r24
    1f9a:	90 93 b0 06 	sts	0x06B0, r25
    1f9e:	a0 93 b1 06 	sts	0x06B1, r26
    1fa2:	b0 93 b2 06 	sts	0x06B2, r27
  }

  /* Add the tilt to the measured angle */
  bs.lpf_angle_corrected = bs.lpf_angle + flim(0.9*bs.overspeed + bs.overspeed_integral, -0.4, 0.4);
    1fa6:	26 e6       	ldi	r18, 0x66	; 102
    1fa8:	36 e6       	ldi	r19, 0x66	; 102
    1faa:	46 e6       	ldi	r20, 0x66	; 102
    1fac:	5f e3       	ldi	r21, 0x3F	; 63
    1fae:	c2 01       	movw	r24, r4
    1fb0:	b1 01       	movw	r22, r2
    1fb2:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	a6 01       	movw	r20, r12
    1fbc:	95 01       	movw	r18, r10
    1fbe:	bc 01       	movw	r22, r24
    1fc0:	cd 01       	movw	r24, r26
    1fc2:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	0f 2e       	mov	r0, r31
    1fcc:	fd ec       	ldi	r31, 0xCD	; 205
    1fce:	ef 2e       	mov	r14, r31
    1fd0:	fc ec       	ldi	r31, 0xCC	; 204
    1fd2:	ff 2e       	mov	r15, r31
    1fd4:	fc ec       	ldi	r31, 0xCC	; 204
    1fd6:	0f 2f       	mov	r16, r31
    1fd8:	fe e3       	ldi	r31, 0x3E	; 62
    1fda:	1f 2f       	mov	r17, r31
    1fdc:	f0 2d       	mov	r31, r0
    1fde:	2d ec       	ldi	r18, 0xCD	; 205
    1fe0:	3c ec       	ldi	r19, 0xCC	; 204
    1fe2:	4c ec       	ldi	r20, 0xCC	; 204
    1fe4:	5e eb       	ldi	r21, 0xBE	; 190
    1fe6:	bc 01       	movw	r22, r24
    1fe8:	cd 01       	movw	r24, r26
    1fea:	0e 94 a1 03 	call	0x742	; 0x742 <flim>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	a0 90 73 06 	lds	r10, 0x0673
    1ff6:	b0 90 74 06 	lds	r11, 0x0674
    1ffa:	c0 90 75 06 	lds	r12, 0x0675
    1ffe:	d0 90 76 06 	lds	r13, 0x0676
    2002:	9c 01       	movw	r18, r24
    2004:	ad 01       	movw	r20, r26
    2006:	c6 01       	movw	r24, r12
    2008:	b5 01       	movw	r22, r10
    200a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    200e:	3b 01       	movw	r6, r22
    2010:	4c 01       	movw	r8, r24
    2012:	60 93 77 06 	sts	0x0677, r22
    2016:	70 93 78 06 	sts	0x0678, r23
    201a:	80 93 79 06 	sts	0x0679, r24
    201e:	90 93 7a 06 	sts	0x067A, r25

  /* Only do the integral term once we're stable */
  if (bs.softstart==1.0) {
    2022:	20 90 93 06 	lds	r2, 0x0693
    2026:	30 90 94 06 	lds	r3, 0x0694
    202a:	40 90 95 06 	lds	r4, 0x0695
    202e:	50 90 96 06 	lds	r5, 0x0696
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e8       	ldi	r20, 0x80	; 128
    2038:	5f e3       	ldi	r21, 0x3F	; 63
    203a:	c2 01       	movw	r24, r4
    203c:	b1 01       	movw	r22, r2
    203e:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
    2042:	88 23       	and	r24, r24
    2044:	09 f0       	breq	.+2      	; 0x2048 <balance+0xcfc>
    2046:	46 c0       	rjmp	.+140    	; 0x20d4 <balance+0xd88>
    bs.lpf_angintegral = flim(bs.lpf_angintegral + bs.lpf_angle_corrected*bs.interval * 4.0, -0.1, 0.1);
    2048:	80 91 2f 06 	lds	r24, 0x062F
    204c:	90 91 30 06 	lds	r25, 0x0630
    2050:	a0 91 31 06 	lds	r26, 0x0631
    2054:	b0 91 32 06 	lds	r27, 0x0632
    2058:	9c 01       	movw	r18, r24
    205a:	ad 01       	movw	r20, r26
    205c:	c4 01       	movw	r24, r8
    205e:	b3 01       	movw	r22, r6
    2060:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e8       	ldi	r20, 0x80	; 128
    206e:	50 e4       	ldi	r21, 0x40	; 64
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	e0 90 7f 06 	lds	r14, 0x067F
    2080:	f0 90 80 06 	lds	r15, 0x0680
    2084:	00 91 81 06 	lds	r16, 0x0681
    2088:	10 91 82 06 	lds	r17, 0x0682
    208c:	9c 01       	movw	r18, r24
    208e:	ad 01       	movw	r20, r26
    2090:	c8 01       	movw	r24, r16
    2092:	b7 01       	movw	r22, r14
    2094:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	0f 2e       	mov	r0, r31
    209e:	fd ec       	ldi	r31, 0xCD	; 205
    20a0:	ef 2e       	mov	r14, r31
    20a2:	fc ec       	ldi	r31, 0xCC	; 204
    20a4:	ff 2e       	mov	r15, r31
    20a6:	fc ec       	ldi	r31, 0xCC	; 204
    20a8:	0f 2f       	mov	r16, r31
    20aa:	fd e3       	ldi	r31, 0x3D	; 61
    20ac:	1f 2f       	mov	r17, r31
    20ae:	f0 2d       	mov	r31, r0
    20b0:	2d ec       	ldi	r18, 0xCD	; 205
    20b2:	3c ec       	ldi	r19, 0xCC	; 204
    20b4:	4c ec       	ldi	r20, 0xCC	; 204
    20b6:	5d eb       	ldi	r21, 0xBD	; 189
    20b8:	bc 01       	movw	r22, r24
    20ba:	cd 01       	movw	r24, r26
    20bc:	0e 94 a1 03 	call	0x742	; 0x742 <flim>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	80 93 7f 06 	sts	0x067F, r24
    20c8:	90 93 80 06 	sts	0x0680, r25
    20cc:	a0 93 81 06 	sts	0x0681, r26
    20d0:	b0 93 82 06 	sts	0x0682, r27
  }

  /* If we've tipped past 0.6 radians (45 degrees) abandon hope.
     This happens, for example, when the wheels slip on wet grass or snow and it falls over.
     It's better to give up than keep spinning the wheels trying to right ourselves.
     We probably can't recover anyway.
  */
  if (bs.mode!=MODE_TIPPED) {
    20d4:	10 91 f3 06 	lds	r17, 0x06F3
    20d8:	12 30       	cpi	r17, 0x02	; 2
    20da:	81 f0       	breq	.+32     	; 0x20fc <balance+0xdb0>
    if (bs.lpf_angle > 0.6) {
    20dc:	2a e9       	ldi	r18, 0x9A	; 154
    20de:	39 e9       	ldi	r19, 0x99	; 153
    20e0:	49 e1       	ldi	r20, 0x19	; 25
    20e2:	5f e3       	ldi	r21, 0x3F	; 63
    20e4:	c6 01       	movw	r24, r12
    20e6:	b5 01       	movw	r22, r10
    20e8:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
    20ec:	18 16       	cp	r1, r24
    20ee:	0c f0       	brlt	.+2      	; 0x20f2 <balance+0xda6>
    20f0:	76 c4       	rjmp	.+2284   	; 0x29de <balance+0x1692>
      bs.mode=MODE_TIPPED;
    20f2:	12 e0       	ldi	r17, 0x02	; 2
    20f4:	10 93 f3 06 	sts	0x06F3, r17
      bs.mode_reason=2;
    20f8:	10 93 f4 06 	sts	0x06F4, r17
    }
    else if (bs.lpf_angle < -0.6) {
      bs.mode=MODE_TIPPED;
      bs.mode_reason=3;
    }
  }

  /*
    Below this we can't count on enough voltage to keep ourselves or the PWM drives running.
  */
  if (bs.bat_voltage < 0.35) {
    20fc:	c0 90 33 06 	lds	r12, 0x0633
    2100:	d0 90 34 06 	lds	r13, 0x0634
    2104:	e0 90 35 06 	lds	r14, 0x0635
    2108:	f0 90 36 06 	lds	r15, 0x0636
    210c:	23 e3       	ldi	r18, 0x33	; 51
    210e:	33 e3       	ldi	r19, 0x33	; 51
    2110:	43 eb       	ldi	r20, 0xB3	; 179
    2112:	5e e3       	ldi	r21, 0x3E	; 62
    2114:	c7 01       	movw	r24, r14
    2116:	b6 01       	movw	r22, r12
    2118:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
    211c:	88 23       	and	r24, r24
    211e:	84 f4       	brge	.+32     	; 0x2140 <balance+0xdf4>
    bs.mode=MODE_TIPPED;
    2120:	12 e0       	ldi	r17, 0x02	; 2
    2122:	10 93 f3 06 	sts	0x06F3, r17
    bs.mode_reason=4;
    2126:	84 e0       	ldi	r24, 0x04	; 4
    2128:	80 93 f4 06 	sts	0x06F4, r24
  }

  if (bs.mode!=MODE_RUNNING) {
    // too tippy to try to recover.
    set_motor_idle();
    212c:	0e 94 71 05 	call	0xae2	; 0xae2 <set_motor_idle>
    2130:	48 c7       	rjmp	.+3728   	; 0x2fc2 <balance+0x1c76>
    2132:	12 e0       	ldi	r17, 0x02	; 2
    2134:	10 93 f3 06 	sts	0x06F3, r17
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	80 93 f4 06 	sts	0x06F4, r24
    213e:	39 cd       	rjmp	.-1422   	; 0x1bb2 <balance+0x866>
    2140:	11 30       	cpi	r17, 0x01	; 1
    2142:	a1 f7       	brne	.-24     	; 0x212c <balance+0xde0>
    return;
  }

  /*
    The actual feedback loop between tilt angle and motor torque
   */

  float bat_factor = fmax(0.45, bs.bat_voltage);
    2144:	a7 01       	movw	r20, r14
    2146:	96 01       	movw	r18, r12
    2148:	66 e6       	ldi	r22, 0x66	; 102
    214a:	76 e6       	ldi	r23, 0x66	; 102
    214c:	86 ee       	ldi	r24, 0xE6	; 230
    214e:	9e e3       	ldi	r25, 0x3E	; 62
    2150:	0e 94 61 03 	call	0x6c2	; 0x6c2 <fmax>
    2154:	6d 87       	std	Y+13, r22	; 0x0d
    2156:	7e 87       	std	Y+14, r23	; 0x0e
    2158:	8f 87       	std	Y+15, r24	; 0x0f
    215a:	98 8b       	std	Y+16, r25	; 0x10

  bs.balance_torque = (bc.p_gain*bs.lpf_angle_corrected + bc.d_gain*bs.lpf_angrate + bc.i_gain*bs.lpf_angintegral) * bs.softstart * bs.gain_reduction;
    215c:	80 91 df 05 	lds	r24, 0x05DF
    2160:	90 91 e0 05 	lds	r25, 0x05E0
    2164:	a0 91 e1 05 	lds	r26, 0x05E1
    2168:	b0 91 e2 05 	lds	r27, 0x05E2
    216c:	a4 01       	movw	r20, r8
    216e:	93 01       	movw	r18, r6
    2170:	bc 01       	movw	r22, r24
    2172:	cd 01       	movw	r24, r26
    2174:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    2178:	5b 01       	movw	r10, r22
    217a:	6c 01       	movw	r12, r24
    217c:	e0 90 e3 05 	lds	r14, 0x05E3
    2180:	f0 90 e4 05 	lds	r15, 0x05E4
    2184:	00 91 e5 05 	lds	r16, 0x05E5
    2188:	10 91 e6 05 	lds	r17, 0x05E6
    218c:	80 91 7b 06 	lds	r24, 0x067B
    2190:	90 91 7c 06 	lds	r25, 0x067C
    2194:	a0 91 7d 06 	lds	r26, 0x067D
    2198:	b0 91 7e 06 	lds	r27, 0x067E
    219c:	9c 01       	movw	r18, r24
    219e:	ad 01       	movw	r20, r26
    21a0:	c8 01       	movw	r24, r16
    21a2:	b7 01       	movw	r22, r14
    21a4:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	9c 01       	movw	r18, r24
    21ae:	ad 01       	movw	r20, r26
    21b0:	c6 01       	movw	r24, r12
    21b2:	b5 01       	movw	r22, r10
    21b4:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    21b8:	5b 01       	movw	r10, r22
    21ba:	6c 01       	movw	r12, r24
    21bc:	e0 90 e7 05 	lds	r14, 0x05E7
    21c0:	f0 90 e8 05 	lds	r15, 0x05E8
    21c4:	00 91 e9 05 	lds	r16, 0x05E9
    21c8:	10 91 ea 05 	lds	r17, 0x05EA
    21cc:	80 91 7f 06 	lds	r24, 0x067F
    21d0:	90 91 80 06 	lds	r25, 0x0680
    21d4:	a0 91 81 06 	lds	r26, 0x0681
    21d8:	b0 91 82 06 	lds	r27, 0x0682
    21dc:	9c 01       	movw	r18, r24
    21de:	ad 01       	movw	r20, r26
    21e0:	c8 01       	movw	r24, r16
    21e2:	b7 01       	movw	r22, r14
    21e4:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	9c 01       	movw	r18, r24
    21ee:	ad 01       	movw	r20, r26
    21f0:	c6 01       	movw	r24, r12
    21f2:	b5 01       	movw	r22, r10
    21f4:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	a2 01       	movw	r20, r4
    21fe:	91 01       	movw	r18, r2
    2200:	bc 01       	movw	r22, r24
    2202:	cd 01       	movw	r24, r26
    2204:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    2208:	7b 01       	movw	r14, r22
    220a:	8c 01       	movw	r16, r24
    220c:	80 91 b3 06 	lds	r24, 0x06B3
    2210:	90 91 b4 06 	lds	r25, 0x06B4
    2214:	a0 91 b5 06 	lds	r26, 0x06B5
    2218:	b0 91 b6 06 	lds	r27, 0x06B6
    221c:	9c 01       	movw	r18, r24
    221e:	ad 01       	movw	r20, r26
    2220:	c8 01       	movw	r24, r16
    2222:	b7 01       	movw	r22, r14
    2224:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    2228:	2b 01       	movw	r4, r22
    222a:	3c 01       	movw	r6, r24
  

  /*
    Limit balance_torque to the amount we can actually produce, based on the PWM limit values.
    Avoiding having enormous balance_torques during PWM saturation helps keep cur_speed_est reasonable.
  */
  int8_t at_limit=0;
    222c:	19 8a       	std	Y+17, r1	; 0x11
  if (bs.balance_torque>=0.0) {
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	40 e0       	ldi	r20, 0x00	; 0
    2234:	50 e0       	ldi	r21, 0x00	; 0
    2236:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
    223a:	88 23       	and	r24, r24
    223c:	0c f4       	brge	.+2      	; 0x2240 <balance+0xef4>
    223e:	9f c5       	rjmp	.+2878   	; 0x2d7e <balance+0x1a32>
    bs.bt_lim = fmin((bc.hard_speed_lim * bat_factor - bs.cur_speed_est) / bc.motor_torque_factor, bc.balance_torque_lim);
    2240:	80 91 f3 05 	lds	r24, 0x05F3
    2244:	90 91 f4 05 	lds	r25, 0x05F4
    2248:	a0 91 f5 05 	lds	r26, 0x05F5
    224c:	b0 91 f6 05 	lds	r27, 0x05F6
    2250:	2d 85       	ldd	r18, Y+13	; 0x0d
    2252:	3e 85       	ldd	r19, Y+14	; 0x0e
    2254:	4f 85       	ldd	r20, Y+15	; 0x0f
    2256:	58 89       	ldd	r21, Y+16	; 0x10
    2258:	bc 01       	movw	r22, r24
    225a:	cd 01       	movw	r24, r26
    225c:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	2a a1       	ldd	r18, Y+34	; 0x22
    2266:	3b a1       	ldd	r19, Y+35	; 0x23
    2268:	4c a1       	ldd	r20, Y+36	; 0x24
    226a:	5d a1       	ldd	r21, Y+37	; 0x25
    226c:	bc 01       	movw	r22, r24
    226e:	cd 01       	movw	r24, r26
    2270:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    2274:	7b 01       	movw	r14, r22
    2276:	8c 01       	movw	r16, r24
    2278:	20 91 1b 06 	lds	r18, 0x061B
    227c:	30 91 1c 06 	lds	r19, 0x061C
    2280:	40 91 1d 06 	lds	r20, 0x061D
    2284:	50 91 1e 06 	lds	r21, 0x061E
    2288:	2e 8b       	std	Y+22, r18	; 0x16
    228a:	3f 8b       	std	Y+23, r19	; 0x17
    228c:	48 8f       	std	Y+24, r20	; 0x18
    228e:	59 8f       	std	Y+25, r21	; 0x19
    2290:	60 e0       	ldi	r22, 0x00	; 0
    2292:	70 e0       	ldi	r23, 0x00	; 0
    2294:	80 e8       	ldi	r24, 0x80	; 128
    2296:	9f e3       	ldi	r25, 0x3F	; 63
    2298:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__divsf3>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	9c 01       	movw	r18, r24
    22a2:	ad 01       	movw	r20, r26
    22a4:	c8 01       	movw	r24, r16
    22a6:	b7 01       	movw	r22, r14
    22a8:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	20 91 17 06 	lds	r18, 0x0617
    22b4:	30 91 18 06 	lds	r19, 0x0618
    22b8:	40 91 19 06 	lds	r20, 0x0619
    22bc:	50 91 1a 06 	lds	r21, 0x061A
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 81 03 	call	0x702	; 0x702 <fmin>
    22c8:	7b 01       	movw	r14, r22
    22ca:	8c 01       	movw	r16, r24
    22cc:	60 93 6b 06 	sts	0x066B, r22
    22d0:	70 93 6c 06 	sts	0x066C, r23
    22d4:	80 93 6d 06 	sts	0x066D, r24
    22d8:	90 93 6e 06 	sts	0x066E, r25
    if (bs.balance_torque > bs.bt_lim) {
    22dc:	9b 01       	movw	r18, r22
    22de:	ac 01       	movw	r20, r24
    22e0:	c3 01       	movw	r24, r6
    22e2:	b2 01       	movw	r22, r4
    22e4:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
    22e8:	18 16       	cp	r1, r24
    22ea:	0c f4       	brge	.+2      	; 0x22ee <balance+0xfa2>
    22ec:	ca c5       	rjmp	.+2964   	; 0x2e82 <balance+0x1b36>
    22ee:	40 92 a3 06 	sts	0x06A3, r4
    22f2:	50 92 a4 06 	sts	0x06A4, r5
    22f6:	60 92 a5 06 	sts	0x06A5, r6
    22fa:	70 92 a6 06 	sts	0x06A6, r7
      if (bs.bt_lim<0.0) {
        bs.balance_torque=0.0;
      } else {
        bs.balance_torque = bs.bt_lim;
      }
      at_limit=1;
    }
  } else {
    bs.bt_lim = fmax((-bc.hard_speed_lim * bat_factor - bs.cur_speed_est) / bc.motor_torque_factor, -bc.balance_torque_lim);
    if (bs.balance_torque < bs.bt_lim) {
      if (bs.bt_lim>=0.0) {
        bs.balance_torque=0.0;
      } else {
        bs.balance_torque = bs.bt_lim;
      }
      at_limit=1;
    }
  }

  /*
    Calculate the PWM value, roughly = current speed + k * desired torque / bat_voltage.
  */
  bs.cmd = (bs.cur_speed_est + bc.motor_torque_factor*bs.balance_torque) / bat_factor;
    22fe:	a3 01       	movw	r20, r6
    2300:	92 01       	movw	r18, r4
    2302:	6e 89       	ldd	r22, Y+22	; 0x16
    2304:	7f 89       	ldd	r23, Y+23	; 0x17
    2306:	88 8d       	ldd	r24, Y+24	; 0x18
    2308:	99 8d       	ldd	r25, Y+25	; 0x19
    230a:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	9c 01       	movw	r18, r24
    2314:	ad 01       	movw	r20, r26
    2316:	6a a1       	ldd	r22, Y+34	; 0x22
    2318:	7b a1       	ldd	r23, Y+35	; 0x23
    231a:	8c a1       	ldd	r24, Y+36	; 0x24
    231c:	9d a1       	ldd	r25, Y+37	; 0x25
    231e:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2322:	7b 01       	movw	r14, r22
    2324:	8c 01       	movw	r16, r24
    2326:	2d 85       	ldd	r18, Y+13	; 0x0d
    2328:	3e 85       	ldd	r19, Y+14	; 0x0e
    232a:	4f 85       	ldd	r20, Y+15	; 0x0f
    232c:	58 89       	ldd	r21, Y+16	; 0x10
    232e:	60 e0       	ldi	r22, 0x00	; 0
    2330:	70 e0       	ldi	r23, 0x00	; 0
    2332:	80 e8       	ldi	r24, 0x80	; 128
    2334:	9f e3       	ldi	r25, 0x3F	; 63
    2336:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__divsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	9c 01       	movw	r18, r24
    2340:	ad 01       	movw	r20, r26
    2342:	c8 01       	movw	r24, r16
    2344:	b7 01       	movw	r22, r14
    2346:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    234a:	6e a3       	std	Y+38, r22	; 0x26
    234c:	7f a3       	std	Y+39, r23	; 0x27
    234e:	88 a7       	std	Y+40, r24	; 0x28
    2350:	99 a7       	std	Y+41, r25	; 0x29
    2352:	60 93 b7 06 	sts	0x06B7, r22
    2356:	70 93 b8 06 	sts	0x06B8, r23
    235a:	80 93 b9 06 	sts	0x06B9, r24
    235e:	90 93 ba 06 	sts	0x06BA, r25

  /*
    Assume that torque makes us accelerate. Not very accurate, but the feedback is tight enough
    to compensate.
  */
  bs.cur_speed_est = bs.cur_speed_est + 0.5*bs.interval*bs.balance_torque;
    2362:	80 90 2f 06 	lds	r8, 0x062F
    2366:	90 90 30 06 	lds	r9, 0x0630
    236a:	a0 90 31 06 	lds	r10, 0x0631
    236e:	b0 90 32 06 	lds	r11, 0x0632
    2372:	a3 01       	movw	r20, r6
    2374:	92 01       	movw	r18, r4
    2376:	c5 01       	movw	r24, r10
    2378:	b4 01       	movw	r22, r8
    237a:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e0       	ldi	r20, 0x00	; 0
    2388:	5f e3       	ldi	r21, 0x3F	; 63
    238a:	bc 01       	movw	r22, r24
    238c:	cd 01       	movw	r24, r26
    238e:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	9c 01       	movw	r18, r24
    2398:	ad 01       	movw	r20, r26
    239a:	6a a1       	ldd	r22, Y+34	; 0x22
    239c:	7b a1       	ldd	r23, Y+35	; 0x23
    239e:	8c a1       	ldd	r24, Y+36	; 0x24
    23a0:	9d a1       	ldd	r25, Y+37	; 0x25
    23a2:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    23a6:	6a a3       	std	Y+34, r22	; 0x22
    23a8:	7b a3       	std	Y+35, r23	; 0x23
    23aa:	8c a3       	std	Y+36, r24	; 0x24
    23ac:	9d a3       	std	Y+37, r25	; 0x25
    23ae:	60 93 a7 06 	sts	0x06A7, r22
    23b2:	70 93 a8 06 	sts	0x06A8, r23
    23b6:	80 93 a9 06 	sts	0x06A9, r24
    23ba:	90 93 aa 06 	sts	0x06AA, r25

  /*
    Avoid trusting the accelerometer when we're accelerating hard.
   */
  bs.pitch_filter.angle_noise = fmax(bs.pitch_filter.angle_noise, fabs(bs.balance_torque)*10.0);
    23be:	c3 01       	movw	r24, r6
    23c0:	b2 01       	movw	r22, r4
    23c2:	0e 94 48 03 	call	0x690	; 0x690 <my_fabs>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e2       	ldi	r20, 0x20	; 32
    23d0:	51 e4       	ldi	r21, 0x41	; 65
    23d2:	bc 01       	movw	r22, r24
    23d4:	cd 01       	movw	r24, r26
    23d6:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	9c 01       	movw	r18, r24
    23e0:	ad 01       	movw	r20, r26
    23e2:	60 91 e7 06 	lds	r22, 0x06E7
    23e6:	70 91 e8 06 	lds	r23, 0x06E8
    23ea:	80 91 e9 06 	lds	r24, 0x06E9
    23ee:	90 91 ea 06 	lds	r25, 0x06EA
    23f2:	0e 94 61 03 	call	0x6c2	; 0x6c2 <fmax>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	80 93 e7 06 	sts	0x06E7, r24
    23fe:	90 93 e8 06 	sts	0x06E8, r25
    2402:	a0 93 e9 06 	sts	0x06E9, r26
    2406:	b0 93 ea 06 	sts	0x06EA, r27
  lpf_update(&bs.pitch_filter.angle_noise, 0.5, bs.interval, 0.0);
    240a:	0f 2e       	mov	r0, r31
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	cf 2e       	mov	r12, r31
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	df 2e       	mov	r13, r31
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	ef 2e       	mov	r14, r31
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	ff 2e       	mov	r15, r31
    241c:	f0 2d       	mov	r31, r0
    241e:	95 01       	movw	r18, r10
    2420:	84 01       	movw	r16, r8
    2422:	40 e0       	ldi	r20, 0x00	; 0
    2424:	50 e0       	ldi	r21, 0x00	; 0
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	7f e3       	ldi	r23, 0x3F	; 63
    242a:	87 ee       	ldi	r24, 0xE7	; 231
    242c:	96 e0       	ldi	r25, 0x06	; 6
    242e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <lpf_update>
  
  /*
    Annoy the operator by adding a wobble.
   */
  if (bs.stick_shake!=0.0) {
    2432:	e0 90 af 06 	lds	r14, 0x06AF
    2436:	f0 90 b0 06 	lds	r15, 0x06B0
    243a:	00 91 b1 06 	lds	r16, 0x06B1
    243e:	10 91 b2 06 	lds	r17, 0x06B2
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e0       	ldi	r20, 0x00	; 0
    2448:	50 e0       	ldi	r21, 0x00	; 0
    244a:	c8 01       	movw	r24, r16
    244c:	b7 01       	movw	r22, r14
    244e:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
    2452:	88 23       	and	r24, r24
    2454:	09 f4       	brne	.+2      	; 0x2458 <balance+0x110c>
    2456:	57 c5       	rjmp	.+2734   	; 0x2f06 <balance+0x1bba>
    if (bal_tickno&8) {
    2458:	80 91 84 05 	lds	r24, 0x0584
    245c:	83 ff       	sbrs	r24, 3
    245e:	9c c5       	rjmp	.+2872   	; 0x2f98 <balance+0x1c4c>
      bs.cmd += bs.stick_shake;
    2460:	80 91 b7 06 	lds	r24, 0x06B7
    2464:	90 91 b8 06 	lds	r25, 0x06B8
    2468:	a0 91 b9 06 	lds	r26, 0x06B9
    246c:	b0 91 ba 06 	lds	r27, 0x06BA
    2470:	a8 01       	movw	r20, r16
    2472:	97 01       	movw	r18, r14
    2474:	bc 01       	movw	r22, r24
    2476:	cd 01       	movw	r24, r26
    2478:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    } else {
      bs.cmd -= bs.stick_shake;
    247c:	6e a3       	std	Y+38, r22	; 0x26
    247e:	7f a3       	std	Y+39, r23	; 0x27
    2480:	88 a7       	std	Y+40, r24	; 0x28
    2482:	99 a7       	std	Y+41, r25	; 0x29
    2484:	60 93 b7 06 	sts	0x06B7, r22
    2488:	70 93 b8 06 	sts	0x06B8, r23
    248c:	80 93 b9 06 	sts	0x06B9, r24
    2490:	90 93 ba 06 	sts	0x06BA, r25
    }
  }

  if (at_limit) {
    2494:	39 89       	ldd	r19, Y+17	; 0x11
    2496:	33 23       	and	r19, r19
    2498:	09 f4       	brne	.+2      	; 0x249c <balance+0x1150>
    249a:	28 c5       	rjmp	.+2640   	; 0x2eec <balance+0x1ba0>
    bs.full_speed_time += bs.interval;
    249c:	80 91 6f 06 	lds	r24, 0x066F
    24a0:	90 91 70 06 	lds	r25, 0x0670
    24a4:	a0 91 71 06 	lds	r26, 0x0671
    24a8:	b0 91 72 06 	lds	r27, 0x0672
    24ac:	20 91 2f 06 	lds	r18, 0x062F
    24b0:	30 91 30 06 	lds	r19, 0x0630
    24b4:	40 91 31 06 	lds	r20, 0x0631
    24b8:	50 91 32 06 	lds	r21, 0x0632
    24bc:	bc 01       	movw	r22, r24
    24be:	cd 01       	movw	r24, r26
    24c0:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	80 93 6f 06 	sts	0x066F, r24
    24cc:	90 93 70 06 	sts	0x0670, r25
    24d0:	a0 93 71 06 	sts	0x0671, r26
    24d4:	b0 93 72 06 	sts	0x0672, r27
    if (bs.full_speed_time > 0.5) {
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	5f e3       	ldi	r21, 0x3F	; 63
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
    24e8:	18 16       	cp	r1, r24
    24ea:	34 f4       	brge	.+12     	; 0x24f8 <balance+0x11ac>
      bs.mode=MODE_TIPPED;
    24ec:	82 e0       	ldi	r24, 0x02	; 2
    24ee:	80 93 f3 06 	sts	0x06F3, r24
      bs.mode_reason=5;
    24f2:	85 e0       	ldi	r24, 0x05	; 5
    24f4:	80 93 f4 06 	sts	0x06F4, r24
    }
  } else {
    bs.full_speed_time = 0.0;
  }

#ifdef CATCH_GLITCHES
  if (bs.cmd > 0.3 || bs.cmd < -0.3) {
    barf();
  }
#endif

  /* Ramp up softstart over the first second */
  if (bs.pitch_filter.angle_inited && bs.pitch_filter.rate_inited) {
    24f8:	80 91 ec 06 	lds	r24, 0x06EC
    24fc:	88 23       	and	r24, r24
    24fe:	09 f4       	brne	.+2      	; 0x2502 <balance+0x11b6>
    2500:	e0 c4       	rjmp	.+2496   	; 0x2ec2 <balance+0x1b76>
    2502:	80 91 eb 06 	lds	r24, 0x06EB
    2506:	88 23       	and	r24, r24
    2508:	09 f4       	brne	.+2      	; 0x250c <balance+0x11c0>
    250a:	31 c5       	rjmp	.+2658   	; 0x2f6e <balance+0x1c22>
    bs.softstart = fmin(1.0, bs.softstart + 1.0*bs.interval);
    250c:	80 91 93 06 	lds	r24, 0x0693
    2510:	90 91 94 06 	lds	r25, 0x0694
    2514:	a0 91 95 06 	lds	r26, 0x0695
    2518:	b0 91 96 06 	lds	r27, 0x0696
    251c:	e0 90 2f 06 	lds	r14, 0x062F
    2520:	f0 90 30 06 	lds	r15, 0x0630
    2524:	00 91 31 06 	lds	r16, 0x0631
    2528:	10 91 32 06 	lds	r17, 0x0632
    252c:	a8 01       	movw	r20, r16
    252e:	97 01       	movw	r18, r14
    2530:	bc 01       	movw	r22, r24
    2532:	cd 01       	movw	r24, r26
    2534:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	9c 01       	movw	r18, r24
    253e:	ad 01       	movw	r20, r26
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	70 e0       	ldi	r23, 0x00	; 0
    2544:	80 e8       	ldi	r24, 0x80	; 128
    2546:	9f e3       	ldi	r25, 0x3F	; 63
    2548:	0e 94 81 03 	call	0x702	; 0x702 <fmin>
    254c:	1b 01       	movw	r2, r22
    254e:	2c 01       	movw	r4, r24
    2550:	60 93 93 06 	sts	0x0693, r22
    2554:	70 93 94 06 	sts	0x0694, r23
    2558:	80 93 95 06 	sts	0x0695, r24
    255c:	90 93 96 06 	sts	0x0696, r25
    bs.start_protection = fmin(1.0, bs.start_protection + 0.25*bs.interval);
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e8       	ldi	r20, 0x80	; 128
    2566:	5e e3       	ldi	r21, 0x3E	; 62
    2568:	c8 01       	movw	r24, r16
    256a:	b7 01       	movw	r22, r14
    256c:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	e0 90 97 06 	lds	r14, 0x0697
    2578:	f0 90 98 06 	lds	r15, 0x0698
    257c:	00 91 99 06 	lds	r16, 0x0699
    2580:	10 91 9a 06 	lds	r17, 0x069A
    2584:	9c 01       	movw	r18, r24
    2586:	ad 01       	movw	r20, r26
    2588:	c8 01       	movw	r24, r16
    258a:	b7 01       	movw	r22, r14
    258c:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	9c 01       	movw	r18, r24
    2596:	ad 01       	movw	r20, r26
    2598:	60 e0       	ldi	r22, 0x00	; 0
    259a:	70 e0       	ldi	r23, 0x00	; 0
    259c:	80 e8       	ldi	r24, 0x80	; 128
    259e:	9f e3       	ldi	r25, 0x3F	; 63
    25a0:	0e 94 81 03 	call	0x702	; 0x702 <fmin>
    25a4:	6e 8f       	std	Y+30, r22	; 0x1e
    25a6:	7f 8f       	std	Y+31, r23	; 0x1f
    25a8:	88 a3       	std	Y+32, r24	; 0x20
    25aa:	99 a3       	std	Y+33, r25	; 0x21
    25ac:	60 93 97 06 	sts	0x0697, r22
    25b0:	70 93 98 06 	sts	0x0698, r23
    25b4:	80 93 99 06 	sts	0x0699, r24
    25b8:	90 93 9a 06 	sts	0x069A, r25
  }


#ifdef DO_STEERING

  /* Maximum steering rate calculation. At zero speed you want to be able to spin like a top
     but at high speed it needs to be gentle. We do an asymptotic slope */
  bs.steer_rate = bc.steer_rate_num / (bc.steer_rate_den * (2.0 - bs.lpf_knob1) + bs.cur_speed_est*bs.cur_speed_est) * bs.softstart;
    25bc:	80 91 8f 06 	lds	r24, 0x068F
    25c0:	90 91 90 06 	lds	r25, 0x0690
    25c4:	a0 91 91 06 	lds	r26, 0x0691
    25c8:	b0 91 92 06 	lds	r27, 0x0692
    25cc:	9c 01       	movw	r18, r24
    25ce:	ad 01       	movw	r20, r26
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	90 e4       	ldi	r25, 0x40	; 64
    25d8:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	e0 90 0b 06 	lds	r14, 0x060B
    25e4:	f0 90 0c 06 	lds	r15, 0x060C
    25e8:	00 91 0d 06 	lds	r16, 0x060D
    25ec:	10 91 0e 06 	lds	r17, 0x060E
    25f0:	9c 01       	movw	r18, r24
    25f2:	ad 01       	movw	r20, r26
    25f4:	c8 01       	movw	r24, r16
    25f6:	b7 01       	movw	r22, r14
    25f8:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    25fc:	7b 01       	movw	r14, r22
    25fe:	8c 01       	movw	r16, r24
    2600:	a0 90 a7 06 	lds	r10, 0x06A7
    2604:	b0 90 a8 06 	lds	r11, 0x06A8
    2608:	c0 90 a9 06 	lds	r12, 0x06A9
    260c:	d0 90 aa 06 	lds	r13, 0x06AA
    2610:	a6 01       	movw	r20, r12
    2612:	95 01       	movw	r18, r10
    2614:	c6 01       	movw	r24, r12
    2616:	b5 01       	movw	r22, r10
    2618:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	9c 01       	movw	r18, r24
    2622:	ad 01       	movw	r20, r26
    2624:	c8 01       	movw	r24, r16
    2626:	b7 01       	movw	r22, r14
    2628:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	9c 01       	movw	r18, r24
    2632:	ad 01       	movw	r20, r26
    2634:	60 e0       	ldi	r22, 0x00	; 0
    2636:	70 e0       	ldi	r23, 0x00	; 0
    2638:	80 e8       	ldi	r24, 0x80	; 128
    263a:	9f e3       	ldi	r25, 0x3F	; 63
    263c:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__divsf3>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	e0 90 07 06 	lds	r14, 0x0607
    2648:	f0 90 08 06 	lds	r15, 0x0608
    264c:	00 91 09 06 	lds	r16, 0x0609
    2650:	10 91 0a 06 	lds	r17, 0x060A
    2654:	9c 01       	movw	r18, r24
    2656:	ad 01       	movw	r20, r26
    2658:	c8 01       	movw	r24, r16
    265a:	b7 01       	movw	r22, r14
    265c:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	a2 01       	movw	r20, r4
    2666:	91 01       	movw	r18, r2
    2668:	bc 01       	movw	r22, r24
    266a:	cd 01       	movw	r24, r26
    266c:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    2670:	3b 01       	movw	r6, r22
    2672:	4c 01       	movw	r8, r24
    2674:	60 93 bb 06 	sts	0x06BB, r22
    2678:	70 93 bc 06 	sts	0x06BC, r23
    267c:	80 93 bd 06 	sts	0x06BD, r24
    2680:	90 93 be 06 	sts	0x06BE, r25


  /* 
     Set yaw gain. Gain is constant except at low speed where it drops off. I like to drop it off because
     you don't need it for stability, and it lets you twist the scooter with your feet. 
  */
  float yaw_steer_gain_adj = fmin(1.0, fabs(bs.cur_speed_est) / bc.yaw_steer_speed_thresh) * bc.yaw_steer_gain;
    2684:	c6 01       	movw	r24, r12
    2686:	b5 01       	movw	r22, r10
    2688:	0e 94 48 03 	call	0x690	; 0x690 <my_fabs>
    268c:	7b 01       	movw	r14, r22
    268e:	8c 01       	movw	r16, r24
    2690:	80 91 ef 05 	lds	r24, 0x05EF
    2694:	90 91 f0 05 	lds	r25, 0x05F0
    2698:	a0 91 f1 05 	lds	r26, 0x05F1
    269c:	b0 91 f2 05 	lds	r27, 0x05F2
    26a0:	9c 01       	movw	r18, r24
    26a2:	ad 01       	movw	r20, r26
    26a4:	60 e0       	ldi	r22, 0x00	; 0
    26a6:	70 e0       	ldi	r23, 0x00	; 0
    26a8:	80 e8       	ldi	r24, 0x80	; 128
    26aa:	9f e3       	ldi	r25, 0x3F	; 63
    26ac:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__divsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	9c 01       	movw	r18, r24
    26b6:	ad 01       	movw	r20, r26
    26b8:	c8 01       	movw	r24, r16
    26ba:	b7 01       	movw	r22, r14
    26bc:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9c 01       	movw	r18, r24
    26c6:	ad 01       	movw	r20, r26
    26c8:	60 e0       	ldi	r22, 0x00	; 0
    26ca:	70 e0       	ldi	r23, 0x00	; 0
    26cc:	80 e8       	ldi	r24, 0x80	; 128
    26ce:	9f e3       	ldi	r25, 0x3F	; 63
    26d0:	0e 94 81 03 	call	0x702	; 0x702 <fmin>
    26d4:	7b 01       	movw	r14, r22
    26d6:	8c 01       	movw	r16, r24
    26d8:	80 91 eb 05 	lds	r24, 0x05EB
    26dc:	90 91 ec 05 	lds	r25, 0x05EC
    26e0:	a0 91 ed 05 	lds	r26, 0x05ED
    26e4:	b0 91 ee 05 	lds	r27, 0x05EE
    26e8:	9c 01       	movw	r18, r24
    26ea:	ad 01       	movw	r20, r26
    26ec:	c8 01       	movw	r24, r16
    26ee:	b7 01       	movw	r22, r14
    26f0:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    26f4:	1b 01       	movw	r2, r22
    26f6:	2c 01       	movw	r4, r24

  float desired_steer = bs.steer_rate*bs.lpf_steering;
    26f8:	80 91 83 06 	lds	r24, 0x0683
    26fc:	90 91 84 06 	lds	r25, 0x0684
    2700:	a0 91 85 06 	lds	r26, 0x0685
    2704:	b0 91 86 06 	lds	r27, 0x0686
    2708:	9c 01       	movw	r18, r24
    270a:	ad 01       	movw	r20, r26
    270c:	c4 01       	movw	r24, r8
    270e:	b3 01       	movw	r22, r6
    2710:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    2714:	5b 01       	movw	r10, r22
    2716:	6c 01       	movw	r12, r24

  // Make sure to saturate at the same values as the gyro saturates.
  bs.target_yaw = flim(desired_steer * bc.yaw_target_mult, -2.1817, 2.1817);
    2718:	80 91 13 06 	lds	r24, 0x0613
    271c:	90 91 14 06 	lds	r25, 0x0614
    2720:	a0 91 15 06 	lds	r26, 0x0615
    2724:	b0 91 16 06 	lds	r27, 0x0616
    2728:	a6 01       	movw	r20, r12
    272a:	95 01       	movw	r18, r10
    272c:	bc 01       	movw	r22, r24
    272e:	cd 01       	movw	r24, r26
    2730:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	0f 2e       	mov	r0, r31
    273a:	f9 ef       	ldi	r31, 0xF9	; 249
    273c:	ef 2e       	mov	r14, r31
    273e:	f0 ea       	ldi	r31, 0xA0	; 160
    2740:	ff 2e       	mov	r15, r31
    2742:	fb e0       	ldi	r31, 0x0B	; 11
    2744:	0f 2f       	mov	r16, r31
    2746:	f0 e4       	ldi	r31, 0x40	; 64
    2748:	1f 2f       	mov	r17, r31
    274a:	f0 2d       	mov	r31, r0
    274c:	29 ef       	ldi	r18, 0xF9	; 249
    274e:	30 ea       	ldi	r19, 0xA0	; 160
    2750:	4b e0       	ldi	r20, 0x0B	; 11
    2752:	50 ec       	ldi	r21, 0xC0	; 192
    2754:	bc 01       	movw	r22, r24
    2756:	cd 01       	movw	r24, r26
    2758:	0e 94 a1 03 	call	0x742	; 0x742 <flim>
    275c:	7b 01       	movw	r14, r22
    275e:	8c 01       	movw	r16, r24
    2760:	60 93 8b 06 	sts	0x068B, r22
    2764:	70 93 8c 06 	sts	0x068C, r23
    2768:	80 93 8d 06 	sts	0x068D, r24
    276c:	90 93 8e 06 	sts	0x068E, r25
  
  // Differential steering
  bs.steer_diff = desired_steer + yaw_steer_gain_adj * (bs.target_yaw - bs.lpf_yaw_rate);
    2770:	80 91 87 06 	lds	r24, 0x0687
    2774:	90 91 88 06 	lds	r25, 0x0688
    2778:	a0 91 89 06 	lds	r26, 0x0689
    277c:	b0 91 8a 06 	lds	r27, 0x068A
    2780:	9c 01       	movw	r18, r24
    2782:	ad 01       	movw	r20, r26
    2784:	c8 01       	movw	r24, r16
    2786:	b7 01       	movw	r22, r14
    2788:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	a2 01       	movw	r20, r4
    2792:	91 01       	movw	r18, r2
    2794:	bc 01       	movw	r22, r24
    2796:	cd 01       	movw	r24, r26
    2798:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	a6 01       	movw	r20, r12
    27a2:	95 01       	movw	r18, r10
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    27ac:	5b 01       	movw	r10, r22
    27ae:	6c 01       	movw	r12, r24
    27b0:	60 93 bf 06 	sts	0x06BF, r22
    27b4:	70 93 c0 06 	sts	0x06C0, r23
    27b8:	80 93 c1 06 	sts	0x06C1, r24
    27bc:	90 93 c2 06 	sts	0x06C2, r25
  
  bs.left_pwm =  flim(bs.cmd - bs.steer_diff, -bs.start_protection, bs.start_protection);
    27c0:	6e 8c       	ldd	r6, Y+30	; 0x1e
    27c2:	7f 8c       	ldd	r7, Y+31	; 0x1f
    27c4:	88 a0       	ldd	r8, Y+32	; 0x20
    27c6:	99 a0       	ldd	r9, Y+33	; 0x21
    27c8:	97 fa       	bst	r9, 7
    27ca:	90 94       	com	r9
    27cc:	97 f8       	bld	r9, 7
    27ce:	90 94       	com	r9
    27d0:	9b 01       	movw	r18, r22
    27d2:	ac 01       	movw	r20, r24
    27d4:	6e a1       	ldd	r22, Y+38	; 0x26
    27d6:	7f a1       	ldd	r23, Y+39	; 0x27
    27d8:	88 a5       	ldd	r24, Y+40	; 0x28
    27da:	99 a5       	ldd	r25, Y+41	; 0x29
    27dc:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	ee 8c       	ldd	r14, Y+30	; 0x1e
    27e6:	ff 8c       	ldd	r15, Y+31	; 0x1f
    27e8:	08 a1       	ldd	r16, Y+32	; 0x20
    27ea:	19 a1       	ldd	r17, Y+33	; 0x21
    27ec:	a4 01       	movw	r20, r8
    27ee:	93 01       	movw	r18, r6
    27f0:	bc 01       	movw	r22, r24
    27f2:	cd 01       	movw	r24, r26
    27f4:	0e 94 a1 03 	call	0x742	; 0x742 <flim>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	80 93 c3 06 	sts	0x06C3, r24
    2800:	90 93 c4 06 	sts	0x06C4, r25
    2804:	a0 93 c5 06 	sts	0x06C5, r26
    2808:	b0 93 c6 06 	sts	0x06C6, r27
  bs.right_pwm = flim(bs.cmd + bs.steer_diff, -bs.start_protection, bs.start_protection);
    280c:	a6 01       	movw	r20, r12
    280e:	95 01       	movw	r18, r10
    2810:	6e a1       	ldd	r22, Y+38	; 0x26
    2812:	7f a1       	ldd	r23, Y+39	; 0x27
    2814:	88 a5       	ldd	r24, Y+40	; 0x28
    2816:	99 a5       	ldd	r25, Y+41	; 0x29
    2818:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	a4 01       	movw	r20, r8
    2822:	93 01       	movw	r18, r6
    2824:	bc 01       	movw	r22, r24
    2826:	cd 01       	movw	r24, r26
    2828:	0e 94 a1 03 	call	0x742	; 0x742 <flim>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	80 93 c7 06 	sts	0x06C7, r24
    2834:	90 93 c8 06 	sts	0x06C8, r25
    2838:	a0 93 c9 06 	sts	0x06C9, r26
    283c:	b0 93 ca 06 	sts	0x06CA, r27
#else
  bs.left_pwm = bs.cmd;
#endif

  /* Boost the PWM signal around 0, to overcome motor stiction */
  do_crossover(&bs.left_pwm, bc.crossover_boost, 2.0);
    2840:	00 e0       	ldi	r16, 0x00	; 0
    2842:	10 e0       	ldi	r17, 0x00	; 0
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e4       	ldi	r19, 0x40	; 64
    2848:	40 91 27 06 	lds	r20, 0x0627
    284c:	50 91 28 06 	lds	r21, 0x0628
    2850:	60 91 29 06 	lds	r22, 0x0629
    2854:	70 91 2a 06 	lds	r23, 0x062A
    2858:	87 ea       	ldi	r24, 0xA7	; 167
    285a:	96 e0       	ldi	r25, 0x06	; 6
    285c:	4c 96       	adiw	r24, 0x1c	; 28
    285e:	0e 94 40 09 	call	0x1280	; 0x1280 <do_crossover>
#ifdef DO_STEERING
  do_crossover(&bs.right_pwm, bc.crossover_boost, 2.0);
    2862:	00 e0       	ldi	r16, 0x00	; 0
    2864:	10 e0       	ldi	r17, 0x00	; 0
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e4       	ldi	r19, 0x40	; 64
    286a:	40 91 27 06 	lds	r20, 0x0627
    286e:	50 91 28 06 	lds	r21, 0x0628
    2872:	60 91 29 06 	lds	r22, 0x0629
    2876:	70 91 2a 06 	lds	r23, 0x062A
    287a:	87 ea       	ldi	r24, 0xA7	; 167
    287c:	96 e0       	ldi	r25, 0x06	; 6
    287e:	80 96       	adiw	r24, 0x20	; 32
    2880:	0e 94 40 09 	call	0x1280	; 0x1280 <do_crossover>
#endif

#ifdef DO_STEERING
  set_motors(+bs.left_pwm, +bs.right_pwm);
    2884:	20 91 c7 06 	lds	r18, 0x06C7
    2888:	30 91 c8 06 	lds	r19, 0x06C8
    288c:	40 91 c9 06 	lds	r20, 0x06C9
    2890:	50 91 ca 06 	lds	r21, 0x06CA
    2894:	60 91 c3 06 	lds	r22, 0x06C3
    2898:	70 91 c4 06 	lds	r23, 0x06C4
    289c:	80 91 c5 06 	lds	r24, 0x06C5
    28a0:	90 91 c6 06 	lds	r25, 0x06C6
    28a4:	0e 94 a1 04 	call	0x942	; 0x942 <set_motors>
#else
  set_motors(+bs.left_pwm);
#endif

#if defined(__BAL2__) || defined(__BAL3__) || defined(__BAL4__)
  /* If we're hitting the speed limit on any wheel, beep */
  if (bs.left_pwm > bc.beep_speed_lim || 
    28a8:	a0 90 c3 06 	lds	r10, 0x06C3
    28ac:	b0 90 c4 06 	lds	r11, 0x06C4
    28b0:	c0 90 c5 06 	lds	r12, 0x06C5
    28b4:	d0 90 c6 06 	lds	r13, 0x06C6
    28b8:	e0 90 ff 05 	lds	r14, 0x05FF
    28bc:	f0 90 00 06 	lds	r15, 0x0600
    28c0:	00 91 01 06 	lds	r16, 0x0601
    28c4:	10 91 02 06 	lds	r17, 0x0602
    28c8:	a8 01       	movw	r20, r16
    28ca:	97 01       	movw	r18, r14
    28cc:	c6 01       	movw	r24, r12
    28ce:	b5 01       	movw	r22, r10
    28d0:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
    28d4:	18 16       	cp	r1, r24
    28d6:	0c f0       	brlt	.+2      	; 0x28da <balance+0x158e>
    28d8:	66 c1       	rjmp	.+716    	; 0x2ba6 <balance+0x185a>
    28da:	1a 98       	cbi	0x03, 2	; 3
    28dc:	72 c3       	rjmp	.+1764   	; 0x2fc2 <balance+0x1c76>
    28de:	d4 01       	movw	r26, r8
    28e0:	c3 01       	movw	r24, r6
    28e2:	b0 58       	subi	r27, 0x80	; 128
    28e4:	9c 01       	movw	r18, r24
    28e6:	ad 01       	movw	r20, r26
    28e8:	6a a1       	ldd	r22, Y+34	; 0x22
    28ea:	7b a1       	ldd	r23, Y+35	; 0x23
    28ec:	8c a1       	ldd	r24, Y+36	; 0x24
    28ee:	9d a1       	ldd	r25, Y+37	; 0x25
    28f0:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
    28f4:	88 23       	and	r24, r24
    28f6:	0c f4       	brge	.+2      	; 0x28fa <balance+0x15ae>
    28f8:	f6 c0       	rjmp	.+492    	; 0x2ae6 <balance+0x179a>
    28fa:	20 92 9b 06 	sts	0x069B, r2
    28fe:	30 92 9c 06 	sts	0x069C, r3
    2902:	40 92 9d 06 	sts	0x069D, r4
    2906:	50 92 9e 06 	sts	0x069E, r5
    290a:	80 91 9f 06 	lds	r24, 0x069F
    290e:	90 91 a0 06 	lds	r25, 0x06A0
    2912:	a0 91 a1 06 	lds	r26, 0x06A1
    2916:	b0 91 a2 06 	lds	r27, 0x06A2
    291a:	89 87       	std	Y+9, r24	; 0x09
    291c:	9a 87       	std	Y+10, r25	; 0x0a
    291e:	ab 87       	std	Y+11, r26	; 0x0b
    2920:	bc 87       	std	Y+12, r27	; 0x0c
    2922:	a2 01       	movw	r20, r4
    2924:	91 01       	movw	r18, r2
    2926:	bc 01       	movw	r22, r24
    2928:	cd 01       	movw	r24, r26
    292a:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
    292e:	18 16       	cp	r1, r24
    2930:	0c f0       	brlt	.+2      	; 0x2934 <balance+0x15e8>
    2932:	d2 c1       	rjmp	.+932    	; 0x2cd8 <balance+0x198c>
    2934:	a6 01       	movw	r20, r12
    2936:	95 01       	movw	r18, r10
    2938:	6a a1       	ldd	r22, Y+34	; 0x22
    293a:	7b a1       	ldd	r23, Y+35	; 0x23
    293c:	8c a1       	ldd	r24, Y+36	; 0x24
    293e:	9d a1       	ldd	r25, Y+37	; 0x25
    2940:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	9c 01       	movw	r18, r24
    294a:	ad 01       	movw	r20, r26
    294c:	c2 01       	movw	r24, r4
    294e:	b1 01       	movw	r22, r2
    2950:	0e 94 81 03 	call	0x702	; 0x702 <fmin>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	9c 01       	movw	r18, r24
    295a:	ad 01       	movw	r20, r26
    295c:	6a e0       	ldi	r22, 0x0A	; 10
    295e:	77 ed       	ldi	r23, 0xD7	; 215
    2960:	83 ea       	ldi	r24, 0xA3	; 163
    2962:	9c eb       	ldi	r25, 0xBC	; 188
    2964:	0e 94 81 03 	call	0x702	; 0x702 <fmin>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	e0 90 2f 06 	lds	r14, 0x062F
    2970:	f0 90 30 06 	lds	r15, 0x0630
    2974:	00 91 31 06 	lds	r16, 0x0631
    2978:	10 91 32 06 	lds	r17, 0x0632
    297c:	9c 01       	movw	r18, r24
    297e:	ad 01       	movw	r20, r26
    2980:	c8 01       	movw	r24, r16
    2982:	b7 01       	movw	r22, r14
    2984:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	40 e8       	ldi	r20, 0x80	; 128
    2992:	50 e4       	ldi	r21, 0x40	; 64
    2994:	bc 01       	movw	r22, r24
    2996:	cd 01       	movw	r24, r26
    2998:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	9c 01       	movw	r18, r24
    29a2:	ad 01       	movw	r20, r26
    29a4:	69 85       	ldd	r22, Y+9	; 0x09
    29a6:	7a 85       	ldd	r23, Y+10	; 0x0a
    29a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    29aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    29ac:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    29b0:	7b 01       	movw	r14, r22
    29b2:	8c 01       	movw	r16, r24
    29b4:	a2 01       	movw	r20, r4
    29b6:	91 01       	movw	r18, r2
    29b8:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
    29bc:	88 23       	and	r24, r24
    29be:	0c f0       	brlt	.+2      	; 0x29c2 <balance+0x1676>
    29c0:	85 ca       	rjmp	.-2806   	; 0x1ecc <balance+0xb80>
    29c2:	20 92 9f 06 	sts	0x069F, r2
    29c6:	30 92 a0 06 	sts	0x06A0, r3
    29ca:	40 92 a1 06 	sts	0x06A1, r4
    29ce:	50 92 a2 06 	sts	0x06A2, r5
    29d2:	84 ca       	rjmp	.-2808   	; 0x1edc <balance+0xb90>
    29d4:	80 e0       	ldi	r24, 0x00	; 0
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	a0 e0       	ldi	r26, 0x00	; 0
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	dc ca       	rjmp	.-2632   	; 0x1f96 <balance+0xc4a>
    29de:	2a e9       	ldi	r18, 0x9A	; 154
    29e0:	39 e9       	ldi	r19, 0x99	; 153
    29e2:	49 e1       	ldi	r20, 0x19	; 25
    29e4:	5f eb       	ldi	r21, 0xBF	; 191
    29e6:	c6 01       	movw	r24, r12
    29e8:	b5 01       	movw	r22, r10
    29ea:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
    29ee:	88 23       	and	r24, r24
    29f0:	0c f0       	brlt	.+2      	; 0x29f4 <balance+0x16a8>
    29f2:	84 cb       	rjmp	.-2296   	; 0x20fc <balance+0xdb0>
    29f4:	12 e0       	ldi	r17, 0x02	; 2
    29f6:	10 93 f3 06 	sts	0x06F3, r17
    29fa:	83 e0       	ldi	r24, 0x03	; 3
    29fc:	80 93 f4 06 	sts	0x06F4, r24
    2a00:	7d cb       	rjmp	.-2310   	; 0x20fc <balance+0xdb0>
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 e8       	ldi	r20, 0x80	; 128
    2a08:	57 e4       	ldi	r21, 0x47	; 71
    2a0a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2a0e:	0c 94 9f 0c 	jmp	0x193e	; 0x193e <balance+0x5f2>
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	40 e8       	ldi	r20, 0x80	; 128
    2a18:	57 e4       	ldi	r21, 0x47	; 71
    2a1a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2a1e:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <balance+0x57a>
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e8       	ldi	r20, 0x80	; 128
    2a28:	57 e4       	ldi	r21, 0x47	; 71
    2a2a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2a2e:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <balance+0x514>
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e8       	ldi	r20, 0x80	; 128
    2a38:	57 e4       	ldi	r21, 0x47	; 71
    2a3a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2a3e:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <balance+0x4ae>
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	40 e8       	ldi	r20, 0x80	; 128
    2a48:	57 e4       	ldi	r21, 0x47	; 71
    2a4a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2a4e:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <balance+0x448>
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e8       	ldi	r20, 0x80	; 128
    2a58:	57 e4       	ldi	r21, 0x47	; 71
    2a5a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2a5e:	0c 94 97 0b 	jmp	0x172e	; 0x172e <balance+0x3e2>
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	40 e8       	ldi	r20, 0x80	; 128
    2a68:	57 e4       	ldi	r21, 0x47	; 71
    2a6a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2a6e:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <balance+0x3a0>
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e8       	ldi	r20, 0x80	; 128
    2a78:	57 e4       	ldi	r21, 0x47	; 71
    2a7a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2a7e:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <balance+0x35e>
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	40 e8       	ldi	r20, 0x80	; 128
    2a88:	57 e4       	ldi	r21, 0x47	; 71
    2a8a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2a8e:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <balance+0x31c>
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	40 e8       	ldi	r20, 0x80	; 128
    2a98:	57 e4       	ldi	r21, 0x47	; 71
    2a9a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2a9e:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <balance+0x296>
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e8       	ldi	r20, 0x80	; 128
    2aa8:	57 e4       	ldi	r21, 0x47	; 71
    2aaa:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2aae:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <balance+0x210>
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e8       	ldi	r20, 0x80	; 128
    2ab8:	57 e4       	ldi	r21, 0x47	; 71
    2aba:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2abe:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <balance+0x19a>
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	40 e8       	ldi	r20, 0x80	; 128
    2ac8:	57 e4       	ldi	r21, 0x47	; 71
    2aca:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2ace:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <balance+0x128>
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	40 e8       	ldi	r20, 0x80	; 128
    2ad8:	57 e4       	ldi	r21, 0x47	; 71
    2ada:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2ade:	6b 01       	movw	r12, r22
    2ae0:	7c 01       	movw	r14, r24
    2ae2:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <balance+0x7a>
    2ae6:	a4 01       	movw	r20, r8
    2ae8:	93 01       	movw	r18, r6
    2aea:	6a a1       	ldd	r22, Y+34	; 0x22
    2aec:	7b a1       	ldd	r23, Y+35	; 0x23
    2aee:	8c a1       	ldd	r24, Y+36	; 0x24
    2af0:	9d a1       	ldd	r25, Y+37	; 0x25
    2af2:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2af6:	1b 01       	movw	r2, r22
    2af8:	2c 01       	movw	r4, r24
    2afa:	60 93 9b 06 	sts	0x069B, r22
    2afe:	70 93 9c 06 	sts	0x069C, r23
    2b02:	80 93 9d 06 	sts	0x069D, r24
    2b06:	90 93 9e 06 	sts	0x069E, r25
    2b0a:	2a e0       	ldi	r18, 0x0A	; 10
    2b0c:	37 ed       	ldi	r19, 0xD7	; 215
    2b0e:	43 ea       	ldi	r20, 0xA3	; 163
    2b10:	5d e3       	ldi	r21, 0x3D	; 61
    2b12:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9c 01       	movw	r18, r24
    2b1c:	ad 01       	movw	r20, r26
    2b1e:	60 e0       	ldi	r22, 0x00	; 0
    2b20:	70 e0       	ldi	r23, 0x00	; 0
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	0e 94 81 03 	call	0x702	; 0x702 <fmin>
    2b2a:	a6 c9       	rjmp	.-3252   	; 0x1e78 <balance+0xb2c>
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	40 e8       	ldi	r20, 0x80	; 128
    2b32:	57 e4       	ldi	r21, 0x47	; 71
    2b34:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2b38:	0c 94 e9 0c 	jmp	0x19d2	; 0x19d2 <balance+0x686>
    2b3c:	2d ec       	ldi	r18, 0xCD	; 205
    2b3e:	3c ec       	ldi	r19, 0xCC	; 204
    2b40:	4c e4       	ldi	r20, 0x4C	; 76
    2b42:	5d e3       	ldi	r21, 0x3D	; 61
    2b44:	69 81       	ldd	r22, Y+1	; 0x01
    2b46:	7a 81       	ldd	r23, Y+2	; 0x02
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4c:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	9c 01       	movw	r18, r24
    2b56:	ad 01       	movw	r20, r26
    2b58:	6a e9       	ldi	r22, 0x9A	; 154
    2b5a:	79 e9       	ldi	r23, 0x99	; 153
    2b5c:	89 e9       	ldi	r24, 0x99	; 153
    2b5e:	9e e3       	ldi	r25, 0x3E	; 62
    2b60:	0e 94 81 03 	call	0x702	; 0x702 <fmin>
    2b64:	7b 01       	movw	r14, r22
    2b66:	8c 01       	movw	r16, r24
    2b68:	60 93 c3 06 	sts	0x06C3, r22
    2b6c:	70 93 c4 06 	sts	0x06C4, r23
    2b70:	80 93 c5 06 	sts	0x06C5, r24
    2b74:	90 93 c6 06 	sts	0x06C6, r25
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e0       	ldi	r20, 0x00	; 0
    2b7e:	5f e3       	ldi	r21, 0x3F	; 63
    2b80:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	80 93 c7 06 	sts	0x06C7, r24
    2b8c:	90 93 c8 06 	sts	0x06C8, r25
    2b90:	a0 93 c9 06 	sts	0x06C9, r26
    2b94:	b0 93 ca 06 	sts	0x06CA, r27
    2b98:	9c 01       	movw	r18, r24
    2b9a:	ad 01       	movw	r20, r26
    2b9c:	c8 01       	movw	r24, r16
    2b9e:	b7 01       	movw	r22, r14
    2ba0:	0e 94 a1 04 	call	0x942	; 0x942 <set_motors>
    2ba4:	0e c2       	rjmp	.+1052   	; 0x2fc2 <balance+0x1c76>
    2ba6:	37 01       	movw	r6, r14
    2ba8:	48 01       	movw	r8, r16
    2baa:	97 fa       	bst	r9, 7
    2bac:	90 94       	com	r9
    2bae:	97 f8       	bld	r9, 7
    2bb0:	90 94       	com	r9
    2bb2:	a4 01       	movw	r20, r8
    2bb4:	93 01       	movw	r18, r6
    2bb6:	c6 01       	movw	r24, r12
    2bb8:	b5 01       	movw	r22, r10
    2bba:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
    2bbe:	87 fd       	sbrc	r24, 7
    2bc0:	8c ce       	rjmp	.-744    	; 0x28da <balance+0x158e>
    2bc2:	39 89       	ldd	r19, Y+17	; 0x11
    2bc4:	33 23       	and	r19, r19
    2bc6:	09 f0       	breq	.+2      	; 0x2bca <balance+0x187e>
    2bc8:	88 ce       	rjmp	.-752    	; 0x28da <balance+0x158e>
    2bca:	a0 90 c7 06 	lds	r10, 0x06C7
    2bce:	b0 90 c8 06 	lds	r11, 0x06C8
    2bd2:	c0 90 c9 06 	lds	r12, 0x06C9
    2bd6:	d0 90 ca 06 	lds	r13, 0x06CA
    2bda:	a8 01       	movw	r20, r16
    2bdc:	97 01       	movw	r18, r14
    2bde:	c6 01       	movw	r24, r12
    2be0:	b5 01       	movw	r22, r10
    2be2:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
    2be6:	18 16       	cp	r1, r24
    2be8:	0c f4       	brge	.+2      	; 0x2bec <balance+0x18a0>
    2bea:	77 ce       	rjmp	.-786    	; 0x28da <balance+0x158e>
    2bec:	a4 01       	movw	r20, r8
    2bee:	93 01       	movw	r18, r6
    2bf0:	c6 01       	movw	r24, r12
    2bf2:	b5 01       	movw	r22, r10
    2bf4:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
    2bf8:	87 fd       	sbrc	r24, 7
    2bfa:	6f ce       	rjmp	.-802    	; 0x28da <balance+0x158e>
    2bfc:	e0 90 43 06 	lds	r14, 0x0643
    2c00:	f0 90 44 06 	lds	r15, 0x0644
    2c04:	00 91 45 06 	lds	r16, 0x0645
    2c08:	10 91 46 06 	lds	r17, 0x0646
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	40 e8       	ldi	r20, 0x80	; 128
    2c12:	5f e3       	ldi	r21, 0x3F	; 63
    2c14:	c8 01       	movw	r24, r16
    2c16:	b7 01       	movw	r22, r14
    2c18:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
    2c1c:	18 16       	cp	r1, r24
    2c1e:	0c f4       	brge	.+2      	; 0x2c22 <balance+0x18d6>
    2c20:	5c ce       	rjmp	.-840    	; 0x28da <balance+0x158e>
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	40 e8       	ldi	r20, 0x80	; 128
    2c28:	5f eb       	ldi	r21, 0xBF	; 191
    2c2a:	c8 01       	movw	r24, r16
    2c2c:	b7 01       	movw	r22, r14
    2c2e:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
    2c32:	87 fd       	sbrc	r24, 7
    2c34:	52 ce       	rjmp	.-860    	; 0x28da <balance+0x158e>
    2c36:	60 91 67 06 	lds	r22, 0x0667
    2c3a:	70 91 68 06 	lds	r23, 0x0668
    2c3e:	80 91 69 06 	lds	r24, 0x0669
    2c42:	90 91 6a 06 	lds	r25, 0x066A
    2c46:	0e 94 48 03 	call	0x690	; 0x690 <my_fabs>
    2c4a:	7b 01       	movw	r14, r22
    2c4c:	8c 01       	movw	r16, r24
    2c4e:	80 91 1f 06 	lds	r24, 0x061F
    2c52:	90 91 20 06 	lds	r25, 0x0620
    2c56:	a0 91 21 06 	lds	r26, 0x0621
    2c5a:	b0 91 22 06 	lds	r27, 0x0622
    2c5e:	9c 01       	movw	r18, r24
    2c60:	ad 01       	movw	r20, r26
    2c62:	c8 01       	movw	r24, r16
    2c64:	b7 01       	movw	r22, r14
    2c66:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
    2c6a:	18 16       	cp	r1, r24
    2c6c:	44 f4       	brge	.+16     	; 0x2c7e <balance+0x1932>
    2c6e:	80 91 84 05 	lds	r24, 0x0584
    2c72:	99 27       	eor	r25, r25
    2c74:	8c 70       	andi	r24, 0x0C	; 12
    2c76:	90 70       	andi	r25, 0x00	; 0
    2c78:	08 97       	sbiw	r24, 0x08	; 8
    2c7a:	09 f4       	brne	.+2      	; 0x2c7e <balance+0x1932>
    2c7c:	2e ce       	rjmp	.-932    	; 0x28da <balance+0x158e>
    2c7e:	80 91 2b 06 	lds	r24, 0x062B
    2c82:	90 91 2c 06 	lds	r25, 0x062C
    2c86:	a0 91 2d 06 	lds	r26, 0x062D
    2c8a:	b0 91 2e 06 	lds	r27, 0x062E
    2c8e:	2d ec       	ldi	r18, 0xCD	; 205
    2c90:	3c ec       	ldi	r19, 0xCC	; 204
    2c92:	4c e4       	ldi	r20, 0x4C	; 76
    2c94:	5e e3       	ldi	r21, 0x3E	; 62
    2c96:	bc 01       	movw	r22, r24
    2c98:	cd 01       	movw	r24, r26
    2c9a:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
    2c9e:	88 23       	and	r24, r24
    2ca0:	0c f4       	brge	.+2      	; 0x2ca4 <balance+0x1958>
    2ca2:	1b ce       	rjmp	.-970    	; 0x28da <balance+0x158e>
    2ca4:	1a 9a       	sbi	0x03, 2	; 3
    2ca6:	8d c1       	rjmp	.+794    	; 0x2fc2 <balance+0x1c76>
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e8       	ldi	r20, 0x80	; 128
    2cae:	57 e4       	ldi	r21, 0x47	; 71
    2cb0:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2cb4:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <balance+0x7c4>
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	40 e8       	ldi	r20, 0x80	; 128
    2cbe:	57 e4       	ldi	r21, 0x47	; 71
    2cc0:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2cc4:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <balance+0x75a>
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	40 e8       	ldi	r20, 0x80	; 128
    2cce:	57 e4       	ldi	r21, 0x47	; 71
    2cd0:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2cd4:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <balance+0x6f0>
    2cd8:	a2 01       	movw	r20, r4
    2cda:	91 01       	movw	r18, r2
    2cdc:	69 85       	ldd	r22, Y+9	; 0x09
    2cde:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ce0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ce2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ce4:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
    2ce8:	88 23       	and	r24, r24
    2cea:	0c f0       	brlt	.+2      	; 0x2cee <balance+0x19a2>
    2cec:	f7 c8       	rjmp	.-3602   	; 0x1edc <balance+0xb90>
    2cee:	a4 01       	movw	r20, r8
    2cf0:	93 01       	movw	r18, r6
    2cf2:	6a a1       	ldd	r22, Y+34	; 0x22
    2cf4:	7b a1       	ldd	r23, Y+35	; 0x23
    2cf6:	8c a1       	ldd	r24, Y+36	; 0x24
    2cf8:	9d a1       	ldd	r25, Y+37	; 0x25
    2cfa:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	9c 01       	movw	r18, r24
    2d04:	ad 01       	movw	r20, r26
    2d06:	c2 01       	movw	r24, r4
    2d08:	b1 01       	movw	r22, r2
    2d0a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <fmax>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	9c 01       	movw	r18, r24
    2d14:	ad 01       	movw	r20, r26
    2d16:	6a e0       	ldi	r22, 0x0A	; 10
    2d18:	77 ed       	ldi	r23, 0xD7	; 215
    2d1a:	83 ea       	ldi	r24, 0xA3	; 163
    2d1c:	9c e3       	ldi	r25, 0x3C	; 60
    2d1e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <fmax>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	e0 90 2f 06 	lds	r14, 0x062F
    2d2a:	f0 90 30 06 	lds	r15, 0x0630
    2d2e:	00 91 31 06 	lds	r16, 0x0631
    2d32:	10 91 32 06 	lds	r17, 0x0632
    2d36:	9c 01       	movw	r18, r24
    2d38:	ad 01       	movw	r20, r26
    2d3a:	c8 01       	movw	r24, r16
    2d3c:	b7 01       	movw	r22, r14
    2d3e:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e8       	ldi	r20, 0x80	; 128
    2d4c:	50 e4       	ldi	r21, 0x40	; 64
    2d4e:	bc 01       	movw	r22, r24
    2d50:	cd 01       	movw	r24, r26
    2d52:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	9c 01       	movw	r18, r24
    2d5c:	ad 01       	movw	r20, r26
    2d5e:	69 85       	ldd	r22, Y+9	; 0x09
    2d60:	7a 85       	ldd	r23, Y+10	; 0x0a
    2d62:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d64:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d66:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <__addsf3>
    2d6a:	7b 01       	movw	r14, r22
    2d6c:	8c 01       	movw	r16, r24
    2d6e:	a2 01       	movw	r20, r4
    2d70:	91 01       	movw	r18, r2
    2d72:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
    2d76:	18 16       	cp	r1, r24
    2d78:	0c f0       	brlt	.+2      	; 0x2d7c <balance+0x1a30>
    2d7a:	a8 c8       	rjmp	.-3760   	; 0x1ecc <balance+0xb80>
    2d7c:	22 ce       	rjmp	.-956    	; 0x29c2 <balance+0x1676>
    2d7e:	80 91 17 06 	lds	r24, 0x0617
    2d82:	90 91 18 06 	lds	r25, 0x0618
    2d86:	a0 91 19 06 	lds	r26, 0x0619
    2d8a:	b0 91 1a 06 	lds	r27, 0x061A
    2d8e:	5c 01       	movw	r10, r24
    2d90:	6d 01       	movw	r12, r26
    2d92:	d7 fa       	bst	r13, 7
    2d94:	d0 94       	com	r13
    2d96:	d7 f8       	bld	r13, 7
    2d98:	d0 94       	com	r13
    2d9a:	80 91 f3 05 	lds	r24, 0x05F3
    2d9e:	90 91 f4 05 	lds	r25, 0x05F4
    2da2:	a0 91 f5 05 	lds	r26, 0x05F5
    2da6:	b0 91 f6 05 	lds	r27, 0x05F6
    2daa:	b0 58       	subi	r27, 0x80	; 128
    2dac:	2d 85       	ldd	r18, Y+13	; 0x0d
    2dae:	3e 85       	ldd	r19, Y+14	; 0x0e
    2db0:	4f 85       	ldd	r20, Y+15	; 0x0f
    2db2:	58 89       	ldd	r21, Y+16	; 0x10
    2db4:	bc 01       	movw	r22, r24
    2db6:	cd 01       	movw	r24, r26
    2db8:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	2a a1       	ldd	r18, Y+34	; 0x22
    2dc2:	3b a1       	ldd	r19, Y+35	; 0x23
    2dc4:	4c a1       	ldd	r20, Y+36	; 0x24
    2dc6:	5d a1       	ldd	r21, Y+37	; 0x25
    2dc8:	bc 01       	movw	r22, r24
    2dca:	cd 01       	movw	r24, r26
    2dcc:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    2dd0:	7b 01       	movw	r14, r22
    2dd2:	8c 01       	movw	r16, r24
    2dd4:	80 91 1b 06 	lds	r24, 0x061B
    2dd8:	90 91 1c 06 	lds	r25, 0x061C
    2ddc:	a0 91 1d 06 	lds	r26, 0x061D
    2de0:	b0 91 1e 06 	lds	r27, 0x061E
    2de4:	8e 8b       	std	Y+22, r24	; 0x16
    2de6:	9f 8b       	std	Y+23, r25	; 0x17
    2de8:	a8 8f       	std	Y+24, r26	; 0x18
    2dea:	b9 8f       	std	Y+25, r27	; 0x19
    2dec:	9c 01       	movw	r18, r24
    2dee:	ad 01       	movw	r20, r26
    2df0:	60 e0       	ldi	r22, 0x00	; 0
    2df2:	70 e0       	ldi	r23, 0x00	; 0
    2df4:	80 e8       	ldi	r24, 0x80	; 128
    2df6:	9f e3       	ldi	r25, 0x3F	; 63
    2df8:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__divsf3>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	9c 01       	movw	r18, r24
    2e02:	ad 01       	movw	r20, r26
    2e04:	c8 01       	movw	r24, r16
    2e06:	b7 01       	movw	r22, r14
    2e08:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__mulsf3>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	a6 01       	movw	r20, r12
    2e12:	95 01       	movw	r18, r10
    2e14:	bc 01       	movw	r22, r24
    2e16:	cd 01       	movw	r24, r26
    2e18:	0e 94 61 03 	call	0x6c2	; 0x6c2 <fmax>
    2e1c:	7b 01       	movw	r14, r22
    2e1e:	8c 01       	movw	r16, r24
    2e20:	60 93 6b 06 	sts	0x066B, r22
    2e24:	70 93 6c 06 	sts	0x066C, r23
    2e28:	80 93 6d 06 	sts	0x066D, r24
    2e2c:	90 93 6e 06 	sts	0x066E, r25
    2e30:	9b 01       	movw	r18, r22
    2e32:	ac 01       	movw	r20, r24
    2e34:	c3 01       	movw	r24, r6
    2e36:	b2 01       	movw	r22, r4
    2e38:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
    2e3c:	88 23       	and	r24, r24
    2e3e:	0c f0       	brlt	.+2      	; 0x2e42 <balance+0x1af6>
    2e40:	56 ca       	rjmp	.-2900   	; 0x22ee <balance+0xfa2>
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	40 e0       	ldi	r20, 0x00	; 0
    2e48:	50 e0       	ldi	r21, 0x00	; 0
    2e4a:	c8 01       	movw	r24, r16
    2e4c:	b7 01       	movw	r22, r14
    2e4e:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
    2e52:	88 23       	and	r24, r24
    2e54:	0c f4       	brge	.+2      	; 0x2e58 <balance+0x1b0c>
    2e56:	af c0       	rjmp	.+350    	; 0x2fb6 <balance+0x1c6a>
    2e58:	0f 2e       	mov	r0, r31
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	4f 2e       	mov	r4, r31
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	5f 2e       	mov	r5, r31
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	6f 2e       	mov	r6, r31
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	7f 2e       	mov	r7, r31
    2e6a:	f0 2d       	mov	r31, r0
    2e6c:	40 92 a3 06 	sts	0x06A3, r4
    2e70:	50 92 a4 06 	sts	0x06A4, r5
    2e74:	60 92 a5 06 	sts	0x06A5, r6
    2e78:	70 92 a6 06 	sts	0x06A6, r7
    2e7c:	91 e0       	ldi	r25, 0x01	; 1
    2e7e:	99 8b       	std	Y+17, r25	; 0x11
    2e80:	3e ca       	rjmp	.-2948   	; 0x22fe <balance+0xfb2>
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e0       	ldi	r20, 0x00	; 0
    2e88:	50 e0       	ldi	r21, 0x00	; 0
    2e8a:	c8 01       	movw	r24, r16
    2e8c:	b7 01       	movw	r22, r14
    2e8e:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
    2e92:	88 23       	and	r24, r24
    2e94:	0c f0       	brlt	.+2      	; 0x2e98 <balance+0x1b4c>
    2e96:	92 c0       	rjmp	.+292    	; 0x2fbc <balance+0x1c70>
    2e98:	0f 2e       	mov	r0, r31
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	4f 2e       	mov	r4, r31
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	5f 2e       	mov	r5, r31
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	6f 2e       	mov	r6, r31
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	7f 2e       	mov	r7, r31
    2eaa:	f0 2d       	mov	r31, r0
    2eac:	40 92 a3 06 	sts	0x06A3, r4
    2eb0:	50 92 a4 06 	sts	0x06A4, r5
    2eb4:	60 92 a5 06 	sts	0x06A5, r6
    2eb8:	70 92 a6 06 	sts	0x06A6, r7
    2ebc:	31 e0       	ldi	r19, 0x01	; 1
    2ebe:	39 8b       	std	Y+17, r19	; 0x11
    2ec0:	1e ca       	rjmp	.-3012   	; 0x22fe <balance+0xfb2>
    2ec2:	20 90 93 06 	lds	r2, 0x0693
    2ec6:	30 90 94 06 	lds	r3, 0x0694
    2eca:	40 90 95 06 	lds	r4, 0x0695
    2ece:	50 90 96 06 	lds	r5, 0x0696
    2ed2:	80 91 97 06 	lds	r24, 0x0697
    2ed6:	90 91 98 06 	lds	r25, 0x0698
    2eda:	a0 91 99 06 	lds	r26, 0x0699
    2ede:	b0 91 9a 06 	lds	r27, 0x069A
    2ee2:	8e 8f       	std	Y+30, r24	; 0x1e
    2ee4:	9f 8f       	std	Y+31, r25	; 0x1f
    2ee6:	a8 a3       	std	Y+32, r26	; 0x20
    2ee8:	b9 a3       	std	Y+33, r27	; 0x21
    2eea:	68 cb       	rjmp	.-2352   	; 0x25bc <balance+0x1270>
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	a0 e0       	ldi	r26, 0x00	; 0
    2ef2:	b0 e0       	ldi	r27, 0x00	; 0
    2ef4:	80 93 6f 06 	sts	0x066F, r24
    2ef8:	90 93 70 06 	sts	0x0670, r25
    2efc:	a0 93 71 06 	sts	0x0671, r26
    2f00:	b0 93 72 06 	sts	0x0672, r27
    2f04:	f9 ca       	rjmp	.-2574   	; 0x24f8 <balance+0x11ac>
    2f06:	20 91 b7 06 	lds	r18, 0x06B7
    2f0a:	30 91 b8 06 	lds	r19, 0x06B8
    2f0e:	40 91 b9 06 	lds	r20, 0x06B9
    2f12:	50 91 ba 06 	lds	r21, 0x06BA
    2f16:	2e a3       	std	Y+38, r18	; 0x26
    2f18:	3f a3       	std	Y+39, r19	; 0x27
    2f1a:	48 a7       	std	Y+40, r20	; 0x28
    2f1c:	59 a7       	std	Y+41, r21	; 0x29
    2f1e:	ba ca       	rjmp	.-2700   	; 0x2494 <balance+0x1148>
    2f20:	6a e0       	ldi	r22, 0x0A	; 10
    2f22:	77 ed       	ldi	r23, 0xD7	; 215
    2f24:	83 e2       	ldi	r24, 0x23	; 35
    2f26:	9c e3       	ldi	r25, 0x3C	; 60
    2f28:	0e 94 a3 05 	call	0xb46	; 0xb46 <update_hwadj>
    2f2c:	80 91 2b 06 	lds	r24, 0x062B
    2f30:	90 91 2c 06 	lds	r25, 0x062C
    2f34:	a0 91 2d 06 	lds	r26, 0x062D
    2f38:	b0 91 2e 06 	lds	r27, 0x062E
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	40 e0       	ldi	r20, 0x00	; 0
    2f42:	50 e4       	ldi	r21, 0x40	; 64
    2f44:	bc 01       	movw	r22, r24
    2f46:	cd 01       	movw	r24, r26
    2f48:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__gesf2>
    2f4c:	18 16       	cp	r1, r24
    2f4e:	cc f5       	brge	.+114    	; 0x2fc2 <balance+0x1c76>
    2f50:	1a 98       	cbi	0x03, 2	; 3
    2f52:	f8 94       	cli
void 
eeprom_write_block (const void *pointer_ram,
                    void *pointer_eeprom,
                    size_t n)
{
    2f54:	ef e9       	ldi	r30, 0x9F	; 159
    2f56:	f5 e0       	ldi	r31, 0x05	; 5
    2f58:	a0 e0       	ldi	r26, 0x00	; 0
    2f5a:	b0 e0       	ldi	r27, 0x00	; 0
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 

      __asm__ __volatile__ ( 
            ".%=_start:" CR_TAB
            "sbiw %2,1" CR_TAB
            "brlt .%=_finished" CR_TAB
            "ld __tmp_reg__,z+" CR_TAB
             XCALL " __eeprom_write_byte_" _REG_LOCATION_SUFFIX CR_TAB
            "rjmp .%=_start" CR_TAB
            ".%=_finished:" 
          : "=x" (pointer_eeprom),
            "=z" (pointer_ram),
            "+w" (size)
           : "x" (pointer_eeprom), 
             "z" (pointer_ram)
           : "memory");
    }
  else
    {
      /* Do nothing for compile time constant transfer size n == 0.  */
      if (n != 0)
        {
          if (n == 256)
            {
              __asm__ __volatile__ (
                 XCALL " __eeprom_write_block_" _REG_LOCATION_SUFFIX
               : "+x" (pointer_eeprom),
                 "=z" (pointer_ram)
               : "z"  (pointer_ram)
               : "memory" );
            }
          else
            {
              uint8_t len;
              len = (uint8_t) n;
    2f5c:	84 e1       	ldi	r24, 0x14	; 20

              __asm__ __volatile__ (
    2f5e:	18 2e       	mov	r1, r24
    2f60:	0e 94 b0 20 	call	0x4160	; 0x4160 <__eeprom_write_block_1C1D1E>
    2f64:	78 94       	sei
    2f66:	14 e0       	ldi	r17, 0x04	; 4
    2f68:	10 93 f3 06 	sts	0x06F3, r17
    2f6c:	2a c0       	rjmp	.+84     	; 0x2fc2 <balance+0x1c76>
    2f6e:	20 90 93 06 	lds	r2, 0x0693
    2f72:	30 90 94 06 	lds	r3, 0x0694
    2f76:	40 90 95 06 	lds	r4, 0x0695
    2f7a:	50 90 96 06 	lds	r5, 0x0696
    2f7e:	20 91 97 06 	lds	r18, 0x0697
    2f82:	30 91 98 06 	lds	r19, 0x0698
    2f86:	40 91 99 06 	lds	r20, 0x0699
    2f8a:	50 91 9a 06 	lds	r21, 0x069A
    2f8e:	2e 8f       	std	Y+30, r18	; 0x1e
    2f90:	3f 8f       	std	Y+31, r19	; 0x1f
    2f92:	48 a3       	std	Y+32, r20	; 0x20
    2f94:	59 a3       	std	Y+33, r21	; 0x21
    2f96:	12 cb       	rjmp	.-2524   	; 0x25bc <balance+0x1270>
    2f98:	80 91 b7 06 	lds	r24, 0x06B7
    2f9c:	90 91 b8 06 	lds	r25, 0x06B8
    2fa0:	a0 91 b9 06 	lds	r26, 0x06B9
    2fa4:	b0 91 ba 06 	lds	r27, 0x06BA
    2fa8:	a8 01       	movw	r20, r16
    2faa:	97 01       	movw	r18, r14
    2fac:	bc 01       	movw	r22, r24
    2fae:	cd 01       	movw	r24, r26
    2fb0:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    2fb4:	63 ca       	rjmp	.-2874   	; 0x247c <balance+0x1130>
    2fb6:	27 01       	movw	r4, r14
    2fb8:	38 01       	movw	r6, r16
    2fba:	58 cf       	rjmp	.-336    	; 0x2e6c <balance+0x1b20>
    2fbc:	27 01       	movw	r4, r14
    2fbe:	38 01       	movw	r6, r16
    2fc0:	75 cf       	rjmp	.-278    	; 0x2eac <balance+0x1b60>
    2fc2:	a9 96       	adiw	r28, 0x29	; 41
    2fc4:	0f b6       	in	r0, 0x3f	; 63
    2fc6:	f8 94       	cli
    2fc8:	de bf       	out	0x3e, r29	; 62
    2fca:	0f be       	out	0x3f, r0	; 63
    2fcc:	cd bf       	out	0x3d, r28	; 61
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	ff 90       	pop	r15
    2fd8:	ef 90       	pop	r14
    2fda:	df 90       	pop	r13
    2fdc:	cf 90       	pop	r12
    2fde:	bf 90       	pop	r11
    2fe0:	af 90       	pop	r10
    2fe2:	9f 90       	pop	r9
    2fe4:	8f 90       	pop	r8
    2fe6:	7f 90       	pop	r7
    2fe8:	6f 90       	pop	r6
    2fea:	5f 90       	pop	r5
    2fec:	4f 90       	pop	r4
    2fee:	3f 90       	pop	r3
    2ff0:	2f 90       	pop	r2
    2ff2:	08 95       	ret

00002ff4 <timer_init>:
      bs.left_pwm < -bc.beep_speed_lim ||
      at_limit ||
#ifdef DO_STEERING
      bs.right_pwm > bc.beep_speed_lim || bs.right_pwm < -bc.beep_speed_lim ||
      bs.steering > 1.0 || bs.steering < -1.0 ||
#endif
#ifdef DO_BAT
      (bs.bat_voltage < 0.5 && (bal_tickno & 0x38) == 0x00) ||
      (bs.bat_speed_lim < 0.25 && (bal_tickno & 0x38) == 0x20) ||
#endif
#if defined(__BAL2__)
      ((fabs(bs.b1is) > bc.fuse_alarm_thresh || fabs(bs.b2is) > bc.fuse_alarm_thresh) && (bal_tickno & 0x0c) == 0x08) ||
#endif
#if defined(__BAL3__) || defined(__BAL4__)
      ((fabs(bs.batis) > bc.fuse_alarm_thresh) && (bal_tickno & 0x0c) == 0x08) ||
#endif
#if defined(__BAL3__) && !defined(__JORDANWAY__)
      ((bs.pwmtempa > 0.7 || bs.pwmtempb > 0.7 || bs.pwmtempc > 0.7 || bs.pwmtempd > 0.7) && (bal_tickno&0x40)==0x00) ||
#endif
      (1 && bs.realtime < 0.2) ||
       0
      ) {
    set0_beeper();
  } else {
    set1_beeper();
  }
#endif

#ifdef DO_BAT

  float weight = bs.interval;
  bs.bat.s1 += weight;
  bs.bat.si += bs.batis * weight;
  bs.bat.sii += bs.batis * bs.batis * weight;
  bs.bat.sv += bs.bat_voltage * weight;
  bs.bat.svv += bs.bat_voltage * bs.bat_voltage * weight;
  bs.bat.siv += bs.bat_voltage * bs.batis * weight;

  time_since_bat_update += bs.interval;

  /* Every second, update bat_speed_lim by estimating the battery resistance */

  if (time_since_bat_update >= 0.1) {
    bs.bat.delta = bs.bat.s1 * bs.bat.sii - bs.bat.si * bs.bat.si;
    float idelta = (bs.bat.delta<=0.0) ? 10.0 : 1.0/bs.bat.delta;
    bs.bat.resistance = (bs.bat.s1 * bs.bat.siv - bs.bat.sv * bs.bat.si) * idelta; // normally negative
    bs.bat.ocvoltage = (bs.bat.sii * bs.bat.sv - bs.bat.si * bs.bat.siv) * idelta;
  
    bs.bat.sigma_ocvoltage = sqrt(bs.bat.sii * idelta);
    bs.bat.sigma_resistance = sqrt(bs.bat.s1 * idelta);

    
    float max_current = 0.4; // The maximum current I want to be able to draw (0.4=40 amps)
    float max_bt = 0.2;

    bs.bat.fullloadvoltage = fmin(0.8, bs.bat.ocvoltage) + max_current * fmin(-0.15, bs.bat.resistance);

    // compare to the way cmd is generated from cur_speed_est and
    // balance_torque. This allows balance_torque up to 0.3
    // Maybe I should weight this according to delta, since that reflects how much variation
    // in current there was.

    if (bs.bat.delta>2.0) {
      lpf_update(&bs.bat_speed_lim,
                 40.0,
                 time_since_bat_update * bs.bat.delta / 10.0,
                 fmax(0.15, bs.bat.fullloadvoltage * 1.5626 - bc.motor_torque_factor * max_bt));
    }
    time_since_bat_update = 0.0;

    bs.bat.s1 *= 0.99;
    bs.bat.si *= 0.99;
    bs.bat.sii *= 0.99;
    bs.bat.sv *= 0.99;
    bs.bat.svv *= 0.99;
    bs.bat.siv *= 0.99;
                 
  }
#endif

#ifdef DO_MISSION_LOG
  lpf_update(&mission_accum.bat_voltage, 0.5, bs.interval, bs.bat_voltage);
  lpf_update(&mission_accum.bat_current, 0.5, bs.interval, bs.batis);
  lpf_update(&mission_accum.bat_resistance, 0.5, bs.interval, bs.bat.resistance);
  lpf_update(&mission_accum.bat_ocvoltage, 0.5, bs.interval, bs.bat.ocvoltage);
  lpf_update(&mission_accum.cur_speed_est, 0.5, bs.interval, bs.cur_speed_est);

  time_since_mission_save += bs.interval;
  if (time_since_mission_save >= 1.0) {
    mission_accum.realtime = bs.realtime;
    
    eeprom_write_bg(&mission_accum, sizeof(mission_accum),
                    mission_index*sizeof(mission_accum));
    mission_index = (mission_index+1) % N_MISSION_ENTRIES;
  }
#endif

}

void
timer_init(void)
{
  /*
    Timer 1:

    PWM mode is "PWM, Phase Correct, 9-bit"
    14 MHz / 1 / 512 / 2 gives 14 kHz, just inaudible

  */

  TCCR1A = 0 |
    2ff4:	82 ee       	ldi	r24, 0xE2	; 226
    2ff6:	8f bd       	out	0x2f, r24	; 47
    (1<<COM1A1) | (1<<COM1A0) | // clear on match up, set on match down
    (1<<COM1B1) | (0<<COM1B0) | // set on match up, clear on match down
#if OCR1_MAX==1023
    (1<<WGM11) | (1<<WGM10);
#elif OCR1_MAX==511
    (1<<WGM11);
#elif OCR1_MAX==255
    (1<<WGM10);
#else
#error "Unknown OCR1_MAX"
#endif

  TCCR1B = 0 |
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	8e bd       	out	0x2e, r24	; 46
    (1<<CS10); // prescaler divide by 1


  /*
    Timer 3:
    
    Frequency is about 14 kHz, so it overflows every 4.5 seconds
  */

  TCCR3A = 0;
    2ffc:	10 92 8b 00 	sts	0x008B, r1
  TCCR3B = 0 |
    3000:	85 e0       	ldi	r24, 0x05	; 5
    3002:	80 93 8a 00 	sts	0x008A, r24
    (1<<CS32) | (0<<CS31) | (1<<CS30); // prescale clk/1024
  timer3_seconds_conv = 1.0/((float)CLOCK_SPEED/1024);
    3006:	84 eb       	ldi	r24, 0xB4	; 180
    3008:	92 ea       	ldi	r25, 0xA2	; 162
    300a:	a1 e9       	ldi	r26, 0x91	; 145
    300c:	b8 e3       	ldi	r27, 0x38	; 56
    300e:	80 93 80 05 	sts	0x0580, r24
    3012:	90 93 81 05 	sts	0x0581, r25
    3016:	a0 93 82 05 	sts	0x0582, r26
    301a:	b0 93 83 05 	sts	0x0583, r27
    301e:	08 95       	ret

00003020 <handle_rx>:

}

/*
  Receive a packet over the serial port.
 */
void
handle_rx()
{
    3020:	ef 92       	push	r14
    3022:	ff 92       	push	r15
    3024:	1f 93       	push	r17
    3026:	cf 93       	push	r28
    3028:	df 93       	push	r29
    302a:	cd b7       	in	r28, 0x3d	; 61
    302c:	de b7       	in	r29, 0x3e	; 62
    302e:	22 97       	sbiw	r28, 0x02	; 2
    3030:	0f b6       	in	r0, 0x3f	; 63
    3032:	f8 94       	cli
    3034:	de bf       	out	0x3e, r29	; 62
    3036:	0f be       	out	0x3f, r0	; 63
    3038:	cd bf       	out	0x3d, r28	; 61
  uint8_t *pkt;
  uint8_t pktlen=pkt_rx(&pkt);
    303a:	ce 01       	movw	r24, r28
    303c:	01 96       	adiw	r24, 0x01	; 1
    303e:	0e 94 6d 1c 	call	0x38da	; 0x38da <pkt_rx>
    3042:	28 2f       	mov	r18, r24
  if (!pktlen) return;
    3044:	88 23       	and	r24, r24
    3046:	09 f4       	brne	.+2      	; 0x304a <handle_rx+0x2a>
    3048:	a9 c0       	rjmp	.+338    	; 0x319c <handle_rx+0x17c>

  uint8_t cmd=pkt[0];
    304a:	e9 81       	ldd	r30, Y+1	; 0x01
    304c:	fa 81       	ldd	r31, Y+2	; 0x02
    304e:	80 81       	ld	r24, Z
  /* Send current bal_state */
  if (cmd=='C' && pktlen==1) {
    3050:	83 34       	cpi	r24, 0x43	; 67
    3052:	79 f0       	breq	.+30     	; 0x3072 <handle_rx+0x52>
    pkt_tx_start();
    pkt_tx_uint8('c');
    for (uint8_t i=0; i<sizeof(bs); i++) {
      pkt_tx_uint8(((uint8_t *)&bs)[i]);
    }
    pkt_tx_end();
  }
  /* Send current bal_config */
  else if (cmd=='R' && pktlen==1) {
    3054:	82 35       	cpi	r24, 0x52	; 82
    3056:	09 f4       	brne	.+2      	; 0x305a <handle_rx+0x3a>
    3058:	44 c0       	rjmp	.+136    	; 0x30e2 <handle_rx+0xc2>
    pkt_tx_start();
    pkt_tx_uint8('r');
    for (uint8_t i=0; i<sizeof(bc); i++) {
      pkt_tx_uint8(((uint8_t *)&bc)[i]);
    }
    pkt_tx_end();
  }
  /* Send current bal_hwadj */
  else if (cmd=='H' && pktlen==1) {
    305a:	88 34       	cpi	r24, 0x48	; 72
    305c:	09 f4       	brne	.+2      	; 0x3060 <handle_rx+0x40>
    305e:	59 c0       	rjmp	.+178    	; 0x3112 <handle_rx+0xf2>
    pkt_tx_start();
    pkt_tx_uint8('h');
    for (uint8_t i=0; i<sizeof(bh); i++) {
      pkt_tx_uint8(((uint8_t *)&bh)[i]);
    }
    pkt_tx_end();
  }

  /* Accept new bal_hwadj */
  else if (cmd=='A' && pktlen==1+sizeof(struct bal_hwadj)) {
    3060:	81 34       	cpi	r24, 0x41	; 65
    3062:	f9 f0       	breq	.+62     	; 0x30a2 <handle_rx+0x82>
    struct bal_hwadj *newbh = (struct bal_hwadj *)(pkt+1);
    pkt_tx_start();
    pkt_tx_uint8('a');
    if (bal_hwadj_validate(newbh)) {
      bh = *newbh;
      pkt_tx_uint8(1);
    } else {
      pkt_tx_uint8(0);
    }
    pkt_tx_end();
  }

  /* Accept new bal_config */
  else if (cmd=='W' && pktlen==1+sizeof(struct bal_config)) {
    3064:	87 35       	cpi	r24, 0x57	; 87
    3066:	09 f4       	brne	.+2      	; 0x306a <handle_rx+0x4a>
    3068:	6c c0       	rjmp	.+216    	; 0x3142 <handle_rx+0x122>
    struct bal_config *newbc = (struct bal_config *)(pkt+1);
    pkt_tx_start();
    pkt_tx_uint8('w');
    if (bal_config_validate(newbc)) {
      bc = *newbc;
      pkt_tx_uint8(1);
    } else {
      pkt_tx_uint8(0);
    }
    pkt_tx_end();
  }

#ifdef DO_DRIVE
  /* Accept drive command */
  else if (cmd=='D' && pktlen==1+sizeof(struct bal_drive)) {
    struct bal_drive *newbd = (struct bal_drive *)(pkt+1);
    pkt_tx_start();
    pkt_tx_uint8('d');
    if (bal_drive_validate(newbd)) {
      bs.drive = *newbd;
      bs.drive_age = 0.0;
      pkt_tx_uint8(1);
    } else {
      pkt_tx_uint8(0);
    }
    pkt_tx_end();
  }
#endif

  /* Reboot request, handy for uploading new firmware without hitting the big red button */
  else if (cmd=='Q' && pktlen==6) {
    306a:	81 35       	cpi	r24, 0x51	; 81
    306c:	09 f0       	breq	.+2      	; 0x3070 <handle_rx+0x50>
    306e:	96 c0       	rjmp	.+300    	; 0x319c <handle_rx+0x17c>
    3070:	7c c0       	rjmp	.+248    	; 0x316a <handle_rx+0x14a>
    3072:	21 30       	cpi	r18, 0x01	; 1
    3074:	09 f0       	breq	.+2      	; 0x3078 <handle_rx+0x58>
    3076:	92 c0       	rjmp	.+292    	; 0x319c <handle_rx+0x17c>
    3078:	0e 94 ca 1a 	call	0x3594	; 0x3594 <pkt_tx_start>
    307c:	83 e6       	ldi	r24, 0x63	; 99
    307e:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    3082:	10 e0       	ldi	r17, 0x00	; 0
    3084:	3b e2       	ldi	r19, 0x2B	; 43
    3086:	e3 2e       	mov	r14, r19
    3088:	36 e0       	ldi	r19, 0x06	; 6
    308a:	f3 2e       	mov	r15, r19
    308c:	d7 01       	movw	r26, r14
    308e:	8d 91       	ld	r24, X+
    3090:	7d 01       	movw	r14, r26
    3092:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    3096:	1f 5f       	subi	r17, 0xFF	; 255
    3098:	1a 3c       	cpi	r17, 0xCA	; 202
    309a:	c0 f3       	brcs	.-16     	; 0x308c <handle_rx+0x6c>
    309c:	0e 94 33 1c 	call	0x3866	; 0x3866 <pkt_tx_end>
    30a0:	7d c0       	rjmp	.+250    	; 0x319c <handle_rx+0x17c>
    30a2:	25 31       	cpi	r18, 0x15	; 21
    30a4:	09 f0       	breq	.+2      	; 0x30a8 <handle_rx+0x88>
    30a6:	7a c0       	rjmp	.+244    	; 0x319c <handle_rx+0x17c>
    30a8:	7f 01       	movw	r14, r30
    30aa:	08 94       	sec
    30ac:	e1 1c       	adc	r14, r1
    30ae:	f1 1c       	adc	r15, r1
    30b0:	0e 94 ca 1a 	call	0x3594	; 0x3594 <pkt_tx_start>
    30b4:	81 e6       	ldi	r24, 0x61	; 97
    30b6:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    30ba:	c7 01       	movw	r24, r14
    30bc:	0e 94 92 06 	call	0xd24	; 0xd24 <bal_hwadj_validate>
    30c0:	89 2b       	or	r24, r25
    30c2:	09 f4       	brne	.+2      	; 0x30c6 <handle_rx+0xa6>
    30c4:	69 c0       	rjmp	.+210    	; 0x3198 <handle_rx+0x178>
    30c6:	84 e1       	ldi	r24, 0x14	; 20
    30c8:	ef e9       	ldi	r30, 0x9F	; 159
    30ca:	f5 e0       	ldi	r31, 0x05	; 5
    30cc:	d7 01       	movw	r26, r14
    30ce:	0d 90       	ld	r0, X+
    30d0:	01 92       	st	Z+, r0
    30d2:	8a 95       	dec	r24
    30d4:	e1 f7       	brne	.-8      	; 0x30ce <handle_rx+0xae>
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    30dc:	0e 94 33 1c 	call	0x3866	; 0x3866 <pkt_tx_end>
    30e0:	5d c0       	rjmp	.+186    	; 0x319c <handle_rx+0x17c>
    30e2:	21 30       	cpi	r18, 0x01	; 1
    30e4:	09 f0       	breq	.+2      	; 0x30e8 <handle_rx+0xc8>
    30e6:	5a c0       	rjmp	.+180    	; 0x319c <handle_rx+0x17c>
    30e8:	0e 94 ca 1a 	call	0x3594	; 0x3594 <pkt_tx_start>
    30ec:	82 e7       	ldi	r24, 0x72	; 114
    30ee:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    30f2:	2f ed       	ldi	r18, 0xDF	; 223
    30f4:	e2 2e       	mov	r14, r18
    30f6:	25 e0       	ldi	r18, 0x05	; 5
    30f8:	f2 2e       	mov	r15, r18
    30fa:	1b e4       	ldi	r17, 0x4B	; 75
    30fc:	f7 01       	movw	r30, r14
    30fe:	81 91       	ld	r24, Z+
    3100:	7f 01       	movw	r14, r30
    3102:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    3106:	11 50       	subi	r17, 0x01	; 1
    3108:	17 ff       	sbrs	r17, 7
    310a:	f8 cf       	rjmp	.-16     	; 0x30fc <handle_rx+0xdc>
    310c:	0e 94 33 1c 	call	0x3866	; 0x3866 <pkt_tx_end>
    3110:	45 c0       	rjmp	.+138    	; 0x319c <handle_rx+0x17c>
    3112:	21 30       	cpi	r18, 0x01	; 1
    3114:	09 f0       	breq	.+2      	; 0x3118 <handle_rx+0xf8>
    3116:	42 c0       	rjmp	.+132    	; 0x319c <handle_rx+0x17c>
    3118:	0e 94 ca 1a 	call	0x3594	; 0x3594 <pkt_tx_start>
    311c:	88 e6       	ldi	r24, 0x68	; 104
    311e:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    3122:	9f e9       	ldi	r25, 0x9F	; 159
    3124:	e9 2e       	mov	r14, r25
    3126:	95 e0       	ldi	r25, 0x05	; 5
    3128:	f9 2e       	mov	r15, r25
    312a:	13 e1       	ldi	r17, 0x13	; 19
    312c:	d7 01       	movw	r26, r14
    312e:	8d 91       	ld	r24, X+
    3130:	7d 01       	movw	r14, r26
    3132:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    3136:	11 50       	subi	r17, 0x01	; 1
    3138:	17 ff       	sbrs	r17, 7
    313a:	f8 cf       	rjmp	.-16     	; 0x312c <handle_rx+0x10c>
    313c:	0e 94 33 1c 	call	0x3866	; 0x3866 <pkt_tx_end>
    3140:	2d c0       	rjmp	.+90     	; 0x319c <handle_rx+0x17c>
    3142:	2d 34       	cpi	r18, 0x4D	; 77
    3144:	59 f5       	brne	.+86     	; 0x319c <handle_rx+0x17c>
    3146:	7f 01       	movw	r14, r30
    3148:	08 94       	sec
    314a:	e1 1c       	adc	r14, r1
    314c:	f1 1c       	adc	r15, r1
    314e:	0e 94 ca 1a 	call	0x3594	; 0x3594 <pkt_tx_start>
    3152:	87 e7       	ldi	r24, 0x77	; 119
    3154:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    3158:	c7 01       	movw	r24, r14
    315a:	0e 94 1f 07 	call	0xe3e	; 0xe3e <bal_config_validate>
    315e:	89 2b       	or	r24, r25
    3160:	d9 f0       	breq	.+54     	; 0x3198 <handle_rx+0x178>
    3162:	8c e4       	ldi	r24, 0x4C	; 76
    3164:	ef ed       	ldi	r30, 0xDF	; 223
    3166:	f5 e0       	ldi	r31, 0x05	; 5
    3168:	b1 cf       	rjmp	.-158    	; 0x30cc <handle_rx+0xac>
    316a:	26 30       	cpi	r18, 0x06	; 6
    316c:	b9 f4       	brne	.+46     	; 0x319c <handle_rx+0x17c>
    // Only 'l33t people can reboot it. 
    // (This is mainly just so line noise on the serial port doesn't hose me)
    if (pkt[1] != '3' || pkt[2] != 'b' || pkt[3] != '0' || pkt[4] != '0' || pkt[5] != 't') return;
    316e:	81 81       	ldd	r24, Z+1	; 0x01
    3170:	83 33       	cpi	r24, 0x33	; 51
    3172:	a1 f4       	brne	.+40     	; 0x319c <handle_rx+0x17c>
    3174:	82 81       	ldd	r24, Z+2	; 0x02
    3176:	82 36       	cpi	r24, 0x62	; 98
    3178:	89 f4       	brne	.+34     	; 0x319c <handle_rx+0x17c>
    317a:	83 81       	ldd	r24, Z+3	; 0x03
    317c:	80 33       	cpi	r24, 0x30	; 48
    317e:	71 f4       	brne	.+28     	; 0x319c <handle_rx+0x17c>
    3180:	84 81       	ldd	r24, Z+4	; 0x04
    3182:	80 33       	cpi	r24, 0x30	; 48
    3184:	59 f4       	brne	.+22     	; 0x319c <handle_rx+0x17c>
    3186:	85 81       	ldd	r24, Z+5	; 0x05
    3188:	84 37       	cpi	r24, 0x74	; 116
    318a:	41 f4       	brne	.+16     	; 0x319c <handle_rx+0x17c>
      
    set_motor_idle();
    318c:	0e 94 71 05 	call	0xae2	; 0xae2 <set_motor_idle>

    // I could be more careful and turn off all the interrupt sources, but this should work too.
    cli();
    3190:	f8 94       	cli
    void (*funcptr)();
    funcptr = (void (*)()) 0x1f800L; // XXX fragile, specific to ATMega128
    funcptr();
    3192:	ff 95 00 fc 	call	0x7ff800	; 0x7ff800 <__data_load_end+0x7fb662>
    3196:	02 c0       	rjmp	.+4      	; 0x319c <handle_rx+0x17c>
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	9e cf       	rjmp	.-196    	; 0x30d8 <handle_rx+0xb8>
    319c:	22 96       	adiw	r28, 0x02	; 2
    319e:	0f b6       	in	r0, 0x3f	; 63
    31a0:	f8 94       	cli
    31a2:	de bf       	out	0x3e, r29	; 62
    31a4:	0f be       	out	0x3f, r0	; 63
    31a6:	cd bf       	out	0x3d, r28	; 61
    31a8:	df 91       	pop	r29
    31aa:	cf 91       	pop	r28
    31ac:	1f 91       	pop	r17
    31ae:	ff 90       	pop	r15
    31b0:	ef 90       	pop	r14
    31b2:	08 95       	ret

000031b4 <barf>:
  }

  else {
    // discard cmd
  }
}

void barf()
{
  adc_disable();
    31b4:	0e 94 ab 19 	call	0x3356	; 0x3356 <adc_disable>
  set_motor_idle();
    31b8:	0e 94 71 05 	call	0xae2	; 0xae2 <set_motor_idle>
  while (1) {
    if (uart_tx_empty()) {
    31bc:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <uart_tx_empty>
    31c0:	88 23       	and	r24, r24
    31c2:	e1 f3       	breq	.-8      	; 0x31bc <barf+0x8>
      dump_adc_log();
    31c4:	0e 94 5f 1a 	call	0x34be	; 0x34be <dump_adc_log>
    31c8:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <uart_tx_empty>
    31cc:	88 23       	and	r24, r24
    31ce:	b1 f3       	breq	.-20     	; 0x31bc <barf+0x8>
    31d0:	f9 cf       	rjmp	.-14     	; 0x31c4 <barf+0x10>

000031d2 <update_leds>:
    }
  }
}

int8_t led_counter;
void update_leds()
{
    31d2:	08 95       	ret

000031d4 <main>:
#ifdef __BAL4__
  led_counter=(led_counter+1)&15;
  
  float angle_thresh=(led_counter+1) * 0.03125;
  
  set0_led1();
  set0_led2();
  set0_led3();

  if (bs.lpf_angle > angle_thresh) set1_led1();
  else if (bs.lpf_angle < -angle_thresh) set1_led2();

  //if (led_counter==0) set1_led3();
#endif
}

/* Sending data just when the Free2Move serial port dongle is powered on seems to hose it,
   so we give the first beacon after 2 seconds */
float timetonext_beacon=2.0;

#define VERSION "bal 2.0"

int main( void )
{
    31d4:	cf ef       	ldi	r28, 0xFF	; 255
    31d6:	d0 e1       	ldi	r29, 0x10	; 16
    31d8:	de bf       	out	0x3e, r29	; 62
    31da:	cd bf       	out	0x3d, r28	; 61
  timer_init();
    31dc:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <timer_init>
  io_init();
    31e0:	0e 94 b5 02 	call	0x56a	; 0x56a <io_init>
  uart_init_tx();
    31e4:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <uart_init_tx>
  uart_init_rx();
    31e8:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <uart_init_rx>

  sei();
    31ec:	78 94       	sei

  PKT_ANNOUNCE_VERSION(VERSION);
    31ee:	0e 94 ca 1a 	call	0x3594	; 0x3594 <pkt_tx_start>
    31f2:	85 eb       	ldi	r24, 0xB5	; 181
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <pkt_tx_str_P>
    31fa:	0e 94 33 1c 	call	0x3866	; 0x3866 <pkt_tx_end>

  adc_init();
    31fe:	0e 94 9f 19 	call	0x333e	; 0x333e <adc_init>
    3202:	96 9a       	sbi	0x12, 6	; 18
  set1_led2();
  adc_stabilize();
    3204:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <adc_stabilize>
    3208:	96 98       	cbi	0x12, 6	; 18
  set0_led2();
  balance_init();
    320a:	0e 94 16 09 	call	0x122c	; 0x122c <balance_init>
    320e:	97 98       	cbi	0x12, 7	; 18
    3210:	96 98       	cbi	0x12, 6	; 18
    3212:	0f 2e       	mov	r0, r31
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	af 2e       	mov	r10, r31
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	bf 2e       	mov	r11, r31
    321c:	f0 e0       	ldi	r31, 0x00	; 0
    321e:	cf 2e       	mov	r12, r31
    3220:	ff e3       	ldi	r31, 0x3F	; 63
    3222:	df 2e       	mov	r13, r31
    3224:	f0 2d       	mov	r31, r0

  set0_led1();
  set0_led2();

  while (1) {


    if (uart_tx_empty()) {
    3226:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <uart_tx_empty>
    322a:	88 23       	and	r24, r24
    322c:	b9 f5       	brne	.+110    	; 0x329c <main+0xc8>
      handle_rx();
    }

    //dump_adc_log();

    if (adc_collect_samples(samples, &last_balance_s0, ADCNO_BAT_VOLTAGE)) {
    322e:	40 e0       	ldi	r20, 0x00	; 0
    3230:	6f e0       	ldi	r22, 0x0F	; 15
    3232:	71 e0       	ldi	r23, 0x01	; 1
    3234:	83 eb       	ldi	r24, 0xB3	; 179
    3236:	95 e0       	ldi	r25, 0x05	; 5
    3238:	0e 94 ad 19 	call	0x335a	; 0x335a <adc_collect_samples>
    323c:	88 23       	and	r24, r24
    323e:	c9 f5       	brne	.+114    	; 0x32b2 <main+0xde>
    3240:	60 91 00 01 	lds	r22, 0x0100
    3244:	70 91 01 01 	lds	r23, 0x0101
    3248:	80 91 02 01 	lds	r24, 0x0102
    324c:	90 91 03 01 	lds	r25, 0x0103
      /* The brightness of LED2 gives us an idea how much of the time we're calculating
         as opposed to waiting for new ADC samples */
      update_leds();
      balance();

      timetonext_beacon -= bs.interval;
    }

    /* Send periodic beacons to inform balctl that we're here */
    if (timetonext_beacon <= 0.0 && uart_tx_empty()) {
    3250:	20 e0       	ldi	r18, 0x00	; 0
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	40 e0       	ldi	r20, 0x00	; 0
    3256:	50 e0       	ldi	r21, 0x00	; 0
    3258:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__eqsf2>
    325c:	18 16       	cp	r1, r24
    325e:	1c f3       	brlt	.-58     	; 0x3226 <main+0x52>
    3260:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <uart_tx_empty>
    3264:	88 23       	and	r24, r24
    3266:	f9 f2       	breq	.-66     	; 0x3226 <main+0x52>
      timetonext_beacon = 0.5;
    3268:	a0 92 00 01 	sts	0x0100, r10
    326c:	b0 92 01 01 	sts	0x0101, r11
    3270:	c0 92 02 01 	sts	0x0102, r12
    3274:	d0 92 03 01 	sts	0x0103, r13
      PKT_ANNOUNCE_VERSION(VERSION);
    3278:	0e 94 ca 1a 	call	0x3594	; 0x3594 <pkt_tx_start>
    327c:	8e eb       	ldi	r24, 0xBE	; 190
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <pkt_tx_str_P>
    3284:	0e 94 33 1c 	call	0x3866	; 0x3866 <pkt_tx_end>
      err_tx_start();
    3288:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <err_tx_start>
      err_tx_comm();
    328c:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <err_tx_comm>
      err_tx_end();
    3290:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <err_tx_end>
    3294:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <uart_tx_empty>
    3298:	88 23       	and	r24, r24
    329a:	49 f2       	breq	.-110    	; 0x322e <main+0x5a>
    329c:	0e 94 10 18 	call	0x3020	; 0x3020 <handle_rx>
    32a0:	40 e0       	ldi	r20, 0x00	; 0
    32a2:	6f e0       	ldi	r22, 0x0F	; 15
    32a4:	71 e0       	ldi	r23, 0x01	; 1
    32a6:	83 eb       	ldi	r24, 0xB3	; 179
    32a8:	95 e0       	ldi	r25, 0x05	; 5
    32aa:	0e 94 ad 19 	call	0x335a	; 0x335a <adc_collect_samples>
    32ae:	88 23       	and	r24, r24
    32b0:	39 f2       	breq	.-114    	; 0x3240 <main+0x6c>
    32b2:	0e 94 a6 09 	call	0x134c	; 0x134c <balance>
    32b6:	e0 90 00 01 	lds	r14, 0x0100
    32ba:	f0 90 01 01 	lds	r15, 0x0101
    32be:	00 91 02 01 	lds	r16, 0x0102
    32c2:	10 91 03 01 	lds	r17, 0x0103
    32c6:	80 91 2f 06 	lds	r24, 0x062F
    32ca:	90 91 30 06 	lds	r25, 0x0630
    32ce:	a0 91 31 06 	lds	r26, 0x0631
    32d2:	b0 91 32 06 	lds	r27, 0x0632
    32d6:	9c 01       	movw	r18, r24
    32d8:	ad 01       	movw	r20, r26
    32da:	c8 01       	movw	r24, r16
    32dc:	b7 01       	movw	r22, r14
    32de:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__subsf3>
    32e2:	60 93 00 01 	sts	0x0100, r22
    32e6:	70 93 01 01 	sts	0x0101, r23
    32ea:	80 93 02 01 	sts	0x0102, r24
    32ee:	90 93 03 01 	sts	0x0103, r25
    32f2:	ae cf       	rjmp	.-164    	; 0x3250 <main+0x7c>

000032f4 <start_conversion>:

void
start_conversion()
{
  adci = pgm_read_byte(&adcpattern[adcpatterni]);
    32f4:	80 91 70 02 	lds	r24, 0x0270
    32f8:	e8 2f       	mov	r30, r24
    32fa:	ff 27       	eor	r31, r31
    32fc:	ed 50       	subi	r30, 0x0D	; 13
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	84 91       	lpm	r24, Z
    3302:	80 93 72 02 	sts	0x0272, r24
#if !defined(__BAL__)
  set_extramux(pgm_read_byte(&adc_config[adci].extramux));
    3306:	80 91 72 02 	lds	r24, 0x0272
    330a:	e8 2f       	mov	r30, r24
    330c:	ff 27       	eor	r31, r31
    330e:	ee 0f       	add	r30, r30
    3310:	ff 1f       	adc	r31, r31
    3312:	e8 53       	subi	r30, 0x38	; 56
    3314:	ff 4f       	sbci	r31, 0xFF	; 255
    3316:	94 91       	lpm	r25, Z
    3318:	83 b1       	in	r24, 0x03	; 3
    331a:	8f 71       	andi	r24, 0x1F	; 31
    331c:	92 95       	swap	r25
    331e:	99 0f       	add	r25, r25
    3320:	90 7e       	andi	r25, 0xE0	; 224
    3322:	89 2b       	or	r24, r25
    3324:	83 b9       	out	0x03, r24	; 3
  adci = pgm_read_byte(&adcpattern[adcpatterni]);
#if !defined(__BAL__)
  set_extramux(pgm_read_byte(&adc_config[adci].extramux));
#endif
  ADMUX = pgm_read_byte(&adc_config[adci].admux);
    3326:	80 91 72 02 	lds	r24, 0x0272
    332a:	e8 2f       	mov	r30, r24
    332c:	ff 27       	eor	r31, r31
    332e:	ee 0f       	add	r30, r30
    3330:	ff 1f       	adc	r31, r31
    3332:	e9 53       	subi	r30, 0x39	; 57
    3334:	ff 4f       	sbci	r31, 0xFF	; 255
    3336:	84 91       	lpm	r24, Z
    3338:	87 b9       	out	0x07, r24	; 7
  ADCSRA |= (1<<ADSC); // Start next conv
    333a:	36 9a       	sbi	0x06, 6	; 6
    333c:	08 95       	ret

0000333e <adc_init>:
}

void
adc_init()
{
  // PORTF is input, no pullups
  PORTF = 0x00;
    333e:	10 92 62 00 	sts	0x0062, r1
  DDRF = 0x00;
    3342:	10 92 61 00 	sts	0x0061, r1

  ACSR |= (1<<ACD); // Turn off the analog comparator
    3346:	47 9a       	sbi	0x08, 7	; 8

  ADCSRA = 0
    3348:	8f e8       	ldi	r24, 0x8F	; 143
    334a:	86 b9       	out	0x06, r24	; 6
    | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2) // div by 128
    | (1<<ADEN) // enable ADC
    | (1<<ADIE) // enable interrupts
    ;
  // At 14.7 MHz:
  //  115 kHz ADC clock
  //  Conversions take 13 cycles 
  //  We do 4 per short cycle
  //  So about 2211 cycles/sec

  adcpatterni=0;
    334c:	10 92 70 02 	sts	0x0270, r1
  start_conversion();
    3350:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <start_conversion>
    3354:	08 95       	ret

00003356 <adc_disable>:
}

void
adc_disable()
{
  ADCSRA &= ~(1<<ADIE);
    3356:	33 98       	cbi	0x06, 3	; 6
    3358:	08 95       	ret

0000335a <adc_collect_samples>:
}

/*
  Collect the most recent samples, if any, into samples. Return 1 if there were new samples,
  or 0 if not. Pass a pointer to last_samplecount to keep track of the caller's last sample sequence number,
  so we know if there have been more samples since the last time he called it.
*/
uint8_t adc_collect_samples(uint16_t *samples, uint8_t *last_samplecount, uint8_t whichadc)
{
    335a:	cf 93       	push	r28
    335c:	df 93       	push	r29
    335e:	ec 01       	movw	r28, r24
    3360:	db 01       	movw	r26, r22
  uint8_t i,j;

  cli();
    3362:	f8 94       	cli
  if (*last_samplecount == adc_samplecount[whichadc]) {
    3364:	e4 2f       	mov	r30, r20
    3366:	ff 27       	eor	r31, r31
    3368:	eb 50       	subi	r30, 0x0B	; 11
    336a:	f9 4f       	sbci	r31, 0xF9	; 249
    336c:	9c 91       	ld	r25, X
    336e:	80 81       	ld	r24, Z
    3370:	98 17       	cp	r25, r24
    3372:	29 f1       	breq	.+74     	; 0x33be <adc_collect_samples+0x64>
    sei();
    return 0;
  }
  *last_samplecount = adc_samplecount[whichadc];
    3374:	80 81       	ld	r24, Z
    3376:	8c 93       	st	X, r24
  for (i=0; i<ADCNO_END; i++) {
    3378:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t tot=0;
    337a:	40 e0       	ldi	r20, 0x00	; 0
    337c:	50 e0       	ldi	r21, 0x00	; 0
    337e:	a3 2f       	mov	r26, r19
    3380:	bb 27       	eor	r27, r27
    3382:	27 e0       	ldi	r18, 0x07	; 7
    3384:	fd 01       	movw	r30, r26
    3386:	e2 95       	swap	r30
    3388:	f2 95       	swap	r31
    338a:	f0 7f       	andi	r31, 0xF0	; 240
    338c:	fe 27       	eor	r31, r30
    338e:	e0 7f       	andi	r30, 0xF0	; 240
    3390:	fe 27       	eor	r31, r30
    3392:	e0 5f       	subi	r30, 0xF0	; 240
    3394:	fe 4f       	sbci	r31, 0xFE	; 254
    for (j=0; j<ADC_HIST; j++) {
      tot+=adc_current_samples[i][j];
    3396:	81 91       	ld	r24, Z+
    3398:	91 91       	ld	r25, Z+
    339a:	48 0f       	add	r20, r24
    339c:	59 1f       	adc	r21, r25
    339e:	21 50       	subi	r18, 0x01	; 1
    33a0:	27 ff       	sbrs	r18, 7
    33a2:	f9 cf       	rjmp	.-14     	; 0x3396 <adc_collect_samples+0x3c>
    }
    samples[i] = tot;
    33a4:	aa 0f       	add	r26, r26
    33a6:	bb 1f       	adc	r27, r27
    33a8:	ac 0f       	add	r26, r28
    33aa:	bd 1f       	adc	r27, r29
    33ac:	4d 93       	st	X+, r20
    33ae:	5c 93       	st	X, r21
    33b0:	3f 5f       	subi	r19, 0xFF	; 255
    33b2:	36 31       	cpi	r19, 0x16	; 22
    33b4:	10 f3       	brcs	.-60     	; 0x337a <adc_collect_samples+0x20>
  }
  sei();
    33b6:	78 94       	sei
  return 1;
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	03 c0       	rjmp	.+6      	; 0x33c4 <adc_collect_samples+0x6a>
    33be:	78 94       	sei
    33c0:	80 e0       	ldi	r24, 0x00	; 0
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	df 91       	pop	r29
    33c6:	cf 91       	pop	r28
    33c8:	08 95       	ret

000033ca <__vector_21>:
}

#ifdef MAX_ADC_LOG
static uint16_t adc_log_ptr;
static uint16_t adc_log[MAX_ADC_LOG];
#endif

/*
  The ADC completion interrupt. Store the sample in the adc_current_samples shift register
  and start the next conversion.
*/
SIGNAL( SIG_ADC )
{
    33ca:	1f 92       	push	r1
    33cc:	0f 92       	push	r0
    33ce:	0f b6       	in	r0, 0x3f	; 63
    33d0:	0f 92       	push	r0
    33d2:	11 24       	eor	r1, r1
    33d4:	2f 93       	push	r18
    33d6:	3f 93       	push	r19
    33d8:	4f 93       	push	r20
    33da:	5f 93       	push	r21
    33dc:	6f 93       	push	r22
    33de:	7f 93       	push	r23
    33e0:	8f 93       	push	r24
    33e2:	9f 93       	push	r25
    33e4:	af 93       	push	r26
    33e6:	bf 93       	push	r27
    33e8:	ef 93       	push	r30
    33ea:	ff 93       	push	r31
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	46 e0       	ldi	r20, 0x06	; 6
  uint8_t i;

  for (i=0; i<ADC_HIST-1; i++) {
    adc_current_samples[adci][i]=adc_current_samples[adci][i+1];
    33f2:	80 91 72 02 	lds	r24, 0x0272
    33f6:	a8 2f       	mov	r26, r24
    33f8:	bb 27       	eor	r27, r27
    33fa:	aa 0f       	add	r26, r26
    33fc:	bb 1f       	adc	r27, r27
    33fe:	aa 0f       	add	r26, r26
    3400:	bb 1f       	adc	r27, r27
    3402:	aa 0f       	add	r26, r26
    3404:	bb 1f       	adc	r27, r27
    3406:	a2 0f       	add	r26, r18
    3408:	b3 1f       	adc	r27, r19
    340a:	aa 0f       	add	r26, r26
    340c:	bb 1f       	adc	r27, r27
    340e:	a0 5f       	subi	r26, 0xF0	; 240
    3410:	be 4f       	sbci	r27, 0xFE	; 254
    3412:	80 91 72 02 	lds	r24, 0x0272
    3416:	e8 2f       	mov	r30, r24
    3418:	ff 27       	eor	r31, r31
    341a:	ee 0f       	add	r30, r30
    341c:	ff 1f       	adc	r31, r31
    341e:	ee 0f       	add	r30, r30
    3420:	ff 1f       	adc	r31, r31
    3422:	ee 0f       	add	r30, r30
    3424:	ff 1f       	adc	r31, r31
    3426:	e2 0f       	add	r30, r18
    3428:	f3 1f       	adc	r31, r19
    342a:	ee 0f       	add	r30, r30
    342c:	ff 1f       	adc	r31, r31
    342e:	e0 5f       	subi	r30, 0xF0	; 240
    3430:	fe 4f       	sbci	r31, 0xFE	; 254
    3432:	82 81       	ldd	r24, Z+2	; 0x02
    3434:	93 81       	ldd	r25, Z+3	; 0x03
    3436:	11 96       	adiw	r26, 0x01	; 1
    3438:	9c 93       	st	X, r25
    343a:	8e 93       	st	-X, r24
    343c:	41 50       	subi	r20, 0x01	; 1
    343e:	2f 5f       	subi	r18, 0xFF	; 255
    3440:	3f 4f       	sbci	r19, 0xFF	; 255
    3442:	47 ff       	sbrs	r20, 7
    3444:	d6 cf       	rjmp	.-84     	; 0x33f2 <__vector_21+0x28>
  }
  adc_current_samples[adci][ADC_HIST-1] = ADCW;
    3446:	80 91 72 02 	lds	r24, 0x0272
    344a:	e8 2f       	mov	r30, r24
    344c:	ff 27       	eor	r31, r31
    344e:	e2 95       	swap	r30
    3450:	f2 95       	swap	r31
    3452:	f0 7f       	andi	r31, 0xF0	; 240
    3454:	fe 27       	eor	r31, r30
    3456:	e0 7f       	andi	r30, 0xF0	; 240
    3458:	fe 27       	eor	r31, r30
    345a:	e0 5f       	subi	r30, 0xF0	; 240
    345c:	fe 4f       	sbci	r31, 0xFE	; 254
    345e:	84 b1       	in	r24, 0x04	; 4
    3460:	95 b1       	in	r25, 0x05	; 5
    3462:	97 87       	std	Z+15, r25	; 0x0f
    3464:	86 87       	std	Z+14, r24	; 0x0e
  adc_samplecount[adci]++;
    3466:	80 91 72 02 	lds	r24, 0x0272
    346a:	e8 2f       	mov	r30, r24
    346c:	ff 27       	eor	r31, r31
    346e:	eb 50       	subi	r30, 0x0B	; 11
    3470:	f9 4f       	sbci	r31, 0xF9	; 249
    3472:	80 81       	ld	r24, Z
    3474:	8f 5f       	subi	r24, 0xFF	; 255
    3476:	80 83       	st	Z, r24

#ifdef MAX_ADC_LOG
  adc_log[adc_log_ptr] = adc_current_samples[adci][ADC_HIST-1] | (adci<<10);
  adc_log_ptr++;
  if (adc_log_ptr >= MAX_ADC_LOG) adc_log_ptr=0;
#endif

  adcpatterni++;
    3478:	80 91 70 02 	lds	r24, 0x0270
    347c:	8f 5f       	subi	r24, 0xFF	; 255
    347e:	80 93 70 02 	sts	0x0270, r24
  if (adcpatterni >= N_ADCPATTERN) {
    3482:	80 91 70 02 	lds	r24, 0x0270
    3486:	88 32       	cpi	r24, 0x28	; 40
    3488:	38 f0       	brcs	.+14     	; 0x3498 <__vector_21+0xce>
    adcpatterni=0;
    348a:	10 92 70 02 	sts	0x0270, r1
    adcpattern_loops++;
    348e:	80 91 71 02 	lds	r24, 0x0271
    3492:	8f 5f       	subi	r24, 0xFF	; 255
    3494:	80 93 71 02 	sts	0x0271, r24
  }
  start_conversion();
    3498:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <start_conversion>
    349c:	ff 91       	pop	r31
    349e:	ef 91       	pop	r30
    34a0:	bf 91       	pop	r27
    34a2:	af 91       	pop	r26
    34a4:	9f 91       	pop	r25
    34a6:	8f 91       	pop	r24
    34a8:	7f 91       	pop	r23
    34aa:	6f 91       	pop	r22
    34ac:	5f 91       	pop	r21
    34ae:	4f 91       	pop	r20
    34b0:	3f 91       	pop	r19
    34b2:	2f 91       	pop	r18
    34b4:	0f 90       	pop	r0
    34b6:	0f be       	out	0x3f, r0	; 63
    34b8:	0f 90       	pop	r0
    34ba:	1f 90       	pop	r1
    34bc:	18 95       	reti

000034be <dump_adc_log>:
}

/*
  Send logged ADC readings to host. For analog debugging, to measure noise before we
  average the ADC_HIST samples together.
*/
void dump_adc_log()
{
    34be:	08 95       	ret

000034c0 <adc_stabilize>:
#ifdef MAX_ADC_LOG

  for (uint16_t i=0; i<MAX_ADC_LOG; ) {
    while (!uart_tx_empty()) {}

    pkt_tx_start();
    pkt_tx_uint8('l');
    pkt_tx_uint16(i);
    for (uint8_t j=0; j<16; j++) {
      pkt_tx_uint16(adc_log[(i+adc_log_ptr) % MAX_ADC_LOG]);
      i++;
    }
    pkt_tx_end();
  }
#endif
}

/*
  Run the ADC for a while, do flush any initial power-up transients
 */
void adc_stabilize()
{
  while (1) {
    if (adcpattern_loops >= ADC_HIST+2) break;
    34c0:	80 91 71 02 	lds	r24, 0x0271
    34c4:	8a 30       	cpi	r24, 0x0A	; 10
    34c6:	e0 f3       	brcs	.-8      	; 0x34c0 <adc_stabilize>
    34c8:	08 95       	ret

000034ca <hex>:
static char hextable[] PROGMEM ="0123456789abcdef";

inline char hex(uint8_t value) 
{
  return pgm_read_byte(hextable+value);
    34ca:	e8 2f       	mov	r30, r24
    34cc:	ff 27       	eor	r31, r31
    34ce:	e5 5e       	subi	r30, 0xE5	; 229
    34d0:	fa 4f       	sbci	r31, 0xFA	; 250
    34d2:	84 91       	lpm	r24, Z
}
    34d4:	99 27       	eor	r25, r25
    34d6:	87 fd       	sbrc	r24, 7
    34d8:	90 95       	com	r25
    34da:	08 95       	ret

000034dc <uart_init_tx>:

void
uart_init_tx()
{

  // Sort of ad-hoc. I should type in the whole table 69.
#if BAUD_RATE==115200

#if   CLOCK_SPEED == 16000000
  UBRRL = 16;
  UCSRA |= (1<<U2X);
#elif CLOCK_SPEED == 14745600
  UBRRL = 7;
    34dc:	87 e0       	ldi	r24, 0x07	; 7
    34de:	89 b9       	out	0x09, r24	; 9
#elif CLOCK_SPEED == 8000000
  UBRRL = 8;
  UCSRA |= (1<<U2X);
#elif CLOCK_SPEED == 3680000
  UBRRL = 1;
#elif CLOCK_SPEED == 2000000
  UBRRL = 0;
#elif CLOCK_SPEED == 7372800
  UBRRL = 3;
#elif CLOCK_SPEED == 1843200
  UBRRL = 0;
#elif CLOCK_SPEED == 921600
  UBRRL = 0; // 57600 baud
#elif CLOCK_SPEED == 1000000
  UBRRL = 0; // 57600 baud, plus a little
#else
#error "Unsupported clock"
#endif

#elif BAUD_RATE==230400

#if   CLOCK_SPEED == 14745600
  UBRRL = 3;
#else
#error "Unsupported clock"
#endif

#elif BAUD_RATE==57600

#if   CLOCK_SPEED == 16000000
  UBRRL = 34;
  UCSRA |= (1<<U2X);
#elif CLOCK_SPEED == 14745600
  UBRRL = 15;
#elif CLOCK_SPEED == 8000000
  UBRRL = 8;
#else
#error "Unsupported clock"
#endif

#else
#error "Unsupported baud rate"
#endif

#if defined (__AVR_ATmega128__)
  DDRE |= (1<<1); // PE1 is txd, needs to be output
    34e0:	11 9a       	sbi	0x02, 1	; 2
#else
  DDRD |= (1<<1); // PD1 is txd, needs to be output
#endif

  tx_head = tx_tail = 0;
    34e2:	10 92 15 07 	sts	0x0715, r1
    34e6:	80 91 15 07 	lds	r24, 0x0715
    34ea:	80 93 14 07 	sts	0x0714, r24

  UCSRB |= (1<<TXEN);
    34ee:	53 9a       	sbi	0x0a, 3	; 10
    34f0:	08 95       	ret

000034f2 <__vector_19>:
}

static inline void uart_tx_enable_int() {  UCSRB |= (1<<UDRIE); }
static inline void uart_tx_disable_int() {  UCSRB &= ~(1<<UDRIE); }

SIGNAL(SIG_UART_DATA)
{
    34f2:	1f 92       	push	r1
    34f4:	0f 92       	push	r0
    34f6:	0f b6       	in	r0, 0x3f	; 63
    34f8:	0f 92       	push	r0
    34fa:	11 24       	eor	r1, r1
    34fc:	8f 93       	push	r24
    34fe:	9f 93       	push	r25
    3500:	ef 93       	push	r30
    3502:	ff 93       	push	r31
  if (tx_head == tx_tail) {
    3504:	90 91 14 07 	lds	r25, 0x0714
    3508:	80 91 15 07 	lds	r24, 0x0715
    350c:	98 17       	cp	r25, r24
    350e:	79 f0       	breq	.+30     	; 0x352e <__vector_19+0x3c>
    uart_tx_disable_int();
    return;
  }
  
  UDR = tx_buf[tx_tail];
    3510:	80 91 15 07 	lds	r24, 0x0715
    3514:	e8 2f       	mov	r30, r24
    3516:	ff 27       	eor	r31, r31
    3518:	e9 58       	subi	r30, 0x89	; 137
    351a:	fc 4f       	sbci	r31, 0xFC	; 252
    351c:	80 81       	ld	r24, Z
    351e:	8c b9       	out	0x0c, r24	; 12
    3520:	80 91 15 07 	lds	r24, 0x0715
    3524:	8f 5f       	subi	r24, 0xFF	; 255
    3526:	99 27       	eor	r25, r25
    3528:	80 93 15 07 	sts	0x0715, r24
    352c:	01 c0       	rjmp	.+2      	; 0x3530 <__vector_19+0x3e>
    352e:	55 98       	cbi	0x0a, 5	; 10
    3530:	ff 91       	pop	r31
    3532:	ef 91       	pop	r30
    3534:	9f 91       	pop	r25
    3536:	8f 91       	pop	r24
    3538:	0f 90       	pop	r0
    353a:	0f be       	out	0x3f, r0	; 63
    353c:	0f 90       	pop	r0
    353e:	1f 90       	pop	r1
    3540:	18 95       	reti

00003542 <uart_tx_uint8>:
  tx_tail = tx_next(tx_tail);
}

void 
uart_tx_uint8(uint8_t c) 
{
    3542:	28 2f       	mov	r18, r24
    3544:	e0 91 14 07 	lds	r30, 0x0714
    3548:	9e 2f       	mov	r25, r30
    354a:	9f 5f       	subi	r25, 0xFF	; 255
  uint8_t next_head = tx_next(tx_head);

  // busy loop, waiting for space in buffer
  while (next_head==tx_tail) {}
    354c:	80 91 15 07 	lds	r24, 0x0715
    3550:	98 17       	cp	r25, r24
    3552:	e1 f3       	breq	.-8      	; 0x354c <uart_tx_uint8+0xa>
  
  tx_buf[tx_head] = c;
    3554:	ff 27       	eor	r31, r31
    3556:	e9 58       	subi	r30, 0x89	; 137
    3558:	fc 4f       	sbci	r31, 0xFC	; 252
    355a:	20 83       	st	Z, r18
  tx_head=next_head;
    355c:	90 93 14 07 	sts	0x0714, r25
    3560:	55 9a       	sbi	0x0a, 5	; 10
    3562:	08 95       	ret

00003564 <uart_tx_nowait_uint8>:

  uart_tx_enable_int();
}

uint8_t
uart_tx_nowait_uint8(uint8_t c) 
{
    3564:	48 2f       	mov	r20, r24
    3566:	e0 91 14 07 	lds	r30, 0x0714
    356a:	ef 5f       	subi	r30, 0xFF	; 255
    356c:	2e 2f       	mov	r18, r30
    356e:	33 27       	eor	r19, r19
    3570:	e1 50       	subi	r30, 0x01	; 1
  uint8_t next_head = tx_next(tx_head);

  // busy loop, waiting for space in buffer
  if (next_head==tx_tail) return 0;
    3572:	80 91 15 07 	lds	r24, 0x0715
    3576:	28 17       	cp	r18, r24
    3578:	51 f0       	breq	.+20     	; 0x358e <uart_tx_nowait_uint8+0x2a>
  
  tx_buf[tx_head] = c;
    357a:	ff 27       	eor	r31, r31
    357c:	e9 58       	subi	r30, 0x89	; 137
    357e:	fc 4f       	sbci	r31, 0xFC	; 252
    3580:	40 83       	st	Z, r20
  tx_head=next_head;
    3582:	20 93 14 07 	sts	0x0714, r18
    3586:	55 9a       	sbi	0x0a, 5	; 10

  uart_tx_enable_int();

  return 1;
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	90 e0       	ldi	r25, 0x00	; 0
}
    358c:	08 95       	ret
    358e:	80 e0       	ldi	r24, 0x00	; 0
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	08 95       	ret

00003594 <pkt_tx_start>:

#ifndef ELIMINATE_PACKET
struct pktwrstate {
  uint8_t code;
  uint8_t code_loc; // where in tx_buf to stick code
  uint8_t dst_loc;
  uint8_t checksum[4];
} wrs;

void pkt_tx_start()
{
  uart_tx_uint8(0);
    3594:	80 e0       	ldi	r24, 0x00	; 0
    3596:	0e 94 a1 1a 	call	0x3542	; 0x3542 <uart_tx_uint8>
  wrs.code=1;
    359a:	81 e0       	ldi	r24, 0x01	; 1
    359c:	80 93 0d 07 	sts	0x070D, r24
  wrs.code_loc = tx_head;
    35a0:	80 91 14 07 	lds	r24, 0x0714
    35a4:	80 93 0e 07 	sts	0x070E, r24
    35a8:	8f 5f       	subi	r24, 0xFF	; 255
    35aa:	80 93 0f 07 	sts	0x070F, r24
    35ae:	e0 e1       	ldi	r30, 0x10	; 16
    35b0:	f7 e0       	ldi	r31, 0x07	; 7
    35b2:	83 e0       	ldi	r24, 0x03	; 3
  wrs.dst_loc = tx_next(tx_head);
  for (uint8_t j=0; j<4; j++) wrs.checksum[j]=0;
    35b4:	11 92       	st	Z+, r1
    35b6:	81 50       	subi	r24, 0x01	; 1
    35b8:	87 ff       	sbrs	r24, 7
    35ba:	fc cf       	rjmp	.-8      	; 0x35b4 <pkt_tx_start+0x20>
    35bc:	08 95       	ret

000035be <update_crc>:
}

void update_crc(uint8_t data, uint8_t crc[4])
{
    35be:	db 01       	movw	r26, r22
  // shift right 8
  uint8_t out=crc[3];
    35c0:	fb 01       	movw	r30, r22
    35c2:	93 81       	ldd	r25, Z+3	; 0x03
  crc[3]=crc[2] ^ pgm_read_byte(&crc32_table[out][3]);
    35c4:	29 2f       	mov	r18, r25
    35c6:	33 27       	eor	r19, r19
    35c8:	22 0f       	add	r18, r18
    35ca:	33 1f       	adc	r19, r19
    35cc:	22 0f       	add	r18, r18
    35ce:	33 1f       	adc	r19, r19
    35d0:	f9 01       	movw	r30, r18
    35d2:	e2 5e       	subi	r30, 0xE2	; 226
    35d4:	fe 4f       	sbci	r31, 0xFE	; 254
    35d6:	44 91       	lpm	r20, Z
    35d8:	fb 01       	movw	r30, r22
    35da:	92 81       	ldd	r25, Z+2	; 0x02
    35dc:	94 27       	eor	r25, r20
    35de:	93 83       	std	Z+3, r25	; 0x03
  crc[2]=crc[1] ^ pgm_read_byte(&crc32_table[out][2]);
    35e0:	f9 01       	movw	r30, r18
    35e2:	e3 5e       	subi	r30, 0xE3	; 227
    35e4:	fe 4f       	sbci	r31, 0xFE	; 254
    35e6:	44 91       	lpm	r20, Z
    35e8:	fb 01       	movw	r30, r22
    35ea:	91 81       	ldd	r25, Z+1	; 0x01
    35ec:	94 27       	eor	r25, r20
    35ee:	92 83       	std	Z+2, r25	; 0x02
  crc[1]=crc[0] ^ pgm_read_byte(&crc32_table[out][1]);
    35f0:	f9 01       	movw	r30, r18
    35f2:	e4 5e       	subi	r30, 0xE4	; 228
    35f4:	fe 4f       	sbci	r31, 0xFE	; 254
    35f6:	44 91       	lpm	r20, Z
    35f8:	9c 91       	ld	r25, X
    35fa:	94 27       	eor	r25, r20
    35fc:	fb 01       	movw	r30, r22
    35fe:	91 83       	std	Z+1, r25	; 0x01
  crc[0]=data ^ pgm_read_byte(&crc32_table[out][0]);
    3600:	f9 01       	movw	r30, r18
    3602:	e5 5e       	subi	r30, 0xE5	; 229
    3604:	fe 4f       	sbci	r31, 0xFE	; 254
    3606:	94 91       	lpm	r25, Z
    3608:	98 27       	eor	r25, r24
    360a:	9c 93       	st	X, r25
    360c:	08 95       	ret

0000360e <pkt_tx_raw>:
}

void pkt_tx_raw(uint8_t data) {
    360e:	58 2f       	mov	r21, r24
    3610:	40 91 0f 07 	lds	r20, 0x070F
    3614:	94 2f       	mov	r25, r20
    3616:	9f 5f       	subi	r25, 0xFF	; 255
    3618:	69 2f       	mov	r22, r25
    361a:	6f 5f       	subi	r22, 0xFF	; 255
    361c:	26 2f       	mov	r18, r22
    361e:	33 27       	eor	r19, r19
  uint8_t next_dst = tx_next(wrs.dst_loc);
  while (next_dst==tx_tail || tx_next(next_dst)==tx_tail) {}
    3620:	80 91 15 07 	lds	r24, 0x0715
    3624:	98 17       	cp	r25, r24
    3626:	e1 f3       	breq	.-8      	; 0x3620 <pkt_tx_raw+0x12>
    3628:	80 91 15 07 	lds	r24, 0x0715
    362c:	82 17       	cp	r24, r18
    362e:	c1 f3       	breq	.-16     	; 0x3620 <pkt_tx_raw+0x12>
  
  if (data==0) {
    3630:	55 23       	and	r21, r21
    3632:	a9 f4       	brne	.+42     	; 0x365e <pkt_tx_raw+0x50>
    tx_buf[wrs.code_loc]=wrs.code | 0x40;
    3634:	80 91 0e 07 	lds	r24, 0x070E
    3638:	e8 2f       	mov	r30, r24
    363a:	ff 27       	eor	r31, r31
    363c:	e9 58       	subi	r30, 0x89	; 137
    363e:	fc 4f       	sbci	r31, 0xFC	; 252
    3640:	80 91 0d 07 	lds	r24, 0x070D
    3644:	80 64       	ori	r24, 0x40	; 64
    3646:	80 83       	st	Z, r24
    wrs.code_loc = wrs.dst_loc;
    3648:	40 93 0e 07 	sts	0x070E, r20
    wrs.dst_loc = next_dst;
    364c:	90 93 0f 07 	sts	0x070F, r25
    wrs.code=1;
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	80 93 0d 07 	sts	0x070D, r24

    // pump out what we have so far
    tx_head=wrs.code_loc;
    3656:	40 93 14 07 	sts	0x0714, r20
    365a:	55 9a       	sbi	0x0a, 5	; 10
    365c:	08 95       	ret
    uart_tx_enable_int();

  } else {
    tx_buf[wrs.dst_loc]=data;
    365e:	e4 2f       	mov	r30, r20
    3660:	ff 27       	eor	r31, r31
    3662:	e9 58       	subi	r30, 0x89	; 137
    3664:	fc 4f       	sbci	r31, 0xFC	; 252
    3666:	50 83       	st	Z, r21
    wrs.dst_loc=next_dst;
    wrs.code++;
    3668:	20 91 0d 07 	lds	r18, 0x070D
    366c:	2f 5f       	subi	r18, 0xFF	; 255
    if (wrs.code==0x38) { // max 56 byte chunks
    366e:	28 33       	cpi	r18, 0x38	; 56
    3670:	29 f0       	breq	.+10     	; 0x367c <pkt_tx_raw+0x6e>
    3672:	20 93 0d 07 	sts	0x070D, r18
    3676:	90 93 0f 07 	sts	0x070F, r25
    367a:	08 95       	ret
      tx_buf[wrs.code_loc]=wrs.code;
    367c:	80 91 0e 07 	lds	r24, 0x070E
    3680:	e8 2f       	mov	r30, r24
    3682:	ff 27       	eor	r31, r31
    3684:	e9 58       	subi	r30, 0x89	; 137
    3686:	fc 4f       	sbci	r31, 0xFC	; 252
    3688:	20 83       	st	Z, r18
      wrs.code_loc = next_dst;
    368a:	90 93 0e 07 	sts	0x070E, r25
    368e:	60 93 0f 07 	sts	0x070F, r22
      wrs.dst_loc = tx_next(next_dst);
      wrs.code = 1;
    3692:	81 e0       	ldi	r24, 0x01	; 1
    3694:	80 93 0d 07 	sts	0x070D, r24
      tx_head = wrs.code_loc;
    3698:	90 93 14 07 	sts	0x0714, r25
    369c:	55 9a       	sbi	0x0a, 5	; 10
    369e:	08 95       	ret

000036a0 <pkt_tx_uint8>:
      uart_tx_enable_int();
    }
  }
}

void pkt_tx_uint8(uint8_t data)
{
    36a0:	1f 93       	push	r17
    36a2:	18 2f       	mov	r17, r24
  update_crc(data, wrs.checksum);
    36a4:	60 e1       	ldi	r22, 0x10	; 16
    36a6:	77 e0       	ldi	r23, 0x07	; 7
    36a8:	0e 94 df 1a 	call	0x35be	; 0x35be <update_crc>
  pkt_tx_raw(data);
    36ac:	81 2f       	mov	r24, r17
    36ae:	0e 94 07 1b 	call	0x360e	; 0x360e <pkt_tx_raw>
    36b2:	1f 91       	pop	r17
    36b4:	08 95       	ret

000036b6 <pkt_tx_str>:
}

void pkt_tx_str(char *s)
{
    36b6:	cf 93       	push	r28
    36b8:	df 93       	push	r29
    36ba:	ec 01       	movw	r28, r24
  while (*s) {
    pkt_tx_uint8((char) *s++);
    36bc:	88 81       	ld	r24, Y
    36be:	88 23       	and	r24, r24
    36c0:	61 f0       	breq	.+24     	; 0x36da <pkt_tx_str+0x24>
    36c2:	21 96       	adiw	r28, 0x01	; 1
    36c4:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    36c8:	88 81       	ld	r24, Y
    36ca:	88 23       	and	r24, r24
    36cc:	31 f0       	breq	.+12     	; 0x36da <pkt_tx_str+0x24>
    36ce:	21 96       	adiw	r28, 0x01	; 1
    36d0:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    36d4:	88 81       	ld	r24, Y
    36d6:	88 23       	and	r24, r24
    36d8:	a1 f7       	brne	.-24     	; 0x36c2 <pkt_tx_str+0xc>
    36da:	df 91       	pop	r29
    36dc:	cf 91       	pop	r28
    36de:	08 95       	ret

000036e0 <pkt_tx_str_P>:
  }
}

void pkt_tx_str_P(const char *s)
{
    36e0:	cf 93       	push	r28
    36e2:	df 93       	push	r29
    36e4:	ec 01       	movw	r28, r24
    36e6:	02 c0       	rjmp	.+4      	; 0x36ec <pkt_tx_str_P+0xc>
  while (1) {
    char c=pgm_read_byte(s++);
    if (!c) break;
    pkt_tx_uint8(c);
    36e8:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    36ec:	fe 01       	movw	r30, r28
    36ee:	21 96       	adiw	r28, 0x01	; 1
    36f0:	84 91       	lpm	r24, Z
    36f2:	88 23       	and	r24, r24
    36f4:	c9 f7       	brne	.-14     	; 0x36e8 <pkt_tx_str_P+0x8>
    36f6:	df 91       	pop	r29
    36f8:	cf 91       	pop	r28
    36fa:	08 95       	ret

000036fc <pkt_tx_uint16>:
  }
}


// Little endian
void pkt_tx_uint16(uint16_t data)
{
    36fc:	0f 93       	push	r16
    36fe:	1f 93       	push	r17
    3700:	8c 01       	movw	r16, r24
  pkt_tx_uint8(data&0xff);
    3702:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
  pkt_tx_uint8(data>>8);
    3706:	81 2f       	mov	r24, r17
    3708:	99 27       	eor	r25, r25
    370a:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    370e:	1f 91       	pop	r17
    3710:	0f 91       	pop	r16
    3712:	08 95       	ret

00003714 <pkt_tx_int16>:
}

void pkt_tx_int16(int16_t data)
{
    3714:	0f 93       	push	r16
    3716:	1f 93       	push	r17
    3718:	8c 01       	movw	r16, r24
  pkt_tx_uint8(data&0xff);
    371a:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
  pkt_tx_uint8(data>>8);
    371e:	81 2f       	mov	r24, r17
    3720:	99 27       	eor	r25, r25
    3722:	87 fd       	sbrc	r24, 7
    3724:	9a 95       	dec	r25
    3726:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    372a:	1f 91       	pop	r17
    372c:	0f 91       	pop	r16
    372e:	08 95       	ret

00003730 <pkt_tx_uint32>:
}

// Little endian
void pkt_tx_uint32(uint32_t data)
{
    3730:	ef 92       	push	r14
    3732:	ff 92       	push	r15
    3734:	0f 93       	push	r16
    3736:	1f 93       	push	r17
    3738:	7b 01       	movw	r14, r22
    373a:	8c 01       	movw	r16, r24
  pkt_tx_uint8(data&0xff);
    373c:	86 2f       	mov	r24, r22
    373e:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
  pkt_tx_uint8((data>>8)&0xff);
    3742:	bb 27       	eor	r27, r27
    3744:	a1 2f       	mov	r26, r17
    3746:	90 2f       	mov	r25, r16
    3748:	8f 2d       	mov	r24, r15
    374a:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
  pkt_tx_uint8((data>>16)&0xff);
    374e:	c8 01       	movw	r24, r16
    3750:	aa 27       	eor	r26, r26
    3752:	bb 27       	eor	r27, r27
    3754:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
  pkt_tx_uint8((data>>24)&0xff);
    3758:	81 2f       	mov	r24, r17
    375a:	99 27       	eor	r25, r25
    375c:	aa 27       	eor	r26, r26
    375e:	bb 27       	eor	r27, r27
    3760:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    3764:	1f 91       	pop	r17
    3766:	0f 91       	pop	r16
    3768:	ff 90       	pop	r15
    376a:	ef 90       	pop	r14
    376c:	08 95       	ret

0000376e <pkt_tx_int32>:
}

void pkt_tx_int32(int32_t data)
{
    376e:	ef 92       	push	r14
    3770:	ff 92       	push	r15
    3772:	0f 93       	push	r16
    3774:	1f 93       	push	r17
    3776:	7b 01       	movw	r14, r22
    3778:	8c 01       	movw	r16, r24
  pkt_tx_uint8(data&0xff);
    377a:	86 2f       	mov	r24, r22
    377c:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
  pkt_tx_uint8((data>>8)&0xff);
    3780:	bb 27       	eor	r27, r27
    3782:	17 fd       	sbrc	r17, 7
    3784:	ba 95       	dec	r27
    3786:	a1 2f       	mov	r26, r17
    3788:	90 2f       	mov	r25, r16
    378a:	8f 2d       	mov	r24, r15
    378c:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
  pkt_tx_uint8((data>>16)&0xff);
    3790:	c8 01       	movw	r24, r16
    3792:	bb 27       	eor	r27, r27
    3794:	97 fd       	sbrc	r25, 7
    3796:	b0 95       	com	r27
    3798:	ab 2f       	mov	r26, r27
    379a:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
  pkt_tx_uint8((data>>24)&0xff);
    379e:	81 2f       	mov	r24, r17
    37a0:	bb 27       	eor	r27, r27
    37a2:	87 fd       	sbrc	r24, 7
    37a4:	b0 95       	com	r27
    37a6:	9b 2f       	mov	r25, r27
    37a8:	ab 2f       	mov	r26, r27
    37aa:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    37ae:	1f 91       	pop	r17
    37b0:	0f 91       	pop	r16
    37b2:	ff 90       	pop	r15
    37b4:	ef 90       	pop	r14
    37b6:	08 95       	ret

000037b8 <pkt_tx_uint8_hex>:
}

void pkt_tx_uint8_hex(uint8_t x)
{
    37b8:	1f 93       	push	r17
    37ba:	18 2f       	mov	r17, r24
    37bc:	82 95       	swap	r24
    37be:	8f 70       	andi	r24, 0x0F	; 15
    37c0:	e8 2f       	mov	r30, r24
    37c2:	ff 27       	eor	r31, r31
    37c4:	e5 5e       	subi	r30, 0xE5	; 229
    37c6:	fa 4f       	sbci	r31, 0xFA	; 250
    37c8:	84 91       	lpm	r24, Z
    37ca:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    37ce:	1f 70       	andi	r17, 0x0F	; 15
    37d0:	e1 2f       	mov	r30, r17
    37d2:	ff 27       	eor	r31, r31
    37d4:	e5 5e       	subi	r30, 0xE5	; 229
    37d6:	fa 4f       	sbci	r31, 0xFA	; 250
    37d8:	84 91       	lpm	r24, Z
    37da:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    37de:	1f 91       	pop	r17
    37e0:	08 95       	ret

000037e2 <pkt_tx_uint16_hex>:
  pkt_tx_uint8(hex((x>>4)&0xf));
  pkt_tx_uint8(hex((x>>0)&0xf));
}

void pkt_tx_uint16_hex(uint16_t x)
{
    37e2:	0f 93       	push	r16
    37e4:	1f 93       	push	r17
    37e6:	8c 01       	movw	r16, r24
    37e8:	fc 01       	movw	r30, r24
    37ea:	ef 2f       	mov	r30, r31
    37ec:	ff 27       	eor	r31, r31
    37ee:	e2 95       	swap	r30
    37f0:	ef 70       	andi	r30, 0x0F	; 15
    37f2:	e5 5e       	subi	r30, 0xE5	; 229
    37f4:	fa 4f       	sbci	r31, 0xFA	; 250
    37f6:	84 91       	lpm	r24, Z
    37f8:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    37fc:	e1 2f       	mov	r30, r17
    37fe:	ff 27       	eor	r31, r31
    3800:	ef 70       	andi	r30, 0x0F	; 15
    3802:	f0 70       	andi	r31, 0x00	; 0
    3804:	e5 5e       	subi	r30, 0xE5	; 229
    3806:	fa 4f       	sbci	r31, 0xFA	; 250
    3808:	84 91       	lpm	r24, Z
    380a:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    380e:	f8 01       	movw	r30, r16
    3810:	f2 95       	swap	r31
    3812:	e2 95       	swap	r30
    3814:	ef 70       	andi	r30, 0x0F	; 15
    3816:	ef 27       	eor	r30, r31
    3818:	ff 70       	andi	r31, 0x0F	; 15
    381a:	ef 27       	eor	r30, r31
    381c:	ef 70       	andi	r30, 0x0F	; 15
    381e:	f0 70       	andi	r31, 0x00	; 0
    3820:	e5 5e       	subi	r30, 0xE5	; 229
    3822:	fa 4f       	sbci	r31, 0xFA	; 250
    3824:	84 91       	lpm	r24, Z
    3826:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    382a:	0f 70       	andi	r16, 0x0F	; 15
    382c:	10 70       	andi	r17, 0x00	; 0
    382e:	05 5e       	subi	r16, 0xE5	; 229
    3830:	1a 4f       	sbci	r17, 0xFA	; 250
    3832:	f8 01       	movw	r30, r16
    3834:	84 91       	lpm	r24, Z
    3836:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    383a:	1f 91       	pop	r17
    383c:	0f 91       	pop	r16
    383e:	08 95       	ret

00003840 <pkt_tx_uint32_hex>:
  pkt_tx_uint8(hex((x>>12)&0xf));
  pkt_tx_uint8(hex((x>>8)&0xf));
  pkt_tx_uint8(hex((x>>4)&0xf));
  pkt_tx_uint8(hex((x>>0)&0xf));
}
void pkt_tx_uint32_hex(uint32_t x)
{
    3840:	ef 92       	push	r14
    3842:	ff 92       	push	r15
    3844:	0f 93       	push	r16
    3846:	1f 93       	push	r17
    3848:	7b 01       	movw	r14, r22
    384a:	8c 01       	movw	r16, r24
  pkt_tx_uint16_hex(x>>16);
    384c:	c8 01       	movw	r24, r16
    384e:	aa 27       	eor	r26, r26
    3850:	bb 27       	eor	r27, r27
    3852:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <pkt_tx_uint16_hex>
  pkt_tx_uint16_hex(x);
    3856:	c7 01       	movw	r24, r14
    3858:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <pkt_tx_uint16_hex>
    385c:	1f 91       	pop	r17
    385e:	0f 91       	pop	r16
    3860:	ff 90       	pop	r15
    3862:	ef 90       	pop	r14
    3864:	08 95       	ret

00003866 <pkt_tx_end>:
}



void pkt_tx_end()
{
    3866:	cf 93       	push	r28
    3868:	df 93       	push	r29
    386a:	c0 e1       	ldi	r28, 0x10	; 16
    386c:	d7 e0       	ldi	r29, 0x07	; 7
  for (int j=0; j<4; j++) {
    pkt_tx_raw(wrs.checksum[j]);
    386e:	89 91       	ld	r24, Y+
    3870:	0e 94 07 1b 	call	0x360e	; 0x360e <pkt_tx_raw>
    3874:	87 e0       	ldi	r24, 0x07	; 7
    3876:	c3 31       	cpi	r28, 0x13	; 19
    3878:	d8 07       	cpc	r29, r24
    387a:	c9 f3       	breq	.-14     	; 0x386e <pkt_tx_end+0x8>
    387c:	c4 f3       	brlt	.-16     	; 0x386e <pkt_tx_end+0x8>
  }
  
  tx_buf[wrs.code_loc]=wrs.code|0x80;
    387e:	80 91 0e 07 	lds	r24, 0x070E
    3882:	e8 2f       	mov	r30, r24
    3884:	ff 27       	eor	r31, r31
    3886:	e9 58       	subi	r30, 0x89	; 137
    3888:	fc 4f       	sbci	r31, 0xFC	; 252
    388a:	80 91 0d 07 	lds	r24, 0x070D
    388e:	80 68       	ori	r24, 0x80	; 128
    3890:	80 83       	st	Z, r24
  tx_head=wrs.dst_loc;
    3892:	80 91 0f 07 	lds	r24, 0x070F
    3896:	80 93 14 07 	sts	0x0714, r24
    389a:	55 9a       	sbi	0x0a, 5	; 10
    389c:	df 91       	pop	r29
    389e:	cf 91       	pop	r28
    38a0:	08 95       	ret

000038a2 <uart_rx_empty>:
  
  uart_tx_enable_int();
}

/*
  A pointer into static storage is returned in *pkt_r, valid until the next time
  pkt_rx is called. Returns length, or 0 if no packet yet.
 */
int pkt_rx(uint8_t **pkt_r)
{
  static uint8_t pkt_buf[RX_PACKET_SIZE];
  static uint8_t pkt_bufi;
  static uint8_t chunk_rem;
  static uint8_t chunk_lastflag;
  static uint8_t chunk_zeroflag;

  while (!uart_rx_empty()) {

    uint8_t data=uart_rx_uint8();

    if (data==0) {
      if (pkt_bufi>0) {
        errs.rx_pktterm++;
      }
      chunk_rem=0;
      chunk_lastflag=0;
      chunk_zeroflag=0;
      pkt_bufi=0;
      continue;
    }

    if (chunk_rem==0) {
      chunk_rem=(data&0x3f);
      chunk_lastflag = (data&0x80) ? 1 : 0;
      chunk_zeroflag = (data&0x40) ? 1 : 0;
    }
    else if (chunk_rem>1) {
      pkt_buf[pkt_bufi++] = data;
      chunk_rem--;
    }

    if (chunk_rem==1) {
      if (chunk_zeroflag) {
        pkt_buf[pkt_bufi++] = 0;
      }
      chunk_rem=0;

      if (chunk_lastflag) {
        int bad=0;
        if (pkt_bufi < 5) {
          errs.rx_pktshort++;
          bad=1;
        }

        if (!bad) {
          uint8_t crc[4];
          for (uint8_t j=0; j<4; j++) crc[j]=0;
          for (uint8_t i=0; i<pkt_bufi-4; i++) {
            update_crc(pkt_buf[i], crc);
          }
          
          uint8_t *rxcrc=&pkt_buf[pkt_bufi-4];
          for (int j=0; j<4; j++) {
            if (crc[j] != rxcrc[j]) {
              errs.rx_pktcrc++;
              bad=1;
              break;
            }
          }
        }
        
        if (bad) {
          pkt_bufi=0;
        }
        else {
          uint8_t ret = pkt_bufi-4;
          *pkt_r = pkt_buf;
          pkt_bufi=0;
          return ret;
        }
      }

    }

  }
  return 0;
}

uint8_t err_inpkt;
void err_tx_start()
{
  err_inpkt=0;
}

void err_tx_counter(uint8_t *ctp, char key)
{
  uint8_t ct=*ctp;
  if (ct) {
    if (!err_inpkt) {
      pkt_tx_start();
      pkt_tx_uint8('F');
      err_inpkt=1;
    } else {
      pkt_tx_uint8(' ');
    }
    pkt_tx_uint8(key);
    pkt_tx_uint8('=');
    pkt_tx_uint8(hex((ct>>4)&0xf));
    pkt_tx_uint8(hex((ct>>0)&0xf));
    *ctp=0;
  }
}

void err_tx_end()
{
  if (err_inpkt) {
    err_inpkt=0;
    pkt_tx_end();
  }
}

void err_tx_comm()
{
  err_tx_counter(&errs.rx_overrun, 'O');
  err_tx_counter(&errs.rx_frame, 'F');
  err_tx_counter(&errs.rx_hw_overrun, 'H');
  err_tx_counter(&errs.rx_parity, 'P');

  err_tx_counter(&errs.rx_pktshort, 'S');
  err_tx_counter(&errs.rx_pktcrc, 'C');
  err_tx_counter(&errs.rx_pkttz, 'Z');
  err_tx_counter(&errs.rx_pktterm, 'T');
}

#endif

uint8_t
uart_tx_empty()
{
  return tx_head == tx_tail;
}

uint8_t
uart_tx_qlen()
{
  return tx_modulo(tx_head+TX_BUF_SIZE-tx_tail);
}

void uart_tx_str(const char *s)
{
  while (*s) {
    uart_tx_uint8(*s++);
  }
}

void uart_tx_str_P(const char *s)
{
  while (1) {
    char c=pgm_read_byte(s++);
    if (!c) break;
    uart_tx_uint8(c);
  }
}

void uart_tx_uint8_hex(uint8_t x)
{
  uart_tx_uint8(hex((x>>4)&0xf));
  uart_tx_uint8(hex((x>>0)&0xf));
}

void uart_tx_uint16_hex(uint16_t x)
{
  uart_tx_uint8(hex((x>>12)&0xf));
  uart_tx_uint8(hex((x>>8)&0xf));
  uart_tx_uint8(hex((x>>4)&0xf));
  uart_tx_uint8(hex((x>>0)&0xf));
}

void uart_tx_uint32_hex(uint32_t x)
{
  uart_tx_uint16_hex(x>>16);
  uart_tx_uint16_hex(x);
}


void uart_tx_int8(int8_t x)
{
  uart_tx_uint8((uint8_t)x);
}

// Little endian
void uart_tx_uint16(uint16_t x)
{
  uart_tx_uint8(x&0xff);
  uart_tx_uint8(x>>8);
}

void uart_tx_int16(int16_t x)
{
  uart_tx_uint8(x&0xff);
  uart_tx_uint8(x>>8);
}

#if 1
void uart_tx_float(float x)
{
  // Turns out to be same representation as float on i386.
  union {
    float f;
    uint8_t c[4];
  } tmp;
  tmp.f=x;
  uart_tx_uint8(tmp.c[0]);
  uart_tx_uint8(tmp.c[1]);
  uart_tx_uint8(tmp.c[2]);
  uart_tx_uint8(tmp.c[3]);
}
#endif


SIGNAL(SIG_UART_RECV)
{
  uint8_t gotflags=UCSRA;
  uint8_t gotchar=UDR;

  uint8_t next_head = rx_next(rx_head);

  if (next_head == rx_tail) {
    errs.rx_overrun++;
    return;
  }
  if (gotflags & 0x10) {
    errs.rx_frame++;
  }
  if (gotflags & 0x08) {
    errs.rx_hw_overrun++;
  }
  if (gotflags & 0x04) {
    errs.rx_parity++;
  }
  
  rx_buf[rx_head] = gotchar;
  rx_head=next_head;
}


void
uart_poll()
{
  uint8_t gotflags=UCSRA;

  if (gotflags & (1<<RXC)) {
    uint8_t gotchar=UDR;

    uint8_t next_head = rx_next(rx_head);

    if (next_head == rx_tail) {
      errs.rx_overrun++;
      goto do_tx;
    }
    if (gotflags & 0x10) {
      errs.rx_frame++;
    }
    if (gotflags & 0x08) {
      errs.rx_hw_overrun++;
    }
    if (gotflags & 0x04) {
      errs.rx_parity++;
    }
  
    rx_buf[rx_head] = gotchar;
    rx_head=next_head;    
  }

 do_tx:
  if (gotflags & (1<<TXC)) {
    if (tx_head != tx_tail) {
      UCSRA = gotflags;
      UDR = tx_buf[tx_tail];
      tx_tail = tx_next(tx_tail);
    }
  }
}


uint8_t uart_rx_uint8()
{
  while (rx_head == rx_tail) {}

  uint8_t ret=rx_buf[rx_tail];
  rx_tail = rx_next(rx_tail);

  return ret;
}

uint16_t uart_rx_uint16()
{
  uint8_t c1=uart_rx_uint8();
  uint8_t c2=uart_rx_uint8();
  return ((uint16_t)c2)<<8 | (uint16_t)c1;
}

uint8_t uart_rx_peek()
{
  while (rx_head == rx_tail) {}
  return rx_buf[rx_tail];
}

uint8_t uart_rx_empty()
{
  return rx_head == rx_tail;
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	90 91 16 07 	lds	r25, 0x0716
    38aa:	80 91 0b 07 	lds	r24, 0x070B
    38ae:	98 17       	cp	r25, r24
    38b0:	11 f4       	brne	.+4      	; 0x38b6 <uart_rx_empty+0x14>
    38b2:	21 e0       	ldi	r18, 0x01	; 1
    38b4:	30 e0       	ldi	r19, 0x00	; 0
}
    38b6:	c9 01       	movw	r24, r18
    38b8:	08 95       	ret

000038ba <uart_rx_uint8>:
    38ba:	90 91 0b 07 	lds	r25, 0x070B
    38be:	80 91 16 07 	lds	r24, 0x0716
    38c2:	89 17       	cp	r24, r25
    38c4:	e1 f3       	breq	.-8      	; 0x38be <uart_rx_uint8+0x4>
    38c6:	e9 2f       	mov	r30, r25
    38c8:	ff 27       	eor	r31, r31
    38ca:	e9 58       	subi	r30, 0x89	; 137
    38cc:	fb 4f       	sbci	r31, 0xFB	; 251
    38ce:	80 81       	ld	r24, Z
    38d0:	9f 5f       	subi	r25, 0xFF	; 255
    38d2:	90 93 0b 07 	sts	0x070B, r25
    38d6:	99 27       	eor	r25, r25
    38d8:	08 95       	ret

000038da <pkt_rx>:
    38da:	cf 92       	push	r12
    38dc:	df 92       	push	r13
    38de:	ef 92       	push	r14
    38e0:	ff 92       	push	r15
    38e2:	1f 93       	push	r17
    38e4:	cf 93       	push	r28
    38e6:	df 93       	push	r29
    38e8:	cd b7       	in	r28, 0x3d	; 61
    38ea:	de b7       	in	r29, 0x3e	; 62
    38ec:	24 97       	sbiw	r28, 0x04	; 4
    38ee:	0f b6       	in	r0, 0x3f	; 63
    38f0:	f8 94       	cli
    38f2:	de bf       	out	0x3e, r29	; 62
    38f4:	0f be       	out	0x3f, r0	; 63
    38f6:	cd bf       	out	0x3d, r28	; 61
    38f8:	7c 01       	movw	r14, r24
    38fa:	6e 01       	movw	r12, r28
    38fc:	08 94       	sec
    38fe:	c1 1c       	adc	r12, r1
    3900:	d1 1c       	adc	r13, r1
    3902:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <uart_rx_empty>
    3906:	88 23       	and	r24, r24
    3908:	d1 f4       	brne	.+52     	; 0x393e <pkt_rx+0x64>
    390a:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <uart_rx_uint8>
    390e:	98 2f       	mov	r25, r24
    3910:	88 23       	and	r24, r24
    3912:	c1 f4       	brne	.+48     	; 0x3944 <pkt_rx+0x6a>
    3914:	80 91 73 03 	lds	r24, 0x0373
    3918:	88 23       	and	r24, r24
    391a:	29 f0       	breq	.+10     	; 0x3926 <pkt_rx+0x4c>
    391c:	80 91 7e 05 	lds	r24, 0x057E
    3920:	8f 5f       	subi	r24, 0xFF	; 255
    3922:	80 93 7e 05 	sts	0x057E, r24
    3926:	90 93 74 03 	sts	0x0374, r25
    392a:	90 93 75 03 	sts	0x0375, r25
    392e:	90 93 76 03 	sts	0x0376, r25
    3932:	90 93 73 03 	sts	0x0373, r25
    3936:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <uart_rx_empty>
    393a:	88 23       	and	r24, r24
    393c:	31 f3       	breq	.-52     	; 0x390a <pkt_rx+0x30>
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	9a c0       	rjmp	.+308    	; 0x3a78 <pkt_rx+0x19e>
    3944:	20 91 74 03 	lds	r18, 0x0374
    3948:	22 23       	and	r18, r18
    394a:	d9 f5       	brne	.+118    	; 0x39c2 <pkt_rx+0xe8>
    394c:	38 2f       	mov	r19, r24
    394e:	3f 73       	andi	r19, 0x3F	; 63
    3950:	30 93 74 03 	sts	0x0374, r19
    3954:	82 2f       	mov	r24, r18
    3956:	97 fd       	sbrc	r25, 7
    3958:	46 c0       	rjmp	.+140    	; 0x39e6 <pkt_rx+0x10c>
    395a:	80 93 75 03 	sts	0x0375, r24
    395e:	89 2f       	mov	r24, r25
    3960:	99 27       	eor	r25, r25
    3962:	00 24       	eor	r0, r0
    3964:	88 0f       	add	r24, r24
    3966:	99 1f       	adc	r25, r25
    3968:	00 1c       	adc	r0, r0
    396a:	88 0f       	add	r24, r24
    396c:	99 1f       	adc	r25, r25
    396e:	00 1c       	adc	r0, r0
    3970:	89 2f       	mov	r24, r25
    3972:	90 2d       	mov	r25, r0
    3974:	81 70       	andi	r24, 0x01	; 1
    3976:	80 93 76 03 	sts	0x0376, r24
    397a:	23 2f       	mov	r18, r19
    397c:	21 30       	cpi	r18, 0x01	; 1
    397e:	09 f6       	brne	.-126    	; 0x3902 <pkt_rx+0x28>
    3980:	80 91 76 03 	lds	r24, 0x0376
    3984:	88 23       	and	r24, r24
    3986:	51 f0       	breq	.+20     	; 0x399c <pkt_rx+0xc2>
    3988:	80 91 73 03 	lds	r24, 0x0373
    398c:	e8 2f       	mov	r30, r24
    398e:	ff 27       	eor	r31, r31
    3990:	ed 58       	subi	r30, 0x8D	; 141
    3992:	fd 4f       	sbci	r31, 0xFD	; 253
    3994:	10 82       	st	Z, r1
    3996:	8f 5f       	subi	r24, 0xFF	; 255
    3998:	80 93 73 03 	sts	0x0373, r24
    399c:	10 92 74 03 	sts	0x0374, r1
    39a0:	80 91 75 03 	lds	r24, 0x0375
    39a4:	88 23       	and	r24, r24
    39a6:	09 f4       	brne	.+2      	; 0x39aa <pkt_rx+0xd0>
    39a8:	ac cf       	rjmp	.-168    	; 0x3902 <pkt_rx+0x28>
    39aa:	20 91 73 03 	lds	r18, 0x0373
    39ae:	25 30       	cpi	r18, 0x05	; 5
    39b0:	e0 f4       	brcc	.+56     	; 0x39ea <pkt_rx+0x110>
    39b2:	80 91 7b 05 	lds	r24, 0x057B
    39b6:	8f 5f       	subi	r24, 0xFF	; 255
    39b8:	80 93 7b 05 	sts	0x057B, r24
    39bc:	10 92 73 03 	sts	0x0373, r1
    39c0:	a0 cf       	rjmp	.-192    	; 0x3902 <pkt_rx+0x28>
    39c2:	22 30       	cpi	r18, 0x02	; 2
    39c4:	d8 f2       	brcs	.-74     	; 0x397c <pkt_rx+0xa2>
    39c6:	80 91 73 03 	lds	r24, 0x0373
    39ca:	e8 2f       	mov	r30, r24
    39cc:	ff 27       	eor	r31, r31
    39ce:	ed 58       	subi	r30, 0x8D	; 141
    39d0:	fd 4f       	sbci	r31, 0xFD	; 253
    39d2:	90 83       	st	Z, r25
    39d4:	8f 5f       	subi	r24, 0xFF	; 255
    39d6:	80 93 73 03 	sts	0x0373, r24
    39da:	82 2f       	mov	r24, r18
    39dc:	81 50       	subi	r24, 0x01	; 1
    39de:	80 93 74 03 	sts	0x0374, r24
    39e2:	28 2f       	mov	r18, r24
    39e4:	cb cf       	rjmp	.-106    	; 0x397c <pkt_rx+0xa2>
    39e6:	81 e0       	ldi	r24, 0x01	; 1
    39e8:	b8 cf       	rjmp	.-144    	; 0x395a <pkt_rx+0x80>
    39ea:	f6 01       	movw	r30, r12
    39ec:	83 e0       	ldi	r24, 0x03	; 3
    39ee:	11 92       	st	Z+, r1
    39f0:	81 50       	subi	r24, 0x01	; 1
    39f2:	87 ff       	sbrs	r24, 7
    39f4:	fc cf       	rjmp	.-8      	; 0x39ee <pkt_rx+0x114>
    39f6:	10 e0       	ldi	r17, 0x00	; 0
    39f8:	40 e0       	ldi	r20, 0x00	; 0
    39fa:	50 e0       	ldi	r21, 0x00	; 0
    39fc:	20 91 73 03 	lds	r18, 0x0373
    3a00:	82 2f       	mov	r24, r18
    3a02:	99 27       	eor	r25, r25
    3a04:	04 97       	sbiw	r24, 0x04	; 4
    3a06:	48 17       	cp	r20, r24
    3a08:	59 07       	cpc	r21, r25
    3a0a:	a4 f4       	brge	.+40     	; 0x3a34 <pkt_rx+0x15a>
    3a0c:	fa 01       	movw	r30, r20
    3a0e:	ed 58       	subi	r30, 0x8D	; 141
    3a10:	fd 4f       	sbci	r31, 0xFD	; 253
    3a12:	be 01       	movw	r22, r28
    3a14:	6f 5f       	subi	r22, 0xFF	; 255
    3a16:	7f 4f       	sbci	r23, 0xFF	; 255
    3a18:	80 81       	ld	r24, Z
    3a1a:	0e 94 df 1a 	call	0x35be	; 0x35be <update_crc>
    3a1e:	1f 5f       	subi	r17, 0xFF	; 255
    3a20:	e1 2f       	mov	r30, r17
    3a22:	ff 27       	eor	r31, r31
    3a24:	20 91 73 03 	lds	r18, 0x0373
    3a28:	82 2f       	mov	r24, r18
    3a2a:	99 27       	eor	r25, r25
    3a2c:	04 97       	sbiw	r24, 0x04	; 4
    3a2e:	e8 17       	cp	r30, r24
    3a30:	f9 07       	cpc	r31, r25
    3a32:	6c f3       	brlt	.-38     	; 0x3a0e <pkt_rx+0x134>
    3a34:	e2 2f       	mov	r30, r18
    3a36:	ff 27       	eor	r31, r31
    3a38:	e1 59       	subi	r30, 0x91	; 145
    3a3a:	fd 4f       	sbci	r31, 0xFD	; 253
    3a3c:	d6 01       	movw	r26, r12
    3a3e:	af 01       	movw	r20, r30
    3a40:	4d 5f       	subi	r20, 0xFD	; 253
    3a42:	5f 4f       	sbci	r21, 0xFF	; 255
    3a44:	9d 91       	ld	r25, X+
    3a46:	81 91       	ld	r24, Z+
    3a48:	98 17       	cp	r25, r24
    3a4a:	71 f4       	brne	.+28     	; 0x3a68 <pkt_rx+0x18e>
    3a4c:	4e 17       	cp	r20, r30
    3a4e:	5f 07       	cpc	r21, r31
    3a50:	cc f7       	brge	.-14     	; 0x3a44 <pkt_rx+0x16a>
    3a52:	24 50       	subi	r18, 0x04	; 4
    3a54:	83 e7       	ldi	r24, 0x73	; 115
    3a56:	92 e0       	ldi	r25, 0x02	; 2
    3a58:	f7 01       	movw	r30, r14
    3a5a:	91 83       	std	Z+1, r25	; 0x01
    3a5c:	80 83       	st	Z, r24
    3a5e:	10 92 73 03 	sts	0x0373, r1
    3a62:	82 2f       	mov	r24, r18
    3a64:	99 27       	eor	r25, r25
    3a66:	08 c0       	rjmp	.+16     	; 0x3a78 <pkt_rx+0x19e>
    3a68:	80 91 7c 05 	lds	r24, 0x057C
    3a6c:	8f 5f       	subi	r24, 0xFF	; 255
    3a6e:	80 93 7c 05 	sts	0x057C, r24
    3a72:	10 92 73 03 	sts	0x0373, r1
    3a76:	45 cf       	rjmp	.-374    	; 0x3902 <pkt_rx+0x28>
    3a78:	24 96       	adiw	r28, 0x04	; 4
    3a7a:	0f b6       	in	r0, 0x3f	; 63
    3a7c:	f8 94       	cli
    3a7e:	de bf       	out	0x3e, r29	; 62
    3a80:	0f be       	out	0x3f, r0	; 63
    3a82:	cd bf       	out	0x3d, r28	; 61
    3a84:	df 91       	pop	r29
    3a86:	cf 91       	pop	r28
    3a88:	1f 91       	pop	r17
    3a8a:	ff 90       	pop	r15
    3a8c:	ef 90       	pop	r14
    3a8e:	df 90       	pop	r13
    3a90:	cf 90       	pop	r12
    3a92:	08 95       	ret

00003a94 <err_tx_start>:
    3a94:	10 92 0c 07 	sts	0x070C, r1
    3a98:	08 95       	ret

00003a9a <err_tx_counter>:
    3a9a:	ff 92       	push	r15
    3a9c:	0f 93       	push	r16
    3a9e:	1f 93       	push	r17
    3aa0:	cf 93       	push	r28
    3aa2:	8c 01       	movw	r16, r24
    3aa4:	f6 2e       	mov	r15, r22
    3aa6:	fc 01       	movw	r30, r24
    3aa8:	c0 81       	ld	r28, Z
    3aaa:	cc 23       	and	r28, r28
    3aac:	59 f1       	breq	.+86     	; 0x3b04 <err_tx_counter+0x6a>
    3aae:	80 91 0c 07 	lds	r24, 0x070C
    3ab2:	88 23       	and	r24, r24
    3ab4:	f1 f0       	breq	.+60     	; 0x3af2 <err_tx_counter+0x58>
    3ab6:	80 e2       	ldi	r24, 0x20	; 32
    3ab8:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    3abc:	8f 2d       	mov	r24, r15
    3abe:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    3ac2:	8d e3       	ldi	r24, 0x3D	; 61
    3ac4:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    3ac8:	8c 2f       	mov	r24, r28
    3aca:	82 95       	swap	r24
    3acc:	8f 70       	andi	r24, 0x0F	; 15
    3ace:	e8 2f       	mov	r30, r24
    3ad0:	ff 27       	eor	r31, r31
    3ad2:	e5 5e       	subi	r30, 0xE5	; 229
    3ad4:	fa 4f       	sbci	r31, 0xFA	; 250
    3ad6:	84 91       	lpm	r24, Z
    3ad8:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    3adc:	cf 70       	andi	r28, 0x0F	; 15
    3ade:	ec 2f       	mov	r30, r28
    3ae0:	ff 27       	eor	r31, r31
    3ae2:	e5 5e       	subi	r30, 0xE5	; 229
    3ae4:	fa 4f       	sbci	r31, 0xFA	; 250
    3ae6:	84 91       	lpm	r24, Z
    3ae8:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    3aec:	f8 01       	movw	r30, r16
    3aee:	10 82       	st	Z, r1
    3af0:	09 c0       	rjmp	.+18     	; 0x3b04 <err_tx_counter+0x6a>
    3af2:	0e 94 ca 1a 	call	0x3594	; 0x3594 <pkt_tx_start>
    3af6:	86 e4       	ldi	r24, 0x46	; 70
    3af8:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <pkt_tx_uint8>
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	80 93 0c 07 	sts	0x070C, r24
    3b02:	dc cf       	rjmp	.-72     	; 0x3abc <err_tx_counter+0x22>
    3b04:	cf 91       	pop	r28
    3b06:	1f 91       	pop	r17
    3b08:	0f 91       	pop	r16
    3b0a:	ff 90       	pop	r15
    3b0c:	08 95       	ret

00003b0e <err_tx_end>:
    3b0e:	80 91 0c 07 	lds	r24, 0x070C
    3b12:	88 23       	and	r24, r24
    3b14:	09 f4       	brne	.+2      	; 0x3b18 <err_tx_end+0xa>
    3b16:	08 95       	ret
    3b18:	10 92 0c 07 	sts	0x070C, r1
    3b1c:	0e 94 33 1c 	call	0x3866	; 0x3866 <pkt_tx_end>
    3b20:	08 95       	ret

00003b22 <err_tx_comm>:
    3b22:	6f e4       	ldi	r22, 0x4F	; 79
    3b24:	87 e7       	ldi	r24, 0x77	; 119
    3b26:	95 e0       	ldi	r25, 0x05	; 5
    3b28:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <err_tx_counter>
    3b2c:	66 e4       	ldi	r22, 0x46	; 70
    3b2e:	89 e7       	ldi	r24, 0x79	; 121
    3b30:	95 e0       	ldi	r25, 0x05	; 5
    3b32:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <err_tx_counter>
    3b36:	68 e4       	ldi	r22, 0x48	; 72
    3b38:	88 e7       	ldi	r24, 0x78	; 120
    3b3a:	95 e0       	ldi	r25, 0x05	; 5
    3b3c:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <err_tx_counter>
    3b40:	60 e5       	ldi	r22, 0x50	; 80
    3b42:	8a e7       	ldi	r24, 0x7A	; 122
    3b44:	95 e0       	ldi	r25, 0x05	; 5
    3b46:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <err_tx_counter>
    3b4a:	63 e5       	ldi	r22, 0x53	; 83
    3b4c:	8b e7       	ldi	r24, 0x7B	; 123
    3b4e:	95 e0       	ldi	r25, 0x05	; 5
    3b50:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <err_tx_counter>
    3b54:	63 e4       	ldi	r22, 0x43	; 67
    3b56:	8c e7       	ldi	r24, 0x7C	; 124
    3b58:	95 e0       	ldi	r25, 0x05	; 5
    3b5a:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <err_tx_counter>
    3b5e:	6a e5       	ldi	r22, 0x5A	; 90
    3b60:	8d e7       	ldi	r24, 0x7D	; 125
    3b62:	95 e0       	ldi	r25, 0x05	; 5
    3b64:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <err_tx_counter>
    3b68:	64 e5       	ldi	r22, 0x54	; 84
    3b6a:	8e e7       	ldi	r24, 0x7E	; 126
    3b6c:	95 e0       	ldi	r25, 0x05	; 5
    3b6e:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <err_tx_counter>
    3b72:	08 95       	ret

00003b74 <uart_tx_empty>:
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	90 91 14 07 	lds	r25, 0x0714
    3b7c:	80 91 15 07 	lds	r24, 0x0715
    3b80:	98 17       	cp	r25, r24
    3b82:	11 f4       	brne	.+4      	; 0x3b88 <uart_tx_empty+0x14>
    3b84:	21 e0       	ldi	r18, 0x01	; 1
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	c9 01       	movw	r24, r18
    3b8a:	08 95       	ret

00003b8c <uart_tx_qlen>:
    3b8c:	80 91 14 07 	lds	r24, 0x0714
    3b90:	90 91 15 07 	lds	r25, 0x0715
    3b94:	89 1b       	sub	r24, r25
    3b96:	99 27       	eor	r25, r25
    3b98:	08 95       	ret

00003b9a <uart_tx_str>:
    3b9a:	cf 93       	push	r28
    3b9c:	df 93       	push	r29
    3b9e:	ec 01       	movw	r28, r24
    3ba0:	88 81       	ld	r24, Y
    3ba2:	88 23       	and	r24, r24
    3ba4:	61 f0       	breq	.+24     	; 0x3bbe <uart_tx_str+0x24>
    3ba6:	21 96       	adiw	r28, 0x01	; 1
    3ba8:	0e 94 a1 1a 	call	0x3542	; 0x3542 <uart_tx_uint8>
    3bac:	88 81       	ld	r24, Y
    3bae:	88 23       	and	r24, r24
    3bb0:	31 f0       	breq	.+12     	; 0x3bbe <uart_tx_str+0x24>
    3bb2:	21 96       	adiw	r28, 0x01	; 1
    3bb4:	0e 94 a1 1a 	call	0x3542	; 0x3542 <uart_tx_uint8>
    3bb8:	88 81       	ld	r24, Y
    3bba:	88 23       	and	r24, r24
    3bbc:	a1 f7       	brne	.-24     	; 0x3ba6 <uart_tx_str+0xc>
    3bbe:	df 91       	pop	r29
    3bc0:	cf 91       	pop	r28
    3bc2:	08 95       	ret

00003bc4 <uart_tx_str_P>:
    3bc4:	cf 93       	push	r28
    3bc6:	df 93       	push	r29
    3bc8:	ec 01       	movw	r28, r24
    3bca:	02 c0       	rjmp	.+4      	; 0x3bd0 <uart_tx_str_P+0xc>
    3bcc:	0e 94 a1 1a 	call	0x3542	; 0x3542 <uart_tx_uint8>
    3bd0:	fe 01       	movw	r30, r28
    3bd2:	21 96       	adiw	r28, 0x01	; 1
    3bd4:	84 91       	lpm	r24, Z
    3bd6:	88 23       	and	r24, r24
    3bd8:	c9 f7       	brne	.-14     	; 0x3bcc <uart_tx_str_P+0x8>
    3bda:	df 91       	pop	r29
    3bdc:	cf 91       	pop	r28
    3bde:	08 95       	ret

00003be0 <uart_tx_uint8_hex>:
    3be0:	1f 93       	push	r17
    3be2:	18 2f       	mov	r17, r24
    3be4:	82 95       	swap	r24
    3be6:	8f 70       	andi	r24, 0x0F	; 15
    3be8:	e8 2f       	mov	r30, r24
    3bea:	ff 27       	eor	r31, r31
    3bec:	e5 5e       	subi	r30, 0xE5	; 229
    3bee:	fa 4f       	sbci	r31, 0xFA	; 250
    3bf0:	84 91       	lpm	r24, Z
    3bf2:	0e 94 a1 1a 	call	0x3542	; 0x3542 <uart_tx_uint8>
    3bf6:	1f 70       	andi	r17, 0x0F	; 15
    3bf8:	e1 2f       	mov	r30, r17
    3bfa:	ff 27       	eor	r31, r31
    3bfc:	e5 5e       	subi	r30, 0xE5	; 229
    3bfe:	fa 4f       	sbci	r31, 0xFA	; 250
    3c00:	84 91       	lpm	r24, Z
    3c02:	0e 94 a1 1a 	call	0x3542	; 0x3542 <uart_tx_uint8>
    3c06:	1f 91       	pop	r17
    3c08:	08 95       	ret

00003c0a <uart_tx_uint16_hex>:
    3c0a:	0f 93       	push	r16
    3c0c:	1f 93       	push	r17
    3c0e:	8c 01       	movw	r16, r24
    3c10:	fc 01       	movw	r30, r24
    3c12:	ef 2f       	mov	r30, r31
    3c14:	ff 27       	eor	r31, r31
    3c16:	e2 95       	swap	r30
    3c18:	ef 70       	andi	r30, 0x0F	; 15
    3c1a:	e5 5e       	subi	r30, 0xE5	; 229
    3c1c:	fa 4f       	sbci	r31, 0xFA	; 250
    3c1e:	84 91       	lpm	r24, Z
    3c20:	0e 94 a1 1a 	call	0x3542	; 0x3542 <uart_tx_uint8>
    3c24:	e1 2f       	mov	r30, r17
    3c26:	ff 27       	eor	r31, r31
    3c28:	ef 70       	andi	r30, 0x0F	; 15
    3c2a:	f0 70       	andi	r31, 0x00	; 0
    3c2c:	e5 5e       	subi	r30, 0xE5	; 229
    3c2e:	fa 4f       	sbci	r31, 0xFA	; 250
    3c30:	84 91       	lpm	r24, Z
    3c32:	0e 94 a1 1a 	call	0x3542	; 0x3542 <uart_tx_uint8>
    3c36:	f8 01       	movw	r30, r16
    3c38:	f2 95       	swap	r31
    3c3a:	e2 95       	swap	r30
    3c3c:	ef 70       	andi	r30, 0x0F	; 15
    3c3e:	ef 27       	eor	r30, r31
    3c40:	ff 70       	andi	r31, 0x0F	; 15
    3c42:	ef 27       	eor	r30, r31
    3c44:	ef 70       	andi	r30, 0x0F	; 15
    3c46:	f0 70       	andi	r31, 0x00	; 0
    3c48:	e5 5e       	subi	r30, 0xE5	; 229
    3c4a:	fa 4f       	sbci	r31, 0xFA	; 250
    3c4c:	84 91       	lpm	r24, Z
    3c4e:	0e 94 a1 1a 	call	0x3542	; 0x3542 <uart_tx_uint8>
    3c52:	0f 70       	andi	r16, 0x0F	; 15
    3c54:	10 70       	andi	r17, 0x00	; 0
    3c56:	05 5e       	subi	r16, 0xE5	; 229
    3c58:	1a 4f       	sbci	r17, 0xFA	; 250
    3c5a:	f8 01       	movw	r30, r16
    3c5c:	84 91       	lpm	r24, Z
    3c5e:	0e 94 a1 1a 	call	0x3542	; 0x3542 <uart_tx_uint8>
    3c62:	1f 91       	pop	r17
    3c64:	0f 91       	pop	r16
    3c66:	08 95       	ret

00003c68 <uart_tx_uint32_hex>:
    3c68:	ef 92       	push	r14
    3c6a:	ff 92       	push	r15
    3c6c:	0f 93       	push	r16
    3c6e:	1f 93       	push	r17
    3c70:	7b 01       	movw	r14, r22
    3c72:	8c 01       	movw	r16, r24
    3c74:	c8 01       	movw	r24, r16
    3c76:	aa 27       	eor	r26, r26
    3c78:	bb 27       	eor	r27, r27
    3c7a:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <uart_tx_uint16_hex>
    3c7e:	c7 01       	movw	r24, r14
    3c80:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <uart_tx_uint16_hex>
    3c84:	1f 91       	pop	r17
    3c86:	0f 91       	pop	r16
    3c88:	ff 90       	pop	r15
    3c8a:	ef 90       	pop	r14
    3c8c:	08 95       	ret

00003c8e <uart_tx_int8>:
    3c8e:	0e 94 a1 1a 	call	0x3542	; 0x3542 <uart_tx_uint8>
    3c92:	08 95       	ret

00003c94 <uart_tx_uint16>:
    3c94:	0f 93       	push	r16
    3c96:	1f 93       	push	r17
    3c98:	8c 01       	movw	r16, r24
    3c9a:	0e 94 a1 1a 	call	0x3542	; 0x3542 <uart_tx_uint8>
    3c9e:	81 2f       	mov	r24, r17
    3ca0:	99 27       	eor	r25, r25
    3ca2:	0e 94 a1 1a 	call	0x3542	; 0x3542 <uart_tx_uint8>
    3ca6:	1f 91       	pop	r17
    3ca8:	0f 91       	pop	r16
    3caa:	08 95       	ret

00003cac <uart_tx_int16>:
    3cac:	0f 93       	push	r16
    3cae:	1f 93       	push	r17
    3cb0:	8c 01       	movw	r16, r24
    3cb2:	0e 94 a1 1a 	call	0x3542	; 0x3542 <uart_tx_uint8>
    3cb6:	81 2f       	mov	r24, r17
    3cb8:	99 27       	eor	r25, r25
    3cba:	87 fd       	sbrc	r24, 7
    3cbc:	9a 95       	dec	r25
    3cbe:	0e 94 a1 1a 	call	0x3542	; 0x3542 <uart_tx_uint8>
    3cc2:	1f 91       	pop	r17
    3cc4:	0f 91       	pop	r16
    3cc6:	08 95       	ret

00003cc8 <uart_tx_float>:
    3cc8:	ef 92       	push	r14
    3cca:	ff 92       	push	r15
    3ccc:	0f 93       	push	r16
    3cce:	1f 93       	push	r17
    3cd0:	dc 01       	movw	r26, r24
    3cd2:	cb 01       	movw	r24, r22
    3cd4:	7c 01       	movw	r14, r24
    3cd6:	8d 01       	movw	r16, r26
    3cd8:	0e 94 a1 1a 	call	0x3542	; 0x3542 <uart_tx_uint8>
    3cdc:	8f 2d       	mov	r24, r15
    3cde:	0e 94 a1 1a 	call	0x3542	; 0x3542 <uart_tx_uint8>
    3ce2:	80 2f       	mov	r24, r16
    3ce4:	0e 94 a1 1a 	call	0x3542	; 0x3542 <uart_tx_uint8>
    3ce8:	81 2f       	mov	r24, r17
    3cea:	0e 94 a1 1a 	call	0x3542	; 0x3542 <uart_tx_uint8>
    3cee:	1f 91       	pop	r17
    3cf0:	0f 91       	pop	r16
    3cf2:	ff 90       	pop	r15
    3cf4:	ef 90       	pop	r14
    3cf6:	08 95       	ret

00003cf8 <__vector_18>:
    3cf8:	1f 92       	push	r1
    3cfa:	0f 92       	push	r0
    3cfc:	0f b6       	in	r0, 0x3f	; 63
    3cfe:	0f 92       	push	r0
    3d00:	11 24       	eor	r1, r1
    3d02:	2f 93       	push	r18
    3d04:	3f 93       	push	r19
    3d06:	4f 93       	push	r20
    3d08:	5f 93       	push	r21
    3d0a:	6f 93       	push	r22
    3d0c:	8f 93       	push	r24
    3d0e:	9f 93       	push	r25
    3d10:	ef 93       	push	r30
    3d12:	ff 93       	push	r31
    3d14:	2b b1       	in	r18, 0x0b	; 11
    3d16:	6c b1       	in	r22, 0x0c	; 12
    3d18:	80 91 16 07 	lds	r24, 0x0716
    3d1c:	8f 5f       	subi	r24, 0xFF	; 255
    3d1e:	48 2f       	mov	r20, r24
    3d20:	55 27       	eor	r21, r21
    3d22:	80 91 0b 07 	lds	r24, 0x070B
    3d26:	48 17       	cp	r20, r24
    3d28:	09 f1       	breq	.+66     	; 0x3d6c <__vector_18+0x74>
    3d2a:	33 27       	eor	r19, r19
    3d2c:	24 fd       	sbrc	r18, 4
    3d2e:	18 c0       	rjmp	.+48     	; 0x3d60 <__vector_18+0x68>
    3d30:	23 ff       	sbrs	r18, 3
    3d32:	05 c0       	rjmp	.+10     	; 0x3d3e <__vector_18+0x46>
    3d34:	80 91 78 05 	lds	r24, 0x0578
    3d38:	8f 5f       	subi	r24, 0xFF	; 255
    3d3a:	80 93 78 05 	sts	0x0578, r24
    3d3e:	22 ff       	sbrs	r18, 2
    3d40:	05 c0       	rjmp	.+10     	; 0x3d4c <__vector_18+0x54>
    3d42:	80 91 7a 05 	lds	r24, 0x057A
    3d46:	8f 5f       	subi	r24, 0xFF	; 255
    3d48:	80 93 7a 05 	sts	0x057A, r24
    3d4c:	80 91 16 07 	lds	r24, 0x0716
    3d50:	e8 2f       	mov	r30, r24
    3d52:	ff 27       	eor	r31, r31
    3d54:	e9 58       	subi	r30, 0x89	; 137
    3d56:	fb 4f       	sbci	r31, 0xFB	; 251
    3d58:	60 83       	st	Z, r22
    3d5a:	40 93 16 07 	sts	0x0716, r20
    3d5e:	0b c0       	rjmp	.+22     	; 0x3d76 <__vector_18+0x7e>
    3d60:	80 91 79 05 	lds	r24, 0x0579
    3d64:	8f 5f       	subi	r24, 0xFF	; 255
    3d66:	80 93 79 05 	sts	0x0579, r24
    3d6a:	e2 cf       	rjmp	.-60     	; 0x3d30 <__vector_18+0x38>
    3d6c:	80 91 77 05 	lds	r24, 0x0577
    3d70:	8f 5f       	subi	r24, 0xFF	; 255
    3d72:	80 93 77 05 	sts	0x0577, r24
    3d76:	ff 91       	pop	r31
    3d78:	ef 91       	pop	r30
    3d7a:	9f 91       	pop	r25
    3d7c:	8f 91       	pop	r24
    3d7e:	6f 91       	pop	r22
    3d80:	5f 91       	pop	r21
    3d82:	4f 91       	pop	r20
    3d84:	3f 91       	pop	r19
    3d86:	2f 91       	pop	r18
    3d88:	0f 90       	pop	r0
    3d8a:	0f be       	out	0x3f, r0	; 63
    3d8c:	0f 90       	pop	r0
    3d8e:	1f 90       	pop	r1
    3d90:	18 95       	reti

00003d92 <uart_poll>:
    3d92:	4b b1       	in	r20, 0x0b	; 11
    3d94:	47 fd       	sbrc	r20, 7
    3d96:	1a c0       	rjmp	.+52     	; 0x3dcc <uart_poll+0x3a>
    3d98:	24 2f       	mov	r18, r20
    3d9a:	33 27       	eor	r19, r19
    3d9c:	26 ff       	sbrs	r18, 6
    3d9e:	15 c0       	rjmp	.+42     	; 0x3dca <uart_poll+0x38>
    3da0:	90 91 14 07 	lds	r25, 0x0714
    3da4:	80 91 15 07 	lds	r24, 0x0715
    3da8:	98 17       	cp	r25, r24
    3daa:	79 f0       	breq	.+30     	; 0x3dca <uart_poll+0x38>
    3dac:	4b b9       	out	0x0b, r20	; 11
    3dae:	80 91 15 07 	lds	r24, 0x0715
    3db2:	e8 2f       	mov	r30, r24
    3db4:	ff 27       	eor	r31, r31
    3db6:	e9 58       	subi	r30, 0x89	; 137
    3db8:	fc 4f       	sbci	r31, 0xFC	; 252
    3dba:	80 81       	ld	r24, Z
    3dbc:	8c b9       	out	0x0c, r24	; 12
    3dbe:	80 91 15 07 	lds	r24, 0x0715
    3dc2:	8f 5f       	subi	r24, 0xFF	; 255
    3dc4:	99 27       	eor	r25, r25
    3dc6:	80 93 15 07 	sts	0x0715, r24
    3dca:	08 95       	ret
    3dcc:	5c b1       	in	r21, 0x0c	; 12
    3dce:	80 91 16 07 	lds	r24, 0x0716
    3dd2:	8f 5f       	subi	r24, 0xFF	; 255
    3dd4:	68 2f       	mov	r22, r24
    3dd6:	77 27       	eor	r23, r23
    3dd8:	80 91 0b 07 	lds	r24, 0x070B
    3ddc:	68 17       	cp	r22, r24
    3dde:	09 f1       	breq	.+66     	; 0x3e22 <uart_poll+0x90>
    3de0:	24 2f       	mov	r18, r20
    3de2:	33 27       	eor	r19, r19
    3de4:	24 ff       	sbrs	r18, 4
    3de6:	05 c0       	rjmp	.+10     	; 0x3df2 <uart_poll+0x60>
    3de8:	80 91 79 05 	lds	r24, 0x0579
    3dec:	8f 5f       	subi	r24, 0xFF	; 255
    3dee:	80 93 79 05 	sts	0x0579, r24
    3df2:	23 ff       	sbrs	r18, 3
    3df4:	05 c0       	rjmp	.+10     	; 0x3e00 <uart_poll+0x6e>
    3df6:	80 91 78 05 	lds	r24, 0x0578
    3dfa:	8f 5f       	subi	r24, 0xFF	; 255
    3dfc:	80 93 78 05 	sts	0x0578, r24
    3e00:	22 ff       	sbrs	r18, 2
    3e02:	05 c0       	rjmp	.+10     	; 0x3e0e <uart_poll+0x7c>
    3e04:	80 91 7a 05 	lds	r24, 0x057A
    3e08:	8f 5f       	subi	r24, 0xFF	; 255
    3e0a:	80 93 7a 05 	sts	0x057A, r24
    3e0e:	80 91 16 07 	lds	r24, 0x0716
    3e12:	e8 2f       	mov	r30, r24
    3e14:	ff 27       	eor	r31, r31
    3e16:	e9 58       	subi	r30, 0x89	; 137
    3e18:	fb 4f       	sbci	r31, 0xFB	; 251
    3e1a:	50 83       	st	Z, r21
    3e1c:	60 93 16 07 	sts	0x0716, r22
    3e20:	bd cf       	rjmp	.-134    	; 0x3d9c <uart_poll+0xa>
    3e22:	80 91 77 05 	lds	r24, 0x0577
    3e26:	8f 5f       	subi	r24, 0xFF	; 255
    3e28:	80 93 77 05 	sts	0x0577, r24
    3e2c:	b5 cf       	rjmp	.-150    	; 0x3d98 <uart_poll+0x6>

00003e2e <uart_rx_uint16>:
    3e2e:	1f 93       	push	r17
    3e30:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <uart_rx_uint8>
    3e34:	18 2f       	mov	r17, r24
    3e36:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <uart_rx_uint8>
    3e3a:	99 27       	eor	r25, r25
    3e3c:	38 2f       	mov	r19, r24
    3e3e:	22 27       	eor	r18, r18
    3e40:	81 2f       	mov	r24, r17
    3e42:	99 27       	eor	r25, r25
    3e44:	82 2b       	or	r24, r18
    3e46:	93 2b       	or	r25, r19
    3e48:	1f 91       	pop	r17
    3e4a:	08 95       	ret

00003e4c <uart_rx_peek>:
    3e4c:	e0 91 0b 07 	lds	r30, 0x070B
    3e50:	80 91 16 07 	lds	r24, 0x0716
    3e54:	8e 17       	cp	r24, r30
    3e56:	e1 f3       	breq	.-8      	; 0x3e50 <uart_rx_peek+0x4>
    3e58:	ff 27       	eor	r31, r31
    3e5a:	e9 58       	subi	r30, 0x89	; 137
    3e5c:	fb 4f       	sbci	r31, 0xFB	; 251
    3e5e:	80 81       	ld	r24, Z
    3e60:	99 27       	eor	r25, r25
    3e62:	08 95       	ret

00003e64 <uart_rx_qlen>:
    3e64:	80 91 16 07 	lds	r24, 0x0716
    3e68:	90 91 0b 07 	lds	r25, 0x070B
    3e6c:	89 1b       	sub	r24, r25


uint8_t uart_rx_qlen()
{
  return rx_modulo(rx_head+RX_BUF_SIZE-rx_tail);
}
    3e6e:	99 27       	eor	r25, r25
    3e70:	08 95       	ret

00003e72 <uart_init_rx>:

void uart_init_rx()
{
  rx_head = rx_tail = 0;
    3e72:	10 92 0b 07 	sts	0x070B, r1
    3e76:	10 92 16 07 	sts	0x0716, r1

#if defined (__AVR_ATmega128__)
  DDRE &= ~(1<<0); // PE0 is rxd, needs to be input
    3e7a:	10 98       	cbi	0x02, 0	; 2
  PORTE &= ~(1<<0); // no pullup
    3e7c:	18 98       	cbi	0x03, 0	; 3
#else
  DDRD &= ~(1<<0); // PD0 is rxd, needs to be input
  PORTD &= ~(1<<0); // no pullup
#endif
 
  UCSRB |= (1<<RXEN) | (1<<RXCIE); // enable rx
    3e7e:	8a b1       	in	r24, 0x0a	; 10
    3e80:	80 69       	ori	r24, 0x90	; 144
    3e82:	8a b9       	out	0x0a, r24	; 10
    3e84:	08 95       	ret

00003e86 <__subsf3>:
    3e86:	50 58       	subi	r21, 0x80	; 128

00003e88 <__addsf3>:
    3e88:	19 2e       	mov	r1, r25
    3e8a:	ef d0       	rcall	.+478    	; 0x406a <__fp_split3>
    3e8c:	01 d0       	rcall	.+2      	; 0x3e90 <__addsf3x>
    3e8e:	d2 c0       	rjmp	.+420    	; 0x4034 <__fp_merge>

00003e90 <__addsf3x>:
    3e90:	ba 17       	cp	r27, r26
    3e92:	62 07       	cpc	r22, r18
    3e94:	73 07       	cpc	r23, r19
    3e96:	84 07       	cpc	r24, r20
    3e98:	95 07       	cpc	r25, r21
    3e9a:	b1 f1       	breq	.+108    	; 0x3f08 <__addsf3x+0x78>
    3e9c:	88 f4       	brcc	.+34     	; 0x3ec0 <__addsf3x+0x30>
    3e9e:	0e f4       	brtc	.+2      	; 0x3ea2 <__addsf3x+0x12>
    3ea0:	10 94       	com	r1
    3ea2:	0b 2e       	mov	r0, r27
    3ea4:	ba 2f       	mov	r27, r26
    3ea6:	a0 2d       	mov	r26, r0
    3ea8:	06 2e       	mov	r0, r22
    3eaa:	62 2f       	mov	r22, r18
    3eac:	20 2d       	mov	r18, r0
    3eae:	07 2e       	mov	r0, r23
    3eb0:	73 2f       	mov	r23, r19
    3eb2:	30 2d       	mov	r19, r0
    3eb4:	08 2e       	mov	r0, r24
    3eb6:	84 2f       	mov	r24, r20
    3eb8:	40 2d       	mov	r20, r0
    3eba:	09 2e       	mov	r0, r25
    3ebc:	95 2f       	mov	r25, r21
    3ebe:	50 2d       	mov	r21, r0
    3ec0:	ff 27       	eor	r31, r31
    3ec2:	55 23       	and	r21, r21
    3ec4:	b9 f0       	breq	.+46     	; 0x3ef4 <__addsf3x+0x64>
    3ec6:	59 1b       	sub	r21, r25
    3ec8:	49 f0       	breq	.+18     	; 0x3edc <__addsf3x+0x4c>
    3eca:	57 3e       	cpi	r21, 0xE7	; 231
    3ecc:	98 f0       	brcs	.+38     	; 0x3ef4 <__addsf3x+0x64>
    3ece:	46 95       	lsr	r20
    3ed0:	37 95       	ror	r19
    3ed2:	27 95       	ror	r18
    3ed4:	a7 95       	ror	r26
    3ed6:	f0 40       	sbci	r31, 0x00	; 0
    3ed8:	53 95       	inc	r21
    3eda:	c9 f7       	brne	.-14     	; 0x3ece <__addsf3x+0x3e>
    3edc:	76 f0       	brts	.+28     	; 0x3efa <__addsf3x+0x6a>
    3ede:	ba 0f       	add	r27, r26
    3ee0:	62 1f       	adc	r22, r18
    3ee2:	73 1f       	adc	r23, r19
    3ee4:	84 1f       	adc	r24, r20
    3ee6:	30 f4       	brcc	.+12     	; 0x3ef4 <__addsf3x+0x64>
    3ee8:	87 95       	ror	r24
    3eea:	77 95       	ror	r23
    3eec:	67 95       	ror	r22
    3eee:	b7 95       	ror	r27
    3ef0:	f0 40       	sbci	r31, 0x00	; 0
    3ef2:	93 95       	inc	r25
    3ef4:	17 fa       	bst	r1, 7
    3ef6:	0f 2e       	mov	r0, r31
    3ef8:	08 95       	ret
    3efa:	bf 1b       	sub	r27, r31
    3efc:	bb 27       	eor	r27, r27
    3efe:	ba 0b       	sbc	r27, r26
    3f00:	62 0b       	sbc	r22, r18
    3f02:	73 0b       	sbc	r23, r19
    3f04:	84 0b       	sbc	r24, r20
    3f06:	f6 cf       	rjmp	.-20     	; 0x3ef4 <__addsf3x+0x64>
    3f08:	de f6       	brtc	.-74     	; 0x3ec0 <__addsf3x+0x30>
    3f0a:	db c0       	rjmp	.+438    	; 0x40c2 <__fp_zerox>

00003f0c <__divsf3>:
    3f0c:	ae d0       	rcall	.+348    	; 0x406a <__fp_split3>
    3f0e:	01 d0       	rcall	.+2      	; 0x3f12 <__divsf3x>
    3f10:	91 c0       	rjmp	.+290    	; 0x4034 <__fp_merge>

00003f12 <__divsf3x>:
    3f12:	55 23       	and	r21, r21
    3f14:	59 f0       	breq	.+22     	; 0x3f2c <__divsf3x+0x1a>
    3f16:	99 23       	and	r25, r25
    3f18:	69 f0       	breq	.+26     	; 0x3f34 <__divsf3x+0x22>
    3f1a:	9f 57       	subi	r25, 0x7F	; 127
    3f1c:	5f 57       	subi	r21, 0x7F	; 127
    3f1e:	95 1b       	sub	r25, r21
    3f20:	33 f4       	brvc	.+12     	; 0x3f2e <__divsf3x+0x1c>
    3f22:	42 f4       	brpl	.+16     	; 0x3f34 <__divsf3x+0x22>
    3f24:	90 38       	cpi	r25, 0x80	; 128
    3f26:	11 f4       	brne	.+4      	; 0x3f2c <__divsf3x+0x1a>
    3f28:	91 58       	subi	r25, 0x81	; 129
    3f2a:	05 c0       	rjmp	.+10     	; 0x3f36 <__divsf3x+0x24>
    3f2c:	9b c0       	rjmp	.+310    	; 0x4064 <__fp_nan>
    3f2e:	91 58       	subi	r25, 0x81	; 129
    3f30:	9f 3f       	cpi	r25, 0xFF	; 255
    3f32:	09 f4       	brne	.+2      	; 0x3f36 <__divsf3x+0x24>
    3f34:	c6 c0       	rjmp	.+396    	; 0x40c2 <__fp_zerox>
    3f36:	bb 27       	eor	r27, r27
    3f38:	11 24       	eor	r1, r1
    3f3a:	62 17       	cp	r22, r18
    3f3c:	73 07       	cpc	r23, r19
    3f3e:	84 07       	cpc	r24, r20
    3f40:	30 f4       	brcc	.+12     	; 0x3f4e <__divsf3x+0x3c>
    3f42:	66 0f       	add	r22, r22
    3f44:	77 1f       	adc	r23, r23
    3f46:	88 1f       	adc	r24, r24
    3f48:	bb 1f       	adc	r27, r27
    3f4a:	91 50       	subi	r25, 0x01	; 1
    3f4c:	98 f3       	brcs	.-26     	; 0x3f34 <__divsf3x+0x22>
    3f4e:	11 d0       	rcall	.+34     	; 0x3f72 <__divsf3x+0x60>
    3f50:	0f 92       	push	r0
    3f52:	0f d0       	rcall	.+30     	; 0x3f72 <__divsf3x+0x60>
    3f54:	0f 92       	push	r0
    3f56:	0d d0       	rcall	.+26     	; 0x3f72 <__divsf3x+0x60>
    3f58:	a0 e8       	ldi	r26, 0x80	; 128
    3f5a:	26 17       	cp	r18, r22
    3f5c:	37 07       	cpc	r19, r23
    3f5e:	48 07       	cpc	r20, r24
    3f60:	1b 06       	cpc	r1, r27
    3f62:	09 f0       	breq	.+2      	; 0x3f66 <__divsf3x+0x54>
    3f64:	a0 48       	sbci	r26, 0x80	; 128
    3f66:	ba 2f       	mov	r27, r26
    3f68:	60 2d       	mov	r22, r0
    3f6a:	7f 91       	pop	r23
    3f6c:	8f 91       	pop	r24
    3f6e:	00 24       	eor	r0, r0
    3f70:	08 95       	ret
    3f72:	a0 e8       	ldi	r26, 0x80	; 128
    3f74:	00 24       	eor	r0, r0
    3f76:	62 17       	cp	r22, r18
    3f78:	73 07       	cpc	r23, r19
    3f7a:	84 07       	cpc	r24, r20
    3f7c:	b1 05       	cpc	r27, r1
    3f7e:	28 f0       	brcs	.+10     	; 0x3f8a <__divsf3x+0x78>
    3f80:	62 1b       	sub	r22, r18
    3f82:	73 0b       	sbc	r23, r19
    3f84:	84 0b       	sbc	r24, r20
    3f86:	b1 09       	sbc	r27, r1
    3f88:	0a 2a       	or	r0, r26
    3f8a:	66 0f       	add	r22, r22
    3f8c:	77 1f       	adc	r23, r23
    3f8e:	88 1f       	adc	r24, r24
    3f90:	bb 1f       	adc	r27, r27
    3f92:	a6 95       	lsr	r26
    3f94:	81 f7       	brne	.-32     	; 0x3f76 <__divsf3x+0x64>
    3f96:	08 95       	ret

00003f98 <__fixsfsi>:
    3f98:	97 fb       	bst	r25, 7
    3f9a:	73 d0       	rcall	.+230    	; 0x4082 <__fp_split1>
    3f9c:	9f 37       	cpi	r25, 0x7F	; 127
    3f9e:	38 f0       	brcs	.+14     	; 0x3fae <__fixsfsi+0x16>
    3fa0:	fe e9       	ldi	r31, 0x9E	; 158
    3fa2:	f9 1b       	sub	r31, r25
    3fa4:	98 2f       	mov	r25, r24
    3fa6:	87 2f       	mov	r24, r23
    3fa8:	76 2f       	mov	r23, r22
    3faa:	6b 2f       	mov	r22, r27
    3fac:	05 c0       	rjmp	.+10     	; 0x3fb8 <__fixsfsi+0x20>
    3fae:	86 c0       	rjmp	.+268    	; 0x40bc <__fp_zero>
    3fb0:	96 95       	lsr	r25
    3fb2:	87 95       	ror	r24
    3fb4:	77 95       	ror	r23
    3fb6:	67 95       	ror	r22
    3fb8:	f1 50       	subi	r31, 0x01	; 1
    3fba:	d0 f7       	brcc	.-12     	; 0x3fb0 <__fixsfsi+0x18>
    3fbc:	3e f4       	brtc	.+14     	; 0x3fcc <__fp_lneg+0xe>

00003fbe <__fp_lneg>:
    3fbe:	90 95       	com	r25
    3fc0:	80 95       	com	r24
    3fc2:	70 95       	com	r23
    3fc4:	61 95       	neg	r22
    3fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    3fc8:	8f 4f       	sbci	r24, 0xFF	; 255
    3fca:	9f 4f       	sbci	r25, 0xFF	; 255
    3fcc:	08 95       	ret

00003fce <__floatunssisf>:
    3fce:	e8 94       	clt
    3fd0:	03 c0       	rjmp	.+6      	; 0x3fd8 <__floatsisf+0x6>

00003fd2 <__floatsisf>:
    3fd2:	97 fb       	bst	r25, 7
    3fd4:	0e f4       	brtc	.+2      	; 0x3fd8 <__floatsisf+0x6>
    3fd6:	f3 df       	rcall	.-26     	; 0x3fbe <__fp_lneg>
    3fd8:	b6 2f       	mov	r27, r22
    3fda:	67 2f       	mov	r22, r23
    3fdc:	78 2f       	mov	r23, r24
    3fde:	89 2f       	mov	r24, r25
    3fe0:	9e e9       	ldi	r25, 0x9E	; 158
    3fe2:	00 24       	eor	r0, r0
    3fe4:	27 c0       	rjmp	.+78     	; 0x4034 <__fp_merge>

00003fe6 <__eqsf2>:
    3fe6:	0e d0       	rcall	.+28     	; 0x4004 <.fp_cmp>
    3fe8:	5e f0       	brts	.+22     	; 0x4000 <__cmpsf2+0xe>
    3fea:	04 c0       	rjmp	.+8      	; 0x3ff4 <__cmpsf2+0x2>

00003fec <__gesf2>:
    3fec:	0b d0       	rcall	.+22     	; 0x4004 <.fp_cmp>
    3fee:	26 f0       	brts	.+8      	; 0x3ff8 <__cmpsf2+0x6>
    3ff0:	01 c0       	rjmp	.+2      	; 0x3ff4 <__cmpsf2+0x2>

00003ff2 <__cmpsf2>:
    3ff2:	08 d0       	rcall	.+16     	; 0x4004 <.fp_cmp>
    3ff4:	19 f0       	breq	.+6      	; 0x3ffc <__cmpsf2+0xa>
    3ff6:	20 f4       	brcc	.+8      	; 0x4000 <__cmpsf2+0xe>
    3ff8:	8f ef       	ldi	r24, 0xFF	; 255
    3ffa:	08 95       	ret
    3ffc:	80 e0       	ldi	r24, 0x00	; 0
    3ffe:	08 95       	ret
    4000:	81 e0       	ldi	r24, 0x01	; 1
    4002:	08 95       	ret

00004004 <.fp_cmp>:
    4004:	97 fb       	bst	r25, 7
    4006:	09 2e       	mov	r0, r25
    4008:	05 26       	eor	r0, r21
    400a:	00 f8       	bld	r0, 0
    400c:	68 94       	set
    400e:	30 d0       	rcall	.+96     	; 0x4070 <__fp_split2>
    4010:	e8 94       	clt
    4012:	07 fc       	sbrc	r0, 7
    4014:	07 c0       	rjmp	.+14     	; 0x4024 <.fp_cmp+0x20>
    4016:	62 17       	cp	r22, r18
    4018:	73 07       	cpc	r23, r19
    401a:	84 07       	cpc	r24, r20
    401c:	95 07       	cpc	r25, r21
    401e:	21 f0       	breq	.+8      	; 0x4028 <.fp_cmp+0x24>
    4020:	08 f4       	brcc	.+2      	; 0x4024 <.fp_cmp+0x20>
    4022:	00 94       	com	r0
    4024:	07 94       	ror	r0
    4026:	98 94       	clz
    4028:	08 95       	ret
    402a:	9a 95       	dec	r25
    402c:	bb 0f       	add	r27, r27
    402e:	66 1f       	adc	r22, r22
    4030:	77 1f       	adc	r23, r23
    4032:	88 1f       	adc	r24, r24

00004034 <__fp_merge>:
    4034:	11 24       	eor	r1, r1
    4036:	99 23       	and	r25, r25
    4038:	a1 f0       	breq	.+40     	; 0x4062 <__fp_merge+0x2e>
    403a:	88 23       	and	r24, r24
    403c:	b2 f7       	brpl	.-20     	; 0x402a <.fp_cmp+0x26>
    403e:	9f 3f       	cpi	r25, 0xFF	; 255
    4040:	59 f0       	breq	.+22     	; 0x4058 <__fp_merge+0x24>
    4042:	bb 0f       	add	r27, r27
    4044:	48 f4       	brcc	.+18     	; 0x4058 <__fp_merge+0x24>
    4046:	21 f4       	brne	.+8      	; 0x4050 <__fp_merge+0x1c>
    4048:	00 20       	and	r0, r0
    404a:	11 f4       	brne	.+4      	; 0x4050 <__fp_merge+0x1c>
    404c:	60 ff       	sbrs	r22, 0
    404e:	04 c0       	rjmp	.+8      	; 0x4058 <__fp_merge+0x24>
    4050:	6f 5f       	subi	r22, 0xFF	; 255
    4052:	7f 4f       	sbci	r23, 0xFF	; 255
    4054:	8f 4f       	sbci	r24, 0xFF	; 255
    4056:	9f 4f       	sbci	r25, 0xFF	; 255
    4058:	88 1f       	adc	r24, r24
    405a:	97 95       	ror	r25
    405c:	87 95       	ror	r24
    405e:	97 f9       	bld	r25, 7
    4060:	08 95       	ret
    4062:	2c c0       	rjmp	.+88     	; 0x40bc <__fp_zero>

00004064 <__fp_nan>:
    4064:	9f ef       	ldi	r25, 0xFF	; 255
    4066:	80 ec       	ldi	r24, 0xC0	; 192
    4068:	08 95       	ret

0000406a <__fp_split3>:
    406a:	05 2e       	mov	r0, r21
    406c:	09 26       	eor	r0, r25
    406e:	07 fa       	bst	r0, 7

00004070 <__fp_split2>:
    4070:	44 0f       	add	r20, r20
    4072:	55 1f       	adc	r21, r21
    4074:	5f 3f       	cpi	r21, 0xFF	; 255
    4076:	79 f0       	breq	.+30     	; 0x4096 <__fp_split1+0x14>
    4078:	aa 27       	eor	r26, r26
    407a:	a5 17       	cp	r26, r21
    407c:	08 f0       	brcs	.+2      	; 0x4080 <__fp_split2+0x10>
    407e:	51 e0       	ldi	r21, 0x01	; 1
    4080:	47 95       	ror	r20

00004082 <__fp_split1>:
    4082:	88 0f       	add	r24, r24
    4084:	99 1f       	adc	r25, r25
    4086:	9f 3f       	cpi	r25, 0xFF	; 255
    4088:	31 f0       	breq	.+12     	; 0x4096 <__fp_split1+0x14>
    408a:	bb 27       	eor	r27, r27
    408c:	b9 17       	cp	r27, r25
    408e:	08 f0       	brcs	.+2      	; 0x4092 <__fp_split1+0x10>
    4090:	91 e0       	ldi	r25, 0x01	; 1
    4092:	87 95       	ror	r24
    4094:	08 95       	ret
    4096:	9f 91       	pop	r25
    4098:	9f 91       	pop	r25
    409a:	11 24       	eor	r1, r1
    409c:	e3 cf       	rjmp	.-58     	; 0x4064 <__fp_nan>

0000409e <__fp_split_a>:
    409e:	97 fb       	bst	r25, 7
    40a0:	88 0f       	add	r24, r24
    40a2:	99 1f       	adc	r25, r25
    40a4:	9f 3f       	cpi	r25, 0xFF	; 255
    40a6:	31 f0       	breq	.+12     	; 0x40b4 <__fp_split_a+0x16>
    40a8:	bb 27       	eor	r27, r27
    40aa:	b9 17       	cp	r27, r25
    40ac:	08 f0       	brcs	.+2      	; 0x40b0 <__fp_split_a+0x12>
    40ae:	91 e0       	ldi	r25, 0x01	; 1
    40b0:	87 95       	ror	r24
    40b2:	08 95       	ret
    40b4:	9f 91       	pop	r25
    40b6:	9f 91       	pop	r25
    40b8:	11 24       	eor	r1, r1
    40ba:	d4 cf       	rjmp	.-88     	; 0x4064 <__fp_nan>

000040bc <__fp_zero>:
    40bc:	66 27       	eor	r22, r22
    40be:	77 27       	eor	r23, r23
    40c0:	88 27       	eor	r24, r24

000040c2 <__fp_zerox>:
    40c2:	99 27       	eor	r25, r25
    40c4:	08 95       	ret

000040c6 <__mulsf3>:
    40c6:	d1 df       	rcall	.-94     	; 0x406a <__fp_split3>
    40c8:	01 d0       	rcall	.+2      	; 0x40cc <__mulsf3x>
    40ca:	b4 cf       	rjmp	.-152    	; 0x4034 <__fp_merge>

000040cc <__mulsf3x>:
    40cc:	99 23       	and	r25, r25
    40ce:	39 f0       	breq	.+14     	; 0x40de <__mulsf3x+0x12>
    40d0:	55 23       	and	r21, r21
    40d2:	29 f0       	breq	.+10     	; 0x40de <__mulsf3x+0x12>
    40d4:	9f 57       	subi	r25, 0x7F	; 127
    40d6:	5f 57       	subi	r21, 0x7F	; 127
    40d8:	95 0f       	add	r25, r21
    40da:	13 f4       	brvc	.+4      	; 0x40e0 <__mulsf3x+0x14>
    40dc:	9a f1       	brmi	.+102    	; 0x4144 <__mulsf3x+0x78>
    40de:	f1 cf       	rjmp	.-30     	; 0x40c2 <__fp_zerox>
    40e0:	91 58       	subi	r25, 0x81	; 129
    40e2:	9f 3f       	cpi	r25, 0xFF	; 255
    40e4:	e1 f3       	breq	.-8      	; 0x40de <__mulsf3x+0x12>
    40e6:	62 9f       	mul	r22, r18
    40e8:	a1 2d       	mov	r26, r1
    40ea:	0f 92       	push	r0
    40ec:	bb 27       	eor	r27, r27
    40ee:	63 9f       	mul	r22, r19
    40f0:	a0 0d       	add	r26, r0
    40f2:	b1 1d       	adc	r27, r1
    40f4:	ee 27       	eor	r30, r30
    40f6:	72 9f       	mul	r23, r18
    40f8:	a0 0d       	add	r26, r0
    40fa:	b1 1d       	adc	r27, r1
    40fc:	ee 1f       	adc	r30, r30
    40fe:	af 93       	push	r26
    4100:	aa 27       	eor	r26, r26
    4102:	64 9f       	mul	r22, r20
    4104:	b0 0d       	add	r27, r0
    4106:	e1 1d       	adc	r30, r1
    4108:	73 9f       	mul	r23, r19
    410a:	b0 0d       	add	r27, r0
    410c:	e1 1d       	adc	r30, r1
    410e:	aa 1f       	adc	r26, r26
    4110:	66 27       	eor	r22, r22
    4112:	82 9f       	mul	r24, r18
    4114:	b0 0d       	add	r27, r0
    4116:	e1 1d       	adc	r30, r1
    4118:	a6 1f       	adc	r26, r22
    411a:	55 27       	eor	r21, r21
    411c:	74 9f       	mul	r23, r20
    411e:	e0 0d       	add	r30, r0
    4120:	a1 1d       	adc	r26, r1
    4122:	55 1f       	adc	r21, r21
    4124:	83 9f       	mul	r24, r19
    4126:	e0 0d       	add	r30, r0
    4128:	a1 1d       	adc	r26, r1
    412a:	56 1f       	adc	r21, r22
    412c:	84 9f       	mul	r24, r20
    412e:	a0 0d       	add	r26, r0
    4130:	51 1d       	adc	r21, r1
    4132:	85 2f       	mov	r24, r21
    4134:	7a 2f       	mov	r23, r26
    4136:	6e 2f       	mov	r22, r30
    4138:	1f 90       	pop	r1
    413a:	0f 90       	pop	r0
    413c:	88 23       	and	r24, r24
    413e:	1a f4       	brpl	.+6      	; 0x4146 <__mulsf3x+0x7a>
    4140:	93 95       	inc	r25
    4142:	39 f4       	brne	.+14     	; 0x4152 <__mulsf3x+0x86>
    4144:	8f cf       	rjmp	.-226    	; 0x4064 <__fp_nan>
    4146:	00 0c       	add	r0, r0
    4148:	11 1c       	adc	r1, r1
    414a:	bb 1f       	adc	r27, r27
    414c:	66 1f       	adc	r22, r22
    414e:	77 1f       	adc	r23, r23
    4150:	88 1f       	adc	r24, r24
    4152:	01 28       	or	r0, r1
    4154:	08 95       	ret

00004156 <__eeprom_read_block_1C1D1E>:
    4156:	09 d0       	rcall	.+18     	; 0x416a <__eeprom_read_byte_1C1D1E>
    4158:	01 92       	st	Z+, r0
    415a:	1a 94       	dec	r1
    415c:	e1 f7       	brne	.-8      	; 0x4156 <__eeprom_read_block_1C1D1E>
    415e:	08 95       	ret

00004160 <__eeprom_write_block_1C1D1E>:
    4160:	01 90       	ld	r0, Z+
    4162:	0b d0       	rcall	.+22     	; 0x417a <__eeprom_write_byte_1C1D1E>
    4164:	1a 94       	dec	r1
    4166:	e1 f7       	brne	.-8      	; 0x4160 <__eeprom_write_block_1C1D1E>
    4168:	08 95       	ret

0000416a <__eeprom_read_byte_1C1D1E>:
    416a:	e1 99       	sbic	0x1c, 1	; 28
    416c:	fe cf       	rjmp	.-4      	; 0x416a <__eeprom_read_byte_1C1D1E>
    416e:	bf bb       	out	0x1f, r27	; 31
    4170:	ae bb       	out	0x1e, r26	; 30
    4172:	e0 9a       	sbi	0x1c, 0	; 28
    4174:	11 96       	adiw	r26, 0x01	; 1
    4176:	0d b2       	in	r0, 0x1d	; 29
    4178:	08 95       	ret

0000417a <__eeprom_write_byte_1C1D1E>:
    417a:	e1 99       	sbic	0x1c, 1	; 28
    417c:	fe cf       	rjmp	.-4      	; 0x417a <__eeprom_write_byte_1C1D1E>
    417e:	bf bb       	out	0x1f, r27	; 31
    4180:	ae bb       	out	0x1e, r26	; 30
    4182:	0d ba       	out	0x1d, r0	; 29
    4184:	11 96       	adiw	r26, 0x01	; 1
    4186:	0f b6       	in	r0, 0x3f	; 63
    4188:	f8 94       	cli
    418a:	e2 9a       	sbi	0x1c, 2	; 28
    418c:	e1 9a       	sbi	0x1c, 1	; 28
    418e:	0f be       	out	0x3f, r0	; 63
    4190:	08 95       	ret
